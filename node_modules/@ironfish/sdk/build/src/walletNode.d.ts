import { AssetsVerifier } from './assets';
import { Config, ConfigOptions, InternalStore } from './fileStores';
import { FileSystem } from './fileSystems';
import { Logger } from './logger';
import { MetricsMonitor } from './metrics';
import { Migrator } from './migrations';
import { Package } from './package';
import { RpcSocketClient } from './rpc';
import { RpcServer } from './rpc/server';
import { Strategy } from './strategy';
import { Wallet } from './wallet';
import { WorkerPool } from './workerPool';
export declare class WalletNode {
    strategy: Strategy;
    config: Config;
    internal: InternalStore;
    wallet: Wallet;
    logger: Logger;
    metrics: MetricsMonitor;
    migrator: Migrator;
    workerPool: WorkerPool;
    files: FileSystem;
    rpc: RpcServer;
    pkg: Package;
    assetsVerifier: AssetsVerifier;
    nodeClient: RpcSocketClient | null;
    started: boolean;
    shutdownPromise: Promise<void> | null;
    shutdownResolve: (() => void) | null;
    private nodeClientConnectionWarned;
    private nodeClientConnectionTimeout;
    constructor({ pkg, files, config, internal, wallet, strategy, metrics, workerPool, logger, assetsVerifier, nodeClient, }: {
        pkg: Package;
        files: FileSystem;
        config: Config;
        internal: InternalStore;
        wallet: Wallet;
        strategy: Strategy;
        metrics: MetricsMonitor;
        workerPool: WorkerPool;
        logger: Logger;
        assetsVerifier: AssetsVerifier;
        nodeClient: RpcSocketClient | null;
    });
    static init({ pkg: pkg, dataDir, config, internal, logger, metrics, files, strategyClass, nodeClient, }: {
        pkg: Package;
        dataDir?: string;
        config?: Config;
        internal?: InternalStore;
        logger?: Logger;
        metrics?: MetricsMonitor;
        files: FileSystem;
        strategyClass: typeof Strategy | null;
        nodeClient: RpcSocketClient | null;
    }): Promise<WalletNode>;
    openDB(): Promise<void>;
    closeDB(): Promise<void>;
    start(): Promise<void>;
    verifyGenesisBlockHash(): Promise<void>;
    connectRpc(startWallet?: boolean): Promise<void>;
    private startConnectingRpc;
    private onDisconnectRpc;
    waitForShutdown(): Promise<void>;
    shutdown(): Promise<void>;
    onConfigChange<Key extends keyof ConfigOptions>(key: Key, newValue: ConfigOptions[Key]): Promise<void>;
}
//# sourceMappingURL=walletNode.d.ts.map