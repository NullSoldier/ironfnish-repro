"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseVersionError = exports.DatabaseIsCorruptError = exports.DatabaseIsLockedError = exports.DatabaseIsOpenError = exports.DatabaseOpenError = exports.DuplicateKeyError = exports.TransactionWrongDatabaseError = void 0;
class TransactionWrongDatabaseError extends Error {
    constructor(store) {
        super(`Wrong transaction database when using store ${store}`);
        this.name = this.constructor.name;
    }
}
exports.TransactionWrongDatabaseError = TransactionWrongDatabaseError;
class DuplicateKeyError extends Error {
    constructor() {
        super(...arguments);
        this.name = this.constructor.name;
    }
}
exports.DuplicateKeyError = DuplicateKeyError;
class DatabaseOpenError extends Error {
    constructor(message, error) {
        super(message ?? error?.message);
        this.name = this.constructor.name;
        if (error && error.stack) {
            this.stack = error.stack;
        }
    }
}
exports.DatabaseOpenError = DatabaseOpenError;
class DatabaseIsOpenError extends DatabaseOpenError {
}
exports.DatabaseIsOpenError = DatabaseIsOpenError;
class DatabaseIsLockedError extends DatabaseOpenError {
}
exports.DatabaseIsLockedError = DatabaseIsLockedError;
class DatabaseIsCorruptError extends DatabaseOpenError {
}
exports.DatabaseIsCorruptError = DatabaseIsCorruptError;
class DatabaseVersionError extends DatabaseOpenError {
    constructor(current, version) {
        super(current <= version
            ? `Your database needs to be upgraded (v${current} vs v${version}).\n` +
                `Run "ironfish migrations:start" or "ironfish start --upgrade"\n`
            : `Your database is newer than your node.\n` +
                `Your database is ${current} and your node is ${version}.\n`);
        this.version = current;
        this.expected = version;
    }
}
exports.DatabaseVersionError = DatabaseVersionError;
//# sourceMappingURL=errors.js.map