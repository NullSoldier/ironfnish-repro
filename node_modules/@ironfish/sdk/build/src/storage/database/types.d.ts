/// <reference types="node" />
import { IJsonSerializable } from '../../serde';
export interface DatabaseKeyRange {
    gt?: Buffer;
    gte?: Buffer;
    lt?: Buffer;
    lte?: Buffer;
}
export interface DatabaseIteratorOptions {
    reverse?: boolean;
    limit?: number;
    ordered?: boolean;
}
export declare type DatabaseKey = bigint | number | string | Date | Buffer | Array<IJsonSerializable> | unknown;
export declare type DatabaseSchema<key extends DatabaseKey = DatabaseKey, value extends unknown = unknown> = {
    key: key;
    value: value;
};
export declare type SchemaKey<Schema extends DatabaseSchema> = Schema['key'];
export declare type SchemaValue<Schema extends DatabaseSchema> = Schema['value'];
export declare type DatabaseOptions = {
    [key: string]: unknown;
};
export declare type IDatabaseEncoding<T> = {
    serialize(value: T): Buffer;
    deserialize(buffer: Buffer): T;
};
//# sourceMappingURL=types.d.ts.map