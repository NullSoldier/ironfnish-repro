/// <reference types="node" />
import { IJsonSerializable } from '../../serde';
import { IDatabaseEncoding } from './types';
export declare class JsonEncoding<T extends IJsonSerializable> implements IDatabaseEncoding<T> {
    serialize: (value: T) => Buffer;
    deserialize: (buffer: Buffer) => T;
}
export declare class StringEncoding<TValues extends string = string> implements IDatabaseEncoding<TValues> {
    serialize: (value: TValues) => Buffer;
    deserialize: (buffer: Buffer) => TValues;
}
export declare class U32Encoding implements IDatabaseEncoding<number> {
    serialize(value: number): Buffer;
    deserialize(buffer: Buffer): number;
}
export declare class U32EncodingBE implements IDatabaseEncoding<number> {
    serialize(value: number): Buffer;
    deserialize(buffer: Buffer): number;
}
export declare class NullEncoding implements IDatabaseEncoding<null> {
    static EMPTY_BUFFER: Buffer;
    serialize(): Buffer;
    deserialize(): null;
}
export declare class BufferEncoding implements IDatabaseEncoding<Buffer> {
    serialize: (value: Buffer) => Buffer;
    deserialize: (buffer: Buffer) => Buffer;
}
export declare class PrefixSizeError extends Error {
    name: string;
}
export declare class PrefixEncoding<TPrefix, TKey> implements IDatabaseEncoding<[TPrefix, TKey]> {
    readonly keyEncoding: IDatabaseEncoding<TKey>;
    readonly prefixEncoding: IDatabaseEncoding<TPrefix>;
    readonly prefixSize: number;
    constructor(prefixEncoding: IDatabaseEncoding<TPrefix>, keyEncoding: IDatabaseEncoding<TKey>, prefixSize: number);
    serialize: (value: [TPrefix, TKey]) => Buffer;
    deserialize: (buffer: Buffer) => [TPrefix, TKey];
}
export declare class NullableBufferEncoding implements IDatabaseEncoding<Buffer | null> {
    serialize: (value: Buffer | null) => Buffer;
    deserialize(buffer: Buffer): Buffer | null;
}
export declare class StringHashEncoding implements IDatabaseEncoding<string> {
    serialize(value: string): Buffer;
    deserialize(buffer: Buffer): string;
}
export declare class NullableStringEncoding implements IDatabaseEncoding<string | null> {
    serialize(value: string | null): Buffer;
    deserialize(buffer: Buffer): string | null;
}
export declare class ArrayEncoding<T extends IJsonSerializable[]> extends JsonEncoding<T> {
}
export declare class BigIntLEEncoding implements IDatabaseEncoding<BigInt> {
    serialize(value: bigint): Buffer;
    deserialize(buffer: Buffer): bigint;
}
export declare class BigU64BEEncoding implements IDatabaseEncoding<BigInt> {
    serialize(value: bigint): Buffer;
    deserialize(buffer: Buffer): bigint;
}
export declare class U64Encoding implements IDatabaseEncoding<number> {
    serialize(value: number): Buffer;
    deserialize(buffer: Buffer): number;
}
export declare class BufferToStringEncoding {
    static serialize(element: Buffer): string;
    static deserialize(data: string): Buffer;
}
export declare const BUFFER_ENCODING: BufferEncoding;
export declare const U32_ENCODING: U32Encoding;
export declare const U32_ENCODING_BE: U32EncodingBE;
export declare const NULL_ENCODING: NullEncoding;
export declare const U64_ENCODING: U64Encoding;
//# sourceMappingURL=encoding.d.ts.map