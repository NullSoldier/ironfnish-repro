"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = exports.DATABASE_ALL_KEY_RANGE = void 0;
exports.DATABASE_ALL_KEY_RANGE = {
    gte: Buffer.alloc(0, 0),
    lt: Buffer.alloc(256, 255),
};
class Database {
    constructor() {
        this.stores = new Array();
    }
    getStores() {
        return Array.from(this.stores);
    }
    addStore(options, requireUnique = true) {
        if (requireUnique) {
            const existing = this.stores.find((s) => s.name === options.name);
            if (existing) {
                throw new Error(`Store with name ${options.name} already exists`);
            }
        }
        const store = this._createStore(options);
        this.stores.push(store);
        return store;
    }
    /*
    Safety wrapper in case you don't know if you've been given a transaction or not
    This will create and commit it at the end if it if it hasn't been passed in.
  
    Usually this is solved by a context that's threaded through the application
    and keeps track of this, but we don't have a context.
    */
    async withTransaction(transaction, handler) {
        const created = !transaction;
        transaction = transaction || this.transaction();
        try {
            await transaction.acquireLock();
            const result = await handler(transaction);
            if (created) {
                await transaction.commit();
            }
            return result;
        }
        catch (error) {
            if (created) {
                await transaction.abort();
            }
            throw error;
        }
    }
}
exports.Database = Database;
//# sourceMappingURL=database.js.map