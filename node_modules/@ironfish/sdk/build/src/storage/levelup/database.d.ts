/// <reference types="node" />
import { AbstractLevelDOWN } from 'abstract-leveldown';
import { LevelUp } from 'levelup';
import { Mutex } from '../../mutex';
import { IJsonSerializable } from '../../serde';
import { BatchOperation, Database, DatabaseSchema, IDatabaseStore, IDatabaseStoreOptions, IDatabaseTransaction, SchemaKey, SchemaValue } from '../database';
import { DatabaseIteratorOptions, DatabaseKeyRange } from '../database/types';
import { LevelupBatch } from './batch';
import { LevelupStore } from './store';
declare type MetaSchema = {
    key: string;
    value: IJsonSerializable;
};
declare type StorageAbstractLevelDown = AbstractLevelDOWN<string | Buffer, string | Buffer>;
export declare class LevelupDatabase extends Database {
    db: StorageAbstractLevelDown;
    metaStore: LevelupStore<MetaSchema>;
    lock: Mutex;
    _levelup: LevelUp | null;
    get levelup(): LevelUp;
    constructor(db: StorageAbstractLevelDown);
    get isOpen(): boolean;
    /**
     * @param options https://github.com/Level/leveldown/blob/51979d11f576c480bc5729a6adea6ac9fed57216/binding.cc#L980k,
     */
    open(): Promise<void>;
    close(): Promise<void>;
    upgrade(version: number): Promise<void>;
    compact(): Promise<void>;
    transaction<TResult>(handler: (transaction: IDatabaseTransaction) => Promise<TResult>): Promise<TResult>;
    transaction(): IDatabaseTransaction;
    batch(writes: BatchOperation<DatabaseSchema, SchemaKey<DatabaseSchema>, SchemaValue<DatabaseSchema>>[]): Promise<void>;
    batch(writes?: undefined): LevelupBatch;
    get(key: Readonly<Buffer>): Promise<Buffer | undefined>;
    put(key: Readonly<Buffer>, value: Buffer): Promise<void>;
    getAllIter(range?: DatabaseKeyRange, options?: DatabaseIteratorOptions): AsyncGenerator<[Buffer, Buffer]>;
    getVersion(): Promise<number>;
    putVersion(version: number, transaction?: IDatabaseTransaction): Promise<void>;
    protected _createStore<Schema extends DatabaseSchema>(options: IDatabaseStoreOptions<Schema>): IDatabaseStore<Schema>;
    size(): Promise<number>;
}
export {};
//# sourceMappingURL=database.d.ts.map