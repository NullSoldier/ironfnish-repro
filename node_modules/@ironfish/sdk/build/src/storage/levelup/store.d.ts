/// <reference types="node" />
import type { LevelupDatabase } from './database';
import { DatabaseIteratorOptions, DatabaseKeyRange, DatabaseSchema, DatabaseStore, IDatabaseStoreOptions, IDatabaseTransaction, SchemaKey, SchemaValue } from '../database';
export declare class LevelupStore<Schema extends DatabaseSchema> extends DatabaseStore<Schema> {
    db: LevelupDatabase;
    allKeysRange: DatabaseKeyRange;
    prefixBuffer: Buffer;
    constructor(db: LevelupDatabase, options: IDatabaseStoreOptions<Schema>);
    has(key: SchemaKey<Schema>, transaction?: IDatabaseTransaction): Promise<boolean>;
    get(key: SchemaKey<Schema>, transaction?: IDatabaseTransaction): Promise<SchemaValue<Schema> | undefined>;
    getAllIter(transaction?: IDatabaseTransaction, keyRange?: DatabaseKeyRange, iteratorOptions?: DatabaseIteratorOptions): AsyncGenerator<[SchemaKey<Schema>, SchemaValue<Schema>]>;
    getAll(transaction?: IDatabaseTransaction, keyRange?: DatabaseKeyRange, iteratorOptions?: DatabaseIteratorOptions): Promise<Array<[SchemaKey<Schema>, SchemaValue<Schema>]>>;
    getAllValuesIter(transaction?: IDatabaseTransaction, keyRange?: DatabaseKeyRange, iteratorOptions?: DatabaseIteratorOptions): AsyncGenerator<SchemaValue<Schema>>;
    getAllValues(transaction?: IDatabaseTransaction, keyRange?: DatabaseKeyRange, iteratorOptions?: DatabaseIteratorOptions): Promise<Array<SchemaValue<Schema>>>;
    getAllKeysIter(transaction?: IDatabaseTransaction, keyRange?: DatabaseKeyRange, iteratorOptions?: DatabaseIteratorOptions): AsyncGenerator<SchemaKey<Schema>>;
    getAllKeys(transaction?: IDatabaseTransaction, keyRange?: DatabaseKeyRange, iteratorOptions?: DatabaseIteratorOptions): Promise<Array<SchemaKey<Schema>>>;
    clear(transaction?: IDatabaseTransaction, keyRange?: DatabaseKeyRange): Promise<void>;
    put(key: SchemaKey<Schema>, value: SchemaValue<Schema>, transaction?: IDatabaseTransaction): Promise<void>;
    add(key: SchemaKey<Schema>, value: SchemaValue<Schema>, transaction?: IDatabaseTransaction): Promise<void>;
    del(key: SchemaKey<Schema>, transaction?: IDatabaseTransaction): Promise<void>;
    encode(key: SchemaKey<Schema>): [Buffer];
    encode(key: SchemaKey<Schema>, value: SchemaValue<Schema>): [Buffer, Buffer];
    decodeKey(key: Buffer): SchemaKey<Schema>;
}
//# sourceMappingURL=store.d.ts.map