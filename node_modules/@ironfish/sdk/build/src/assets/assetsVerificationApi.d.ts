/// <reference types="node" />
export declare class VerifiedAssets {
    private readonly assetIds;
    private lastModified?;
    export(): ExportedVerifiedAssets;
    static restore(options: ExportedVerifiedAssets): VerifiedAssets;
    isVerified(assetId: Buffer | string): boolean;
}
export declare type ExportedVerifiedAssets = {
    assetIds: string[];
    lastModified?: string;
};
export declare class AssetsVerificationApi {
    private readonly timeout;
    private readonly adapter?;
    readonly url: string;
    constructor(options?: {
        url?: string;
        timeout?: number;
    });
    getVerifiedAssets(): Promise<VerifiedAssets>;
    /**
     * Queries the remote API for an updated version of `verifiedAssets`.
     * @returns `true` if `verifiedAssets` has been updated; `false` otherwise,
     */
    refreshVerifiedAssets(verifiedAssets: VerifiedAssets): Promise<boolean>;
}
//# sourceMappingURL=assetsVerificationApi.d.ts.map