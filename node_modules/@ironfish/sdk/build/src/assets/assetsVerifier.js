"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsVerifier = void 0;
const logger_1 = require("../logger");
const utils_1 = require("../utils");
const utils_2 = require("../utils");
const assetsVerificationApi_1 = require("./assetsVerificationApi");
class AssetsVerifier {
    constructor(options) {
        this.REFRESH_INTERVAL = 6 * 60 * 60 * 1000; // 6 hours
        this.retry = new utils_2.Retry({
            delay: 60 * 1000,
            jitter: 0.2,
            maxDelay: 60 * 60 * 1000, // 1 hour
        });
        this.logger = options?.logger ?? logger_1.createRootLogger();
        this.api = new assetsVerificationApi_1.AssetsVerificationApi({ url: options?.apiUrl });
        this.cache = options?.cache;
        this.started = false;
        if (this.cache?.config?.apiUrl === this.api.url) {
            this.verifiedAssets = assetsVerificationApi_1.VerifiedAssets.restore(this.cache.config);
        }
    }
    start() {
        if (this.started) {
            return;
        }
        this.started = true;
        void this.refreshLoop();
    }
    stop() {
        if (!this.started) {
            return;
        }
        this.started = false;
        if (this.refreshToken) {
            clearTimeout(this.refreshToken);
        }
    }
    async refreshLoop() {
        await this.retry.try(this.refresh.bind(this));
        this.refreshToken = setTimeout(() => {
            void this.refreshLoop();
        }, this.REFRESH_INTERVAL);
    }
    async refresh() {
        try {
            if (this.verifiedAssets) {
                this.logger.debug(`Refreshing list of verified assets from ${this.api.url}`);
                if (await this.api.refreshVerifiedAssets(this.verifiedAssets)) {
                    await this.saveCache();
                }
            }
            else {
                this.logger.debug(`Downloading list of verified assets from ${this.api.url}`);
                this.verifiedAssets = await this.api.getVerifiedAssets();
                await this.saveCache();
            }
        }
        catch (error) {
            this.logger.warn(`Error while fetching verified assets: ${utils_1.ErrorUtils.renderError(error)}`);
            throw error;
        }
    }
    saveCache() {
        if (!this.cache) {
            return Promise.resolve();
        }
        this.cache.setMany({
            apiUrl: this.api.url,
            ...(this.verifiedAssets ?? new assetsVerificationApi_1.VerifiedAssets()).export(),
        });
        return this.cache.save();
    }
    verify(assetId) {
        if (!this.verifiedAssets) {
            return { status: 'unknown' };
        }
        if (this.verifiedAssets.isVerified(assetId)) {
            return { status: 'verified' };
        }
        else {
            return { status: 'unverified' };
        }
    }
}
exports.AssetsVerifier = AssetsVerifier;
//# sourceMappingURL=assetsVerifier.js.map