"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsVerificationApi = exports.VerifiedAssets = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const axios_1 = __importDefault(require("axios"));
const promises_1 = require("node:fs/promises");
const url_1 = __importStar(require("url"));
class VerifiedAssets {
    constructor() {
        this.assetIds = new Set();
    }
    export() {
        return {
            assetIds: Array.from(this.assetIds),
            lastModified: this.lastModified,
        };
    }
    static restore(options) {
        const verifiedAssets = new VerifiedAssets();
        options.assetIds.forEach((identifier) => verifiedAssets.assetIds.add(identifier));
        verifiedAssets.lastModified = options.lastModified;
        return verifiedAssets;
    }
    isVerified(assetId) {
        if (!(typeof assetId === 'string')) {
            assetId = assetId.toString('hex');
        }
        return this.assetIds.has(assetId);
    }
}
exports.VerifiedAssets = VerifiedAssets;
class AssetsVerificationApi {
    constructor(options) {
        this.url = options?.url || 'https://api.ironfish.network/assets/verified';
        this.timeout = options?.timeout ?? 30 * 1000; // 30 seconds
        this.adapter = isFileUrl(this.url) ? axiosFileAdapter : axios_1.default.defaults.adapter;
    }
    async getVerifiedAssets() {
        const verifiedAssets = new VerifiedAssets();
        await this.refreshVerifiedAssets(verifiedAssets);
        return verifiedAssets;
    }
    /**
     * Queries the remote API for an updated version of `verifiedAssets`.
     * @returns `true` if `verifiedAssets` has been updated; `false` otherwise,
     */
    refreshVerifiedAssets(verifiedAssets) {
        const headers = {};
        if (verifiedAssets['lastModified']) {
            headers['if-modified-since'] = verifiedAssets['lastModified'];
        }
        return axios_1.default
            .get(this.url, {
            headers: headers,
            timeout: this.timeout,
            adapter: this.adapter,
        })
            .then((response) => {
            verifiedAssets['assetIds'].clear();
            response.data.assets.forEach(({ identifier }) => {
                return verifiedAssets['assetIds'].add(identifier);
            });
            verifiedAssets['lastModified'] = response.headers['last-modified'];
            return true;
        })
            .catch((error) => {
            if (error.response?.status === 304) {
                return false;
            }
            throw error;
        });
    }
}
exports.AssetsVerificationApi = AssetsVerificationApi;
const isFileUrl = (url) => {
    const parsedUrl = new url_1.URL(url);
    return parsedUrl.protocol === 'file:';
};
const axiosFileAdapter = (config) => {
    if (!config.url) {
        return Promise.reject(new Error('url is undefined'));
    }
    const path = url_1.default.fileURLToPath(config.url);
    return promises_1.readFile(path, { encoding: 'utf8' })
        .then(JSON.parse)
        .then((data) => ({
        data,
        status: 0,
        statusText: '',
        headers: {},
        config: config,
    }));
};
//# sourceMappingURL=assetsVerificationApi.js.map