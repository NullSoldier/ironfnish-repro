"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFileProvider = void 0;
const assert_1 = require("../assert");
const fileSystem_1 = require("./fileSystem");
class NodeFileProvider extends fileSystem_1.FileSystem {
    constructor() {
        super(...arguments);
        this.fsSync = null;
        this.fs = null;
        this.path = null;
        this.os = null;
    }
    async init() {
        this.fsSync = await Promise.resolve().then(() => __importStar(require('fs')));
        this.path = await Promise.resolve().then(() => __importStar(require('path')));
        this.os = await Promise.resolve().then(() => __importStar(require('os')));
        this.fs = this.fsSync.promises;
        return this;
    }
    async access(path, mode) {
        assert_1.Assert.isNotNull(this.fs, `Must call FileSystem.init()`);
        await this.fs.access(path, mode);
    }
    async writeFile(path, data, options) {
        assert_1.Assert.isNotNull(this.fs, `Must call FileSystem.init()`);
        await this.fs.writeFile(path, data, options);
    }
    async readFile(path) {
        assert_1.Assert.isNotNull(this.fs, `Must call FileSystem.init()`);
        return await this.fs.readFile(path, { encoding: 'utf8' });
    }
    async mkdir(path, options) {
        assert_1.Assert.isNotNull(this.fs, `Must call FileSystem.init()`);
        await this.fs.mkdir(path, options);
    }
    resolve(path) {
        assert_1.Assert.isNotNull(this.path, `Must call FileSystem.init()`);
        return this.path.resolve(this.expandTilde(path));
    }
    join(...paths) {
        assert_1.Assert.isNotNull(this.path, `Must call FileSystem.init()`);
        return this.path.join(...paths);
    }
    dirname(path) {
        assert_1.Assert.isNotNull(this.path, `Must call FileSystem.init()`);
        return this.path.dirname(path);
    }
    basename(path, ext) {
        assert_1.Assert.isNotNull(this.path, `Must call FileSystem.init()`);
        return this.path.basename(path, ext);
    }
    extname(path) {
        assert_1.Assert.isNotNull(this.path, `Must call FileSystem.init()`);
        return this.path.extname(path);
    }
    async exists(path) {
        assert_1.Assert.isNotNull(this.path, `Must call FileSystem.init()`);
        return await this.access(path)
            .then(() => true)
            .catch(() => false);
    }
    /**
     * Expands a path out using known unix shell shortcuts
     * ~ expands to your home directory
     * ~+ expands to your current directory
     *
     * @param filePath The filepath to expand out using unix shortcuts
     */
    expandTilde(filePath) {
        assert_1.Assert.isNotNull(this.os);
        assert_1.Assert.isNotNull(this.path);
        const CHAR_TILDE = 126;
        const CHAR_PLUS = 43;
        const home = this.os.homedir();
        if (filePath.charCodeAt(0) === CHAR_TILDE) {
            if (filePath.charCodeAt(1) === CHAR_PLUS) {
                return this.path.join(process.cwd(), filePath.slice(2));
            }
            if (!home) {
                return filePath;
            }
            return this.path.join(home, filePath.slice(1));
        }
        return filePath;
    }
}
exports.NodeFileProvider = NodeFileProvider;
//# sourceMappingURL=nodeFileSystem.js.map