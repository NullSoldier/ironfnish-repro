/// <reference types="node" />
import type fs from 'fs';
import { FileSystem } from './fileSystem';
export declare class NodeFileProvider extends FileSystem {
    fsSync: typeof import('fs') | null;
    fs: typeof import('fs').promises | null;
    path: typeof import('path') | null;
    os: typeof import('os') | null;
    init(): Promise<FileSystem>;
    access(path: fs.PathLike, mode?: number | undefined): Promise<void>;
    writeFile(path: string, data: string, options?: {
        mode?: fs.Mode;
        flag?: fs.OpenMode;
    }): Promise<void>;
    readFile(path: string): Promise<string>;
    mkdir(path: string, options: {
        recursive?: boolean;
    }): Promise<void>;
    resolve(path: string): string;
    join(...paths: string[]): string;
    dirname(path: string): string;
    basename(path: string, ext?: string | undefined): string;
    extname(path: string): string;
    exists(path: string): Promise<boolean>;
    /**
     * Expands a path out using known unix shell shortcuts
     * ~ expands to your home directory
     * ~+ expands to your current directory
     *
     * @param filePath The filepath to expand out using unix shortcuts
     */
    private expandTilde;
}
//# sourceMappingURL=nodeFileSystem.d.ts.map