"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestDB = exports.makeDbPath = exports.makeDb = exports.makeDbName = void 0;
const leveldown_1 = __importDefault(require("leveldown"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
const storage_1 = require("../../storage");
const utils_1 = require("../../storage/utils");
const utils_2 = require("../utils");
/** Generate a test database name from the given test if not provided*/
function makeDbName() {
    const id = (Math.random() * Number.MAX_SAFE_INTEGER).toFixed(0);
    const testName = expect.getState().currentTestName || '';
    return testName + '-' + id;
}
exports.makeDbName = makeDbName;
function makeDb(name) {
    if (!name) {
        name = makeDbName();
    }
    return new storage_1.LevelupDatabase(leveldown_1.default(`${utils_2.TEST_DATA_DIR}/${name}`));
}
exports.makeDb = makeDb;
function makeDbPath(name) {
    if (!name) {
        name = makeDbName();
    }
    return `${utils_2.TEST_DATA_DIR}/${name}`;
}
exports.makeDbPath = makeDbPath;
async function createTestDB(open = false, location) {
    if (!location) {
        location = path_1.default.join(os_1.default.tmpdir(), uuid_1.v4());
    }
    const database = utils_1.createDB({ location });
    afterEach(async () => database?.close());
    if (open) {
        await database.open();
    }
    return {
        db: database,
        location,
    };
}
exports.createTestDB = createTestDB;
//# sourceMappingURL=storage.js.map