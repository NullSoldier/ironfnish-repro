import { Blockchain } from '../blockchain';
import { Verifier } from '../consensus';
import { PeerNetwork } from '../network/peerNetwork';
import { FullNode } from '../node';
import { RpcMemoryAdapter } from '../rpc/adapters';
import { RpcMemoryClient } from '../rpc/clients';
import { IronfishSdk } from '../sdk';
import { Syncer } from '../syncer';
import { Wallet } from '../wallet';
import { WorkerPool } from '../workerPool';
import { NodeTest } from './nodeTest';
import { TestStrategy } from './strategy';
/**
 * Used as an easy wrapper for an RPC route test. Use {@link createRouteTest}
 * to create one to make sure you call the proper test lifecycle methods on
 * the RouteTest
 */
export declare class RouteTest extends NodeTest {
    adapter: RpcMemoryAdapter;
    client: RpcMemoryClient;
    createSetup(): Promise<{
        sdk: IronfishSdk;
        node: FullNode;
        strategy: TestStrategy;
        verifier: Verifier;
        chain: Blockchain;
        wallet: Wallet;
        peerNetwork: PeerNetwork;
        syncer: Syncer;
        workerPool: WorkerPool;
        client: RpcMemoryClient;
    }>;
    setup(): Promise<void>;
}
/** Call this to create a {@link RouteTest} and ensure its test lifecycle
 * methods are called properly like beforeEach, beforeAll, etc
 */
export declare function createRouteTest(preserveState?: boolean): RouteTest;
//# sourceMappingURL=routeTest.d.ts.map