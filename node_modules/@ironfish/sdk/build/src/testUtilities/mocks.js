"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockConfig = exports.mockWorkerPool = exports.mockTelemetry = exports.mockLogger = exports.mockSyncer = exports.mockMiningManager = exports.mockDirector = exports.mockPeerNetwork = exports.mockNode = exports.mockStrategy = exports.mockChain = exports.mockVerifier = exports.mockWallet = exports.mockEvent = exports.mockTransaction = void 0;
const event_1 = require("../event");
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
function mockTransaction() {
    return {
        unsignedHash: jest.fn().mockReturnValue(Buffer.alloc(32, 'unsignedHash')),
        hash: jest.fn().mockReturnValue(Buffer.alloc(32, 'hash')),
    };
}
exports.mockTransaction = mockTransaction;
function mockEvent() {
    return { on: jest.fn() };
}
exports.mockEvent = mockEvent;
function mockWallet() {
    return {
        onBroadcastTransaction: mockEvent(),
    };
}
exports.mockWallet = mockWallet;
function mockVerifier() {
    return {
        verifyNewTransaction: jest.fn().mockResolvedValue({}),
    };
}
exports.mockVerifier = mockVerifier;
function mockChain() {
    return {
        verifier: mockVerifier(),
        head: { hash: 'mockhash', sequence: 1, work: BigInt(0) },
        synced: true,
        onConnectBlock: new event_1.Event(),
        onDisconnectBlock: new event_1.Event(),
        onForkBlock: new event_1.Event(),
        genesis: { hash: Buffer.alloc(32, 0), sequence: 1, work: BigInt(0) },
    };
}
exports.mockChain = mockChain;
function mockStrategy() {
    return {};
}
exports.mockStrategy = mockStrategy;
function mockNode() {
    return {
        wallet: mockWallet(),
        memPool: mockMempool(),
        miningDirector: mockDirector(),
        miningManager: mockMiningManager(),
        syncer: mockSyncer(),
        workerPool: mockWorkerPool(),
        chain: mockChain(),
    };
}
exports.mockNode = mockNode;
function mockPeerNetwork() {
    return {};
}
exports.mockPeerNetwork = mockPeerNetwork;
function mockDirector() {
    return {
        onNewBlock: mockEvent(),
    };
}
exports.mockDirector = mockDirector;
function mockMiningManager() {
    return {
        onNewBlock: mockEvent(),
    };
}
exports.mockMiningManager = mockMiningManager;
function mockMempool() {
    return {
        acceptTransaction: jest.fn(),
        exists: jest.fn().mockReturnValue(false),
    };
}
function mockSyncer() {
    return {
        addNewBlock: jest.fn(),
    };
}
exports.mockSyncer = mockSyncer;
function mockLogger() {
    return {
        debug: jest.fn(),
        error: jest.fn(),
    };
}
exports.mockLogger = mockLogger;
function mockTelemetry() {
    return {};
}
exports.mockTelemetry = mockTelemetry;
function mockWorkerPool() {
    return {
        saturated: jest.fn(),
        submitTelemetry: jest.fn(),
    };
}
exports.mockWorkerPool = mockWorkerPool;
function mockConfig(values) {
    return {
        get: jest.fn((x) => values[x]),
    };
}
exports.mockConfig = mockConfig;
//# sourceMappingURL=mocks.js.map