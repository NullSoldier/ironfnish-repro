"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeFakeWitness = void 0;
const assert_1 = require("../assert");
const merkletree_1 = require("../merkletree");
const merkletree_2 = require("../merkletree/merkletree");
function makeFakeWitness(note) {
    const hasher = new merkletree_1.NoteHasher();
    let rootHash = note.hash();
    const witnessPath = [];
    for (let i = 0; i < 32; i++) {
        const hashOfSibling = Buffer.alloc(32, i);
        if (Math.floor(Math.random() * 2)) {
            witnessPath.push({ side: merkletree_2.Side.Right, hashOfSibling });
            rootHash = hasher.combineHash(i, hashOfSibling, rootHash);
        }
        else {
            witnessPath.push({ side: merkletree_2.Side.Left, hashOfSibling });
            rootHash = hasher.combineHash(i, rootHash, hashOfSibling);
        }
    }
    const witness = new merkletree_1.Witness(0, rootHash, witnessPath, hasher);
    assert_1.Assert.isTrue(witness.verify(note.hash()));
    return witness;
}
exports.makeFakeWitness = makeFakeWitness;
//# sourceMappingURL=witness.js.map