import './matchers';
import { Blockchain } from '../blockchain';
import { Verifier } from '../consensus/verifier';
import { ConfigOptions } from '../fileStores/config';
import { PeerNetwork } from '../network';
import { FullNode } from '../node';
import { IronfishSdk } from '../sdk';
import { Syncer } from '../syncer';
import { Wallet } from '../wallet';
import { WorkerPool } from '../workerPool';
import { TestStrategy } from './strategy';
export declare type NodeTestOptions = {
    config?: Partial<ConfigOptions>;
    autoSeed?: boolean;
} | undefined;
/**
 * Used as an easy wrapper for testing the node, and blockchain. Use
 * {@link createNodeTest} to create one to make sure you call the proper
 * test lifecycle methods on the NodeTest
 */
export declare class NodeTest {
    options: NodeTestOptions;
    sdk: IronfishSdk;
    node: FullNode;
    strategy: TestStrategy;
    verifier: Verifier;
    chain: Blockchain;
    wallet: Wallet;
    peerNetwork: PeerNetwork;
    syncer: Syncer;
    workerPool: WorkerPool;
    setups: {
        sdk: IronfishSdk;
        node: FullNode;
        strategy: TestStrategy;
        chain: Blockchain;
        wallet: Wallet;
        peerNetwork: PeerNetwork;
        syncer: Syncer;
        workerPool: WorkerPool;
    }[];
    constructor(options?: NodeTestOptions);
    createSetup(options?: NodeTestOptions): Promise<{
        sdk: IronfishSdk;
        node: FullNode;
        strategy: TestStrategy;
        verifier: Verifier;
        chain: Blockchain;
        wallet: Wallet;
        peerNetwork: PeerNetwork;
        syncer: Syncer;
        workerPool: WorkerPool;
    }>;
    setup(): Promise<void>;
    teardownEach(): Promise<void>;
    teardownAll(): Promise<void>;
}
/** Call this to create a {@link NodeTest} and ensure its test lifecycle
 * methods are called properly like beforeEach, beforeAll, etc
 */
export declare function createNodeTest(preserveState?: boolean, options?: NodeTestOptions): NodeTest;
//# sourceMappingURL=nodeTest.d.ts.map