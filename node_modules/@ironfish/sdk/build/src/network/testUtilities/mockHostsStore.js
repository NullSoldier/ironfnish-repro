"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockFileSystem = exports.mockHostsStore = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const fileStores_1 = require("../../fileStores");
const fileSystems_1 = require("../../fileSystems");
/**
 * Utility to create a fake HostsStore for use in
 * AddressManager and PeerManager
 */
class MockFileSystem extends fileSystems_1.FileSystem {
    constructor() {
        super(...arguments);
        this.fsSync = null;
        this.fs = null;
        this.path = null;
        this.os = null;
    }
    async init() {
        this.fsSync = await Promise.resolve().then(() => __importStar(require('fs')));
        this.path = await Promise.resolve().then(() => __importStar(require('path')));
        this.os = await Promise.resolve().then(() => __importStar(require('os')));
        this.fs = this.fsSync.promises;
        return this;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async access() {
        throw new Error('File does not exist');
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async writeFile() { }
    // eslint-disable-next-line @typescript-eslint/require-await
    async readFile() {
        return '{}';
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async mkdir() { }
    join() {
        return '';
    }
    dirname() {
        return '';
    }
    basename() {
        return '';
    }
    extname() {
        return '';
    }
    resolve() {
        return '';
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async exists() {
        return false;
    }
}
class MockHostsStore extends fileStores_1.HostsStore {
    constructor() {
        super(new MockFileSystem(), fileStores_1.DEFAULT_DATA_DIR);
        super.set('priorPeers', [
            {
                address: '127.0.0.1',
                port: 9999,
                identity: null,
                name: null,
            },
        ]);
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async load() { }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async save() { }
    getArray(key) {
        return super.getArray(key);
    }
    set(key, val) {
        super.set(key, val);
    }
}
function mockHostsStore() {
    return new MockHostsStore();
}
exports.mockHostsStore = mockHostsStore;
function mockFileSystem() {
    return new MockFileSystem();
}
exports.mockFileSystem = mockFileSystem;
//# sourceMappingURL=mockHostsStore.js.map