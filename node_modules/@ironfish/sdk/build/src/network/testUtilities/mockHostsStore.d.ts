import { HostsOptions, HostsStore } from '../../fileStores';
import { FileSystem } from '../../fileSystems';
import { PeerAddress } from '../peers/peerAddress';
/**
 * Utility to create a fake HostsStore for use in
 * AddressManager and PeerManager
 */
declare class MockFileSystem extends FileSystem {
    fsSync: typeof import('fs') | null;
    fs: typeof import('fs').promises | null;
    path: typeof import('path') | null;
    os: typeof import('os') | null;
    init(): Promise<FileSystem>;
    access(): Promise<void>;
    writeFile(): Promise<void>;
    readFile(): Promise<string>;
    mkdir(): Promise<void>;
    join(): string;
    dirname(): string;
    basename(): string;
    extname(): string;
    resolve(): string;
    exists(): Promise<boolean>;
}
declare class MockHostsStore extends HostsStore {
    constructor();
    load(): Promise<void>;
    save(): Promise<void>;
    getArray(key: keyof HostsOptions): PeerAddress[];
    set(key: keyof HostsOptions, val: PeerAddress[]): void;
}
export declare function mockHostsStore(): MockHostsStore;
export declare function mockFileSystem(): MockFileSystem;
export {};
//# sourceMappingURL=mockHostsStore.d.ts.map