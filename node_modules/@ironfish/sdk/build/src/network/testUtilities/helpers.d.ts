import { Identity } from '../identity';
import { GetBlockHeadersResponse } from '../messages/getBlockHeaders';
import { GetBlocksResponse } from '../messages/getBlocks';
import { GetBlockTransactionsResponse } from '../messages/getBlockTransactions';
import { GetCompactBlockResponse } from '../messages/getCompactBlock';
import { NetworkMessage } from '../messages/networkMessage';
import { Connection, ConnectionDirection, WebRtcConnection, WebSocketConnection } from '../peers/connections';
import { Peer } from '../peers/peer';
import { PeerManager } from '../peers/peerManager';
export declare function getConnectingPeer(pm: PeerManager, direction?: ConnectionDirection, identity?: string | Identity): {
    peer: Peer;
    connection: WebSocketConnection;
};
export declare function getWaitingForIdentityPeer(pm: PeerManager, direction?: ConnectionDirection, identity?: string | Identity): {
    peer: Peer;
    connection: WebSocketConnection;
};
export declare function peerMessage<T extends NetworkMessage>(peer: Peer, message: T): [Peer, T];
export declare const getConnectedPeersWithSpies: (peerManager: PeerManager, count: number) => {
    peer: Peer;
    sendSpy: jest.SpyInstance<Connection | null, [message: NetworkMessage]>;
}[];
export declare function getConnectedPeer(pm: PeerManager, identity?: string | Identity): {
    peer: Peer;
    connection: WebSocketConnection;
};
export declare function getDisconnectedPeer(pm: PeerManager, identity?: string | Identity): Peer;
export declare function getSignalingWebRtcPeer(pm: PeerManager, brokeringPeerIdentity: Identity, peerIdentity: Identity): {
    peer: Peer;
    connection: WebRtcConnection;
    brokeringPeer: Peer;
    brokeringConnection: Connection;
};
export declare function expectGetCompactBlockResponseToMatch(a: GetCompactBlockResponse, b: GetCompactBlockResponse): void;
export declare function expectGetBlockTransactionsResponseToMatch(a: GetBlockTransactionsResponse, b: GetBlockTransactionsResponse): void;
export declare function expectGetBlockHeadersResponseToMatch(a: GetBlockHeadersResponse, b: GetBlockHeadersResponse): void;
export declare function expectGetBlocksResponseToMatch(a: GetBlocksResponse, b: GetBlocksResponse): void;
//# sourceMappingURL=helpers.d.ts.map