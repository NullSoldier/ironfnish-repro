"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockPrivateIdentity = exports.webRtcCannotInitiateIdentityPrivate = exports.webRtcLocalIdentity = exports.webRtcCanInitiateIdentityPrivate = void 0;
const identity_1 = require("../identity");
// The identities here are in order of:
// Lowest:   webRtcCanInitiateIdentityPrivate
// Middle:   webRtcLocalIdentity
// Greatest: webRtcCannotInitiateIdentityPrivate
/** webRtcCanInitiateIdentity as a base64 string is less than webRtcLocalIdentity */
const webRtcCanInitiateIdentityPrivate = () => mockPrivateIdentity('k');
exports.webRtcCanInitiateIdentityPrivate = webRtcCanInitiateIdentityPrivate;
/** webRtcLocalIdentity as a base64 string is between webRtcCannotInitiateIdentity and webRtcCanInitiateIdentity  */
const webRtcLocalIdentity = () => mockPrivateIdentity('l');
exports.webRtcLocalIdentity = webRtcLocalIdentity;
/** webRtcCannotInitiateIdentity as a base64 string is greater than webRtcLocalIdentity */
const webRtcCannotInitiateIdentityPrivate = () => mockPrivateIdentity('m');
exports.webRtcCannotInitiateIdentityPrivate = webRtcCannotInitiateIdentityPrivate;
/**
 * Utility to create a fake "keypair" for testing the network layer
 */
function mockPrivateIdentity(identity) {
    return {
        publicKey: Buffer.alloc(identity_1.identityLength, identity, 'utf8'),
        secretKey: Buffer.alloc(identity_1.identityLength, identity, 'utf8'),
    };
}
exports.mockPrivateIdentity = mockPrivateIdentity;
//# sourceMappingURL=mockPrivateIdentity.js.map