/// <reference types="node" />
import bufio from 'bufio';
import { Identity } from '../identity';
import { NetworkMessage } from './networkMessage';
interface CreateSignalMessageOptions {
    destinationIdentity: Identity;
    sourceIdentity: Identity;
    nonce: string;
    signal: string;
}
/**
 * A message used to signal an rtc session between two peers.
 *
 * The referring peer will forward the message to the sourceIdentity,
 * which will need to respond with a signal that has peer and source
 * inverted.
 */
export declare class SignalMessage extends NetworkMessage {
    readonly sourceIdentity: Identity;
    readonly destinationIdentity: Identity;
    readonly nonce: string;
    readonly signal: string;
    constructor({ destinationIdentity, sourceIdentity, nonce, signal, }: CreateSignalMessageOptions);
    serializePayload(bw: bufio.StaticWriter | bufio.BufferWriter): void;
    static deserializePayload(buffer: Buffer): SignalMessage;
    getSize(): number;
}
export {};
//# sourceMappingURL=signal.d.ts.map