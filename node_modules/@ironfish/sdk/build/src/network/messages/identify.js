"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentifyMessage = void 0;
const bufio_1 = __importDefault(require("bufio"));
const bigint_1 = require("../../utils/bigint");
const identity_1 = require("../identity");
const types_1 = require("../types");
const networkMessage_1 = require("./networkMessage");
class IdentifyMessage extends networkMessage_1.NetworkMessage {
    constructor({ agent, head, identity, name, port, sequence, version, work, networkId, genesisBlockHash, features, }) {
        super(types_1.NetworkMessageType.Identify);
        this.agent = agent;
        this.head = head;
        this.identity = identity;
        this.name = name || '';
        this.port = port || 0;
        this.sequence = sequence;
        this.version = version;
        this.work = work;
        this.networkId = networkId;
        this.genesisBlockHash = genesisBlockHash;
        this.features = features;
    }
    serializePayload(bw) {
        bw.writeBytes(Buffer.from(this.identity, 'base64'));
        bw.writeVarString(this.name, 'utf8');
        bw.writeU16(this.port);
        bw.writeU16(this.version);
        bw.writeVarString(this.agent, 'utf8');
        bw.writeU32(this.sequence);
        bw.writeHash(this.head);
        bw.writeVarBytes(bigint_1.BigIntUtils.toBytesLE(this.work));
        bw.writeU16(this.networkId);
        bw.writeHash(this.genesisBlockHash);
        let flags = 0;
        flags |= Number(this.features.syncing) << 0;
        bw.writeU32(flags);
    }
    static deserializePayload(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const identity = reader.readBytes(identity_1.identityLength).toString('base64');
        const name = reader.readVarString('utf8');
        const port = reader.readU16();
        const version = reader.readU16();
        const agent = reader.readVarString('utf8');
        const sequence = reader.readU32();
        const head = reader.readHash();
        const work = bigint_1.BigIntUtils.fromBytesLE(reader.readVarBytes());
        const networkId = reader.readU16();
        const genesisBlockHash = reader.readHash();
        const flagValue = reader.readU32();
        const syncing = Boolean(flagValue & (1 << 0));
        const features = { syncing };
        return new IdentifyMessage({
            agent,
            head,
            identity,
            name,
            port,
            sequence,
            version,
            work,
            networkId,
            genesisBlockHash,
            features,
        });
    }
    getSize() {
        let size = 0;
        size += identity_1.identityLength;
        size += bufio_1.default.sizeVarString(this.name, 'utf8');
        size += 2; // port
        size += 2; // version
        size += bufio_1.default.sizeVarString(this.agent, 'utf8');
        size += 4; // sequence
        size += 32; // head
        size += bufio_1.default.sizeVarBytes(bigint_1.BigIntUtils.toBytesLE(this.work));
        size += 2; // network ID
        size += 32; // genesis block hash
        size += 4; // features
        return size;
    }
}
exports.IdentifyMessage = IdentifyMessage;
//# sourceMappingURL=identify.js.map