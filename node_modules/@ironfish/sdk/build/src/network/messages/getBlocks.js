"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetBlocksResponse = exports.GetBlocksRequest = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importDefault(require("bufio"));
const types_1 = require("../types");
const serializers_1 = require("../utils/serializers");
const rpcNetworkMessage_1 = require("./rpcNetworkMessage");
class GetBlocksRequest extends rpcNetworkMessage_1.RpcNetworkMessage {
    constructor(start, limit, rpcId) {
        super(types_1.NetworkMessageType.GetBlocksRequest, rpcNetworkMessage_1.Direction.Request, rpcId);
        this.start = start;
        this.limit = limit;
    }
    serializePayload(bw) {
        bw.writeHash(this.start);
        bw.writeU16(this.limit);
    }
    static deserializePayload(buffer, rpcId) {
        const reader = bufio_1.default.read(buffer, true);
        const start = reader.readHash();
        const limit = reader.readU16();
        return new GetBlocksRequest(start, limit, rpcId);
    }
    getSize() {
        let size = 0;
        size += 32;
        size += 2;
        return size;
    }
}
exports.GetBlocksRequest = GetBlocksRequest;
class GetBlocksResponse extends rpcNetworkMessage_1.RpcNetworkMessage {
    constructor(blocks, rpcId) {
        super(types_1.NetworkMessageType.GetBlocksResponse, rpcNetworkMessage_1.Direction.Response, rpcId);
        this.blocks = blocks;
    }
    serializePayload(bw) {
        bw.writeU16(this.blocks.length);
        for (const block of this.blocks) {
            serializers_1.writeBlock(bw, block);
        }
    }
    static deserializePayload(buffer, rpcId) {
        const reader = bufio_1.default.read(buffer, true);
        const blocks = [];
        const blocksLength = reader.readU16();
        for (let i = 0; i < blocksLength; i++) {
            const block = serializers_1.readBlock(reader);
            blocks.push(block);
        }
        return new GetBlocksResponse(blocks, rpcId);
    }
    getSize() {
        let size = 0;
        size += 2; // blocks length
        for (const block of this.blocks) {
            size += serializers_1.getBlockSize(block);
        }
        return size;
    }
}
exports.GetBlocksResponse = GetBlocksResponse;
//# sourceMappingURL=getBlocks.js.map