"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PooledTransactionsResponse = exports.PooledTransactionsRequest = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importDefault(require("bufio"));
const types_1 = require("../types");
const serializers_1 = require("../utils/serializers");
const rpcNetworkMessage_1 = require("./rpcNetworkMessage");
class PooledTransactionsRequest extends rpcNetworkMessage_1.RpcNetworkMessage {
    constructor(transactionHashes, rpcId) {
        super(types_1.NetworkMessageType.PooledTransactionsRequest, rpcNetworkMessage_1.Direction.Request, rpcId);
        this.transactionHashes = transactionHashes;
    }
    serializePayload(bw) {
        bw.writeVarint(this.transactionHashes.length);
        for (const hash of this.transactionHashes) {
            bw.writeHash(hash);
        }
    }
    static deserializePayload(buffer, rpcId) {
        const reader = bufio_1.default.read(buffer, true);
        const transactionHashesLength = reader.readVarint();
        const transactionHashes = [];
        for (let i = 0; i < transactionHashesLength; i++) {
            const hash = reader.readBytes(32);
            transactionHashes.push(hash);
        }
        return new PooledTransactionsRequest(transactionHashes, rpcId);
    }
    getSize() {
        let size = 0;
        size += bufio_1.default.sizeVarint(this.transactionHashes.length);
        size += this.transactionHashes.length * 32;
        return size;
    }
}
exports.PooledTransactionsRequest = PooledTransactionsRequest;
class PooledTransactionsResponse extends rpcNetworkMessage_1.RpcNetworkMessage {
    constructor(transactions, rpcId) {
        super(types_1.NetworkMessageType.PooledTransactionsResponse, rpcNetworkMessage_1.Direction.Response, rpcId);
        this.transactions = transactions;
    }
    serializePayload(bw) {
        bw.writeVarint(this.transactions.length);
        for (const transaction of this.transactions) {
            serializers_1.writeTransaction(bw, transaction);
        }
    }
    static deserializePayload(buffer, rpcId) {
        const reader = bufio_1.default.read(buffer, true);
        const transactionsLength = reader.readVarint();
        const transactions = [];
        for (let i = 0; i < transactionsLength; i++) {
            const transaction = serializers_1.readTransaction(reader);
            transactions.push(transaction);
        }
        return new PooledTransactionsResponse(transactions, rpcId);
    }
    getSize() {
        let size = 0;
        size += bufio_1.default.sizeVarint(this.transactions.length);
        for (const transaction of this.transactions) {
            size += serializers_1.getTransactionSize(transaction);
        }
        return size;
    }
}
exports.PooledTransactionsResponse = PooledTransactionsResponse;
//# sourceMappingURL=pooledTransactions.js.map