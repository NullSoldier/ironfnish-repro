"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewBlockHashesMessage = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importDefault(require("bufio"));
const types_1 = require("../types");
const networkMessage_1 = require("./networkMessage");
class NewBlockHashesMessage extends networkMessage_1.NetworkMessage {
    constructor(blockHashInfos) {
        super(types_1.NetworkMessageType.NewBlockHashes);
        this.blockHashInfos = blockHashInfos;
    }
    serializePayload(bw) {
        bw.writeU16(this.blockHashInfos.length);
        for (const blockhashInfo of this.blockHashInfos) {
            bw.writeBytes(blockhashInfo.hash);
            bw.writeU32(blockhashInfo.sequence);
        }
    }
    static deserializePayload(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const blockHashInfosLength = reader.readU16();
        const blockHashInfos = [];
        for (let i = 0; i < blockHashInfosLength; i++) {
            const hash = reader.readBytes(32);
            const sequence = reader.readU32();
            blockHashInfos.push({
                hash,
                sequence,
            });
        }
        return new NewBlockHashesMessage(blockHashInfos);
    }
    getSize() {
        let size = 2;
        const blockInfoSize = 32 + 4;
        size += this.blockHashInfos.length * blockInfoSize;
        return size;
    }
}
exports.NewBlockHashesMessage = NewBlockHashesMessage;
//# sourceMappingURL=newBlockHashes.js.map