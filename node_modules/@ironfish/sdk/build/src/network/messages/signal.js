"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalMessage = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const identity_1 = require("../identity");
const types_1 = require("../types");
const networkMessage_1 = require("./networkMessage");
/**
 * A message used to signal an rtc session between two peers.
 *
 * The referring peer will forward the message to the sourceIdentity,
 * which will need to respond with a signal that has peer and source
 * inverted.
 */
class SignalMessage extends networkMessage_1.NetworkMessage {
    constructor({ destinationIdentity, sourceIdentity, nonce, signal, }) {
        super(types_1.NetworkMessageType.Signal);
        this.destinationIdentity = destinationIdentity;
        this.sourceIdentity = sourceIdentity;
        this.nonce = nonce;
        this.signal = signal;
    }
    serializePayload(bw) {
        bw.writeBytes(Buffer.from(this.destinationIdentity, 'base64'));
        bw.writeBytes(Buffer.from(this.sourceIdentity, 'base64'));
        bw.writeBytes(Buffer.from(this.nonce, 'base64'));
        bw.writeBytes(Buffer.from(this.signal, 'base64'));
    }
    static deserializePayload(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const destinationIdentity = reader.readBytes(identity_1.identityLength).toString('base64');
        const sourceIdentity = reader.readBytes(identity_1.identityLength).toString('base64');
        const nonce = reader.readBytes(rust_nodejs_1.NONCE_LENGTH).toString('base64');
        const signal = reader.readBytes(reader.left()).toString('base64');
        return new SignalMessage({
            destinationIdentity,
            sourceIdentity,
            nonce,
            signal,
        });
    }
    getSize() {
        return (identity_1.identityLength + identity_1.identityLength + rust_nodejs_1.NONCE_LENGTH + Buffer.byteLength(this.signal, 'base64'));
    }
}
exports.SignalMessage = SignalMessage;
//# sourceMappingURL=signal.js.map