"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetBlockTransactionsResponse = exports.GetBlockTransactionsRequest = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importStar(require("bufio"));
const types_1 = require("../types");
const serializers_1 = require("../utils/serializers");
const rpcNetworkMessage_1 = require("./rpcNetworkMessage");
class GetBlockTransactionsRequest extends rpcNetworkMessage_1.RpcNetworkMessage {
    constructor(blockHash, transactionIndexes, rpcId) {
        super(types_1.NetworkMessageType.GetBlockTransactionsRequest, rpcNetworkMessage_1.Direction.Request, rpcId);
        this.blockHash = blockHash;
        this.transactionIndexes = transactionIndexes;
    }
    serializePayload(bw) {
        bw.writeHash(this.blockHash);
        bw.writeVarint(this.transactionIndexes.length);
        for (const transactionIndex of this.transactionIndexes) {
            bw.writeVarint(transactionIndex);
        }
    }
    static deserializePayload(buffer, rpcId) {
        const reader = bufio_1.default.read(buffer, true);
        const blockHash = reader.readHash();
        const transactionIndexesLength = reader.readVarint();
        const transactionIndexes = [];
        for (let i = 0; i < transactionIndexesLength; i++) {
            const transactionIndex = reader.readVarint();
            transactionIndexes.push(transactionIndex);
        }
        return new GetBlockTransactionsRequest(blockHash, transactionIndexes, rpcId);
    }
    getSize() {
        let size = 0;
        size += 32;
        size += bufio_1.sizeVarint(this.transactionIndexes.length);
        for (const transactionIndex of this.transactionIndexes) {
            size += bufio_1.sizeVarint(transactionIndex);
        }
        return size;
    }
}
exports.GetBlockTransactionsRequest = GetBlockTransactionsRequest;
class GetBlockTransactionsResponse extends rpcNetworkMessage_1.RpcNetworkMessage {
    constructor(blockHash, transactions, rpcId) {
        super(types_1.NetworkMessageType.GetBlockTransactionsResponse, rpcNetworkMessage_1.Direction.Response, rpcId);
        this.blockHash = blockHash;
        this.transactions = transactions;
    }
    serializePayload(bw) {
        bw.writeHash(this.blockHash);
        bw.writeVarint(this.transactions.length);
        for (const transaction of this.transactions) {
            serializers_1.writeTransaction(bw, transaction);
        }
    }
    static deserializePayload(buffer, rpcId) {
        const reader = bufio_1.default.read(buffer, true);
        const blockHash = reader.readHash();
        const transactionsLength = reader.readVarint();
        const transactions = [];
        for (let i = 0; i < transactionsLength; i++) {
            transactions.push(serializers_1.readTransaction(reader));
        }
        return new GetBlockTransactionsResponse(blockHash, transactions, rpcId);
    }
    getSize() {
        let size = 0;
        size += 32;
        size += bufio_1.sizeVarint(this.transactions.length);
        for (const transaction of this.transactions) {
            size += serializers_1.getTransactionSize(transaction);
        }
        return size;
    }
}
exports.GetBlockTransactionsResponse = GetBlockTransactionsResponse;
//# sourceMappingURL=getBlockTransactions.js.map