/// <reference types="node" />
import type { Features } from '../peers/peerFeatures';
import bufio from 'bufio';
import { Identity } from '../identity';
import { NetworkMessage } from './networkMessage';
interface CreateIdentifyMessageOptions {
    agent: string;
    head: Buffer;
    identity: Identity;
    name?: string;
    port: number | null;
    sequence: number;
    version: number;
    work: bigint;
    networkId: number;
    genesisBlockHash: Buffer;
    features: Features;
}
export declare class IdentifyMessage extends NetworkMessage {
    readonly agent: string;
    readonly head: Buffer;
    readonly identity: Identity;
    readonly name: string;
    readonly port: number;
    readonly sequence: number;
    readonly version: number;
    readonly work: bigint;
    readonly networkId: number;
    readonly genesisBlockHash: Buffer;
    readonly features: Features;
    constructor({ agent, head, identity, name, port, sequence, version, work, networkId, genesisBlockHash, features, }: CreateIdentifyMessageOptions);
    serializePayload(bw: bufio.StaticWriter | bufio.BufferWriter): void;
    static deserializePayload(buffer: Buffer): IdentifyMessage;
    getSize(): number;
}
export {};
//# sourceMappingURL=identify.d.ts.map