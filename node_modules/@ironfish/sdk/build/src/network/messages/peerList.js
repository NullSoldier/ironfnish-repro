"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerListMessage = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importDefault(require("bufio"));
const assert_1 = require("../../assert");
const identity_1 = require("../identity");
const types_1 = require("../types");
const networkMessage_1 = require("./networkMessage");
class PeerListMessage extends networkMessage_1.NetworkMessage {
    constructor(connectedPeers) {
        super(types_1.NetworkMessageType.PeerList);
        this.connectedPeers = connectedPeers;
    }
    serializePayload(bw) {
        bw.writeU16(this.connectedPeers.length);
        for (const peer of this.connectedPeers) {
            const { identity, name, address, port } = peer;
            assert_1.Assert.isEqual(identity.byteLength, identity_1.identityLength);
            bw.writeBytes(identity);
            let flags = 0;
            flags |= Number(!!name) << 0;
            flags |= Number(!!port) << 1;
            flags |= Number(!!address) << 2;
            bw.writeU8(flags);
            if (name) {
                bw.writeVarString(name, 'utf8');
            }
            if (port) {
                bw.writeU16(port);
            }
            if (address) {
                bw.writeVarString(address, 'utf8');
            }
        }
    }
    static deserializePayload(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const connectedPeersLength = reader.readU16();
        const connectedPeers = [];
        for (let i = 0; i < connectedPeersLength; i++) {
            const identity = reader.readBytes(identity_1.identityLength);
            const flags = reader.readU8();
            const hasName = flags & (1 << 0);
            const hasPort = flags & (1 << 1);
            const hasAddress = flags & (1 << 2);
            let name = undefined;
            if (hasName) {
                name = reader.readVarString('utf8');
            }
            let port = null;
            if (hasPort) {
                port = reader.readU16();
            }
            let address = null;
            if (hasAddress) {
                address = reader.readVarString('utf8');
            }
            connectedPeers.push({
                identity,
                name,
                address,
                port,
            });
        }
        return new PeerListMessage(connectedPeers);
    }
    getSize() {
        let size = 2;
        for (const { name, address, port } of this.connectedPeers) {
            size += identity_1.identityLength;
            size += 1;
            if (name) {
                size += bufio_1.default.sizeVarString(name, 'utf8');
            }
            if (port) {
                size += 2;
            }
            if (address) {
                size += bufio_1.default.sizeVarString(address, 'utf8');
            }
        }
        return size;
    }
}
exports.PeerListMessage = PeerListMessage;
//# sourceMappingURL=peerList.js.map