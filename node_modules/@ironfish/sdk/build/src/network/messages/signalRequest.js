"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalRequestMessage = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importDefault(require("bufio"));
const identity_1 = require("../identity");
const types_1 = require("../types");
const networkMessage_1 = require("./networkMessage");
/**
 * A message used to indicate to a peer that we want them to
 * initiate signaling with us. This is most often used when
 * we discover a peer through another peer but need to indicate
 * to them through a brokering peer to connect to us via webrtc.
 */
class SignalRequestMessage extends networkMessage_1.NetworkMessage {
    constructor({ destinationIdentity, sourceIdentity }) {
        super(types_1.NetworkMessageType.SignalRequest);
        this.destinationIdentity = destinationIdentity;
        this.sourceIdentity = sourceIdentity;
    }
    serializePayload(bw) {
        bw.writeBytes(Buffer.from(this.destinationIdentity, 'base64'));
        bw.writeBytes(Buffer.from(this.sourceIdentity, 'base64'));
    }
    static deserializePayload(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const destinationIdentity = reader.readBytes(identity_1.identityLength).toString('base64');
        const sourceIdentity = reader.readBytes(identity_1.identityLength).toString('base64');
        return new SignalRequestMessage({
            destinationIdentity,
            sourceIdentity,
        });
    }
    getSize() {
        return identity_1.identityLength * 2;
    }
}
exports.SignalRequestMessage = SignalRequestMessage;
//# sourceMappingURL=signalRequest.js.map