"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisconnectingMessage = exports.DisconnectingReason = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importDefault(require("bufio"));
const identity_1 = require("../identity");
const types_1 = require("../types");
const networkMessage_1 = require("./networkMessage");
var DisconnectingReason;
(function (DisconnectingReason) {
    DisconnectingReason[DisconnectingReason["ShuttingDown"] = 0] = "ShuttingDown";
    DisconnectingReason[DisconnectingReason["Congested"] = 1] = "Congested";
    DisconnectingReason[DisconnectingReason["BadMessages"] = 2] = "BadMessages";
})(DisconnectingReason = exports.DisconnectingReason || (exports.DisconnectingReason = {}));
class DisconnectingMessage extends networkMessage_1.NetworkMessage {
    constructor({ destinationIdentity, disconnectUntil, reason, sourceIdentity, }) {
        super(types_1.NetworkMessageType.Disconnecting);
        this.destinationIdentity = destinationIdentity;
        this.disconnectUntil = disconnectUntil;
        this.reason = reason;
        this.sourceIdentity = sourceIdentity;
    }
    serializePayload(bw) {
        // Truncates the timestamp to seconds
        bw.writeU32(Math.ceil(this.disconnectUntil / 1000));
        bw.writeU8(this.reason);
        bw.writeBytes(Buffer.from(this.sourceIdentity, 'base64'));
        if (this.destinationIdentity) {
            bw.writeBytes(Buffer.from(this.destinationIdentity, 'base64'));
        }
    }
    static deserializePayload(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const disconnectUntil = reader.readU32() * 1000;
        const reason = reader.readU8();
        const sourceIdentity = reader.readBytes(identity_1.identityLength).toString('base64');
        let destinationIdentity = null;
        if (reader.left()) {
            destinationIdentity = reader.readBytes(identity_1.identityLength).toString('base64');
        }
        return new DisconnectingMessage({
            destinationIdentity,
            disconnectUntil,
            reason,
            sourceIdentity,
        });
    }
    getSize() {
        let size = 0;
        size += 4; // disconnectUntil
        size += 1; // reason
        size += identity_1.identityLength;
        if (this.destinationIdentity) {
            size += identity_1.identityLength;
        }
        return size;
    }
}
exports.DisconnectingMessage = DisconnectingMessage;
//# sourceMappingURL=disconnecting.js.map