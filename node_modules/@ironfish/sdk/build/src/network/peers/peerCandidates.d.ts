import { Identity } from '../identity';
import { Peer as PeerListPeer } from '../messages/peerList';
import { ConnectionRetry } from './connectionRetry';
import { Peer } from './peer';
export declare type PeerCandidate = {
    name?: string;
    address: string | null;
    port: number | null;
    neighbors: Set<Identity>;
    webRtcRetry: ConnectionRetry;
    websocketRetry: ConnectionRetry;
    /**
     * UTC timestamp. If set, the peer manager should not initiate connections to the
     * Peer until after the timestamp.
     */
    peerRequestedDisconnectUntil: number | null;
    /**
     * UTC timestamp. If set, the peer manager should not accept connections from the
     * Peer until after the timestamp.
     */
    localRequestedDisconnectUntil: number | null;
};
export declare class PeerCandidates {
    private readonly map;
    get size(): number;
    addFromPeer(peer: Peer, neighbors?: Set<string>): void;
    addFromPeerList(sendingPeerIdentity: Identity, peer: PeerListPeer): void;
    shufflePeerCandidates(): string[];
    get(identity: Identity): PeerCandidate | undefined;
    has(identity: Identity): boolean;
    private set;
    clear(): void;
}
//# sourceMappingURL=peerCandidates.d.ts.map