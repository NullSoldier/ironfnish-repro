"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestTimeoutError = exports.CannotSatisfyRequestError = exports.HandshakeTimeoutError = exports.TimeoutError = exports.NetworkError = void 0;
const utils_1 = require("../../../utils");
class NetworkError extends Error {
    constructor(message, wrappedError) {
        super(utils_1.ErrorUtils.renderError(message || wrappedError || 'Unknown Network Error'));
        this.name = this.constructor.name;
        this.wrappedError = wrappedError || null;
    }
}
exports.NetworkError = NetworkError;
class TimeoutError extends NetworkError {
    constructor(timeoutMs, message) {
        super(message || `Request timed out after ${timeoutMs}ms`);
        this.timeoutMs = timeoutMs;
    }
}
exports.TimeoutError = TimeoutError;
class HandshakeTimeoutError extends TimeoutError {
    constructor(state, timeoutMs, message) {
        super(timeoutMs, message || `${state} timed out after ${timeoutMs}ms`);
        this.state = state;
    }
}
exports.HandshakeTimeoutError = HandshakeTimeoutError;
class CannotSatisfyRequestError extends Error {
    constructor(message) {
        super(message);
        this.name = this.constructor.name;
        this.name = 'CannotSatisfyRequestError';
    }
}
exports.CannotSatisfyRequestError = CannotSatisfyRequestError;
class RequestTimeoutError extends Error {
    constructor(timeoutMs, message) {
        super(message || `Request Timed Out after ${timeoutMs}ms`);
        this.name = this.constructor.name;
        this.name = 'RequestTimeoutError';
        this.timeoutMs = timeoutMs;
    }
}
exports.RequestTimeoutError = RequestTimeoutError;
//# sourceMappingURL=errors.js.map