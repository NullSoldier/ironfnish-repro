export declare class NetworkError extends Error {
    name: string;
    wrappedError: unknown | null;
    constructor(message?: string, wrappedError?: unknown);
}
export declare class TimeoutError extends NetworkError {
    readonly timeoutMs: number;
    constructor(timeoutMs: number, message?: string);
}
export declare class HandshakeTimeoutError extends TimeoutError {
    readonly state: 'CONNECTING' | 'REQUEST_SIGNALING' | 'SIGNALING' | 'WAITING_FOR_IDENTITY';
    constructor(state: HandshakeTimeoutError['state'], timeoutMs: number, message?: string);
}
export declare class CannotSatisfyRequestError extends Error {
    name: string;
    constructor(message: string | undefined);
}
export declare class RequestTimeoutError extends Error {
    name: string;
    timeoutMs: number;
    constructor(timeoutMs: number, message?: string);
}
//# sourceMappingURL=errors.d.ts.map