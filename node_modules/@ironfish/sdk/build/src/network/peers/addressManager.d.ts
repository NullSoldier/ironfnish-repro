import { HostsStore } from '../../fileStores';
import { Peer } from '../peers/peer';
import { PeerAddress } from './peerAddress';
import { PeerManager } from './peerManager';
/**
 * AddressManager stores the necessary data for connecting to new peers
 * and provides functionality for persistence of said data.
 */
export declare class AddressManager {
    hostsStore: HostsStore;
    peerManager: PeerManager;
    constructor(hostsStore: HostsStore, peerManager: PeerManager);
    get priorConnectedPeerAddresses(): ReadonlyArray<Readonly<PeerAddress>>;
    /**
     * Returns a peer address for a disconnected peer by using current peers to
     * filter out peer addresses. It attempts to find a previously-connected
     * peer address that is not part of an active connection.
     */
    getRandomDisconnectedPeerAddress(peerIdentities: string[]): PeerAddress | null;
    private filterConnectedIdentities;
    /**
     * Removes address associated with a peer from address stores
     */
    removePeerAddress(peer: Peer): void;
    /**
     * Persist all currently connected peers to disk
     */
    save(): Promise<void>;
}
//# sourceMappingURL=addressManager.d.ts.map