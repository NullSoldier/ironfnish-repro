"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionRetry = void 0;
const seconds = 1000;
const minutes = 60 * seconds;
const retryIntervals = [
    7 * seconds,
    15 * seconds,
    30 * seconds,
    1 * minutes,
    3 * minutes,
    5 * minutes,
];
class ConnectionRetry {
    constructor(shouldNeverExpire = false) {
        /**
         * Number of consecutive connection failures.
         */
        this.failedRetries = 0;
        /**
         * Timestamp representing the next time to allow a connection to be initiated.
         */
        this.disconnectUntil = 0;
        /**
         * If true, a failed connection will not cause ConnectionRetry to stop retrying.
         */
        this.shouldNeverExpire = false;
        this.shouldNeverExpire = shouldNeverExpire;
    }
    /**
     * Call this if new connection attempts should never be made.
     */
    neverRetryConnecting() {
        this.disconnectUntil = Infinity;
    }
    /**
     * True if new connection attempts will never be made.
     */
    get willNeverRetryConnecting() {
        return this.disconnectUntil === Infinity;
    }
    /**
     * True if a new connection can be initiated.
     */
    get canConnect() {
        return Date.now() > this.disconnectUntil;
    }
    /**
     * Call this when a successful connection is made to the peer.
     * If neverRetryConnecting is set, clears it.
     */
    successfulConnection() {
        this.failedRetries = 0;
        this.disconnectUntil = 0;
    }
    /**
     * Call this when a connection to a peer fails.
     * @param now The current time
     */
    failedConnection(now = Date.now()) {
        let disconnectUntil = Infinity;
        if (this.failedRetries < retryIntervals.length) {
            disconnectUntil = now + retryIntervals[this.failedRetries];
        }
        else if (this.shouldNeverExpire) {
            disconnectUntil = now + retryIntervals[retryIntervals.length - 1];
        }
        this.disconnectUntil = disconnectUntil;
        this.failedRetries++;
    }
}
exports.ConnectionRetry = ConnectionRetry;
//# sourceMappingURL=connectionRetry.js.map