"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EwmAverage = void 0;
const assert_1 = require("../assert");
/**
 * Utility to compute the exponential weighted moving average
 *
 * inspired by https://github.com/shaka-project/shaka-player/blob/eaadb52627f0a0347390b201866585cce91fe9d0/lib/abr/ewma.js
 */
class EwmAverage {
    /**
     * halflife is the time decay that holds half of the estimate value
     */
    constructor(halflife) {
        /**
         * Current average
         */
        this.average = 0;
        // larger values of alpha expire historical data more slowly
        this._alpha = 0;
        this._estimate = 0;
        this._totalWeight = 0;
        assert_1.Assert.isGreaterThan(halflife, 0);
        this._alpha = Math.exp(Math.log(0.5) / halflife);
        this.reset();
    }
    /**
     * Add a sample {value}, {weight}
     * weight = time delta
     */
    add(value, weight) {
        const adjAlpha = Math.pow(this._alpha, weight);
        const newEstimate = value * (1 - adjAlpha) + adjAlpha * this._estimate;
        if (!isNaN(newEstimate)) {
            this._estimate = newEstimate;
            this._totalWeight += weight;
        }
        // compute average
        const zeroFactor = 1 - Math.pow(this._alpha, this._totalWeight);
        this.average = this._estimate / zeroFactor;
    }
    /**
     * Resets the rolling average (equivalent to 0 samples taken so far)
     */
    reset() {
        this._estimate = 0;
        this._totalWeight = 0;
    }
}
exports.EwmAverage = EwmAverage;
//# sourceMappingURL=ewmAverage.js.map