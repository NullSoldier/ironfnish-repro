import { RollingAverage } from './rollingAverage';
/**
 * A metric type useful for recording metered things like
 *  * blocks per second
 *  * bytes per second
 *
 * This metric will take a sample of how many units were
 * completd each tick cycle and record that in various
 * rolling averages and exponentially weighted moving averages
 *
 * */
export declare class Meter {
    private _started;
    private _rate1s;
    private _rate5s;
    private _rate1m;
    private _rate5m;
    _average: RollingAverage;
    private _rollingRate1s;
    private _rollingRate5s;
    private _rollingRate1m;
    private _rollingRate5m;
    private _count;
    private _interval;
    private _intervalMs;
    private _intervalLastMs;
    constructor(options?: {
        maxRollingAverageSamples?: number;
    });
    get rate1s(): number;
    get rate5s(): number;
    get rate1m(): number;
    get rate5m(): number;
    get avg(): number;
    get rollingRate1s(): number;
    get rollingRate5s(): number;
    get rollingRate1m(): number;
    get rollingRate5m(): number;
    add(count: number): void;
    start(): void;
    stop(): void;
    reset(): void;
    private update;
}
//# sourceMappingURL=meter.d.ts.map