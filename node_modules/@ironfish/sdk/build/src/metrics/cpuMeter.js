"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CPUMeter = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const os_1 = __importDefault(require("os"));
const rollingAverage_1 = require("./rollingAverage");
/**
 * Calculates an exponentially weighted moving average and rolling average
 * for CPU usage percentage. This keeps track of the % of overall OS CPU the
 * current process is using. Overall OS CPU is calculated with the sum of total CPU time
 * across ALL cores of the machine
 */
class CPUMeter {
    constructor(refreshInterval) {
        this._current = 0;
        this._started = false;
        this._interval = null;
        this._lastReading = null;
        this._intervalMs = refreshInterval;
        this._average = new rollingAverage_1.RollingAverage(60);
    }
    get current() {
        return this._current;
    }
    get rollingAverage() {
        return this._average.average;
    }
    start() {
        if (this._started) {
            return;
        }
        this._started = true;
        this._interval = setInterval(() => this.recordCPUDataPoint(), this._intervalMs);
    }
    stop() {
        if (!this._started) {
            return;
        }
        this._started = false;
        this._lastReading = null;
        if (this._interval) {
            clearInterval(this._interval);
        }
    }
    reset() {
        this._average.reset();
        this._lastReading = null;
    }
    recordCPUDataPoint() {
        const now = process.hrtime();
        const osCpu = os_1.default.cpus();
        const processCpu = process.cpuUsage();
        const cpuCores = os_1.default.cpus().length;
        if (this._lastReading === null) {
            this._lastReading = { time: now, osCpu, processCpu };
            return;
        }
        const elapsedCpuTime = this.totalCpuTime(osCpu) - this.totalCpuTime(this._lastReading.osCpu);
        const elapsedProcessUserTime = processCpu.user - this._lastReading.processCpu.user;
        const elapsedProcessSysTime = processCpu.system - this._lastReading.processCpu.system;
        // process time is in nanoseconds, os time is in milliseconds
        const percProcessCpu = ((elapsedProcessUserTime + elapsedProcessSysTime) / 1000 / elapsedCpuTime) *
            100 *
            cpuCores;
        this._average.add(percProcessCpu);
        this._current = percProcessCpu;
        this._lastReading = { time: now, osCpu, processCpu };
    }
    totalCpuTime(measure) {
        let total = 0;
        for (const cpuInfo of measure) {
            total +=
                cpuInfo.times.idle +
                    cpuInfo.times.irq +
                    cpuInfo.times.nice +
                    cpuInfo.times.sys +
                    cpuInfo.times.user;
        }
        return total;
    }
}
exports.CPUMeter = CPUMeter;
//# sourceMappingURL=cpuMeter.js.map