import { Logger } from '../logger';
import { Identity } from '../network';
import { NetworkMessageType } from '../network/types';
import { CPUMeter } from './cpuMeter';
import { Gauge } from './gauge';
import { Meter } from './meter';
export declare class MetricsMonitor {
    private _started;
    private _meters;
    private readonly logger;
    readonly mining_newEmptyBlockTemplate: Meter;
    readonly mining_newBlockTemplate: Meter;
    readonly mining_newBlockTransactions: Meter;
    readonly chain_newBlock: Meter;
    readonly chain_databaseSize: Gauge;
    readonly p2p_InboundTraffic: Meter;
    readonly p2p_InboundTraffic_WS: Meter;
    readonly p2p_InboundTraffic_WebRTC: Meter;
    readonly p2p_OutboundTraffic: Meter;
    readonly p2p_OutboundTraffic_WS: Meter;
    readonly p2p_OutboundTraffic_WebRTC: Meter;
    readonly p2p_InboundTrafficByMessage: Map<NetworkMessageType, Meter>;
    readonly p2p_OutboundTrafficByMessage: Map<NetworkMessageType, Meter>;
    readonly p2p_RpcSuccessRateByMessage: Map<NetworkMessageType, Meter>;
    readonly p2p_RpcResponseTimeMsByMessage: Map<NetworkMessageType, Meter>;
    readonly p2p_PeersCount: Gauge;
    p2p_OutboundMessagesByPeer: Map<Identity, Meter>;
    readonly heapTotal: Gauge;
    readonly heapUsed: Gauge;
    readonly rss: Gauge;
    readonly memFree: Gauge;
    readonly memTotal: number;
    readonly heapMax: number;
    readonly memPoolSize: Gauge;
    readonly memPoolSizeBytes: Gauge;
    readonly memPoolMaxSizeBytes: Gauge;
    readonly memPoolSaturation: Gauge;
    readonly memPoolEvictions: Gauge;
    readonly memPool_RecentlyEvictedCache_Size: Gauge;
    readonly memPool_RecentlyEvictedCache_MaxSize: Gauge;
    readonly memPool_RecentlyEvictedCache_Saturation: Gauge;
    readonly cpuCores: number;
    private memoryInterval;
    private readonly memoryRefreshPeriodMs;
    readonly cpuMeter: CPUMeter;
    constructor({ logger }: {
        logger?: Logger;
    });
    get started(): boolean;
    start(): void;
    stop(): void;
    addMeter(options?: {
        maxRollingAverageSamples?: number;
    }): Meter;
    private refreshMemory;
}
//# sourceMappingURL=metricsMonitor.d.ts.map