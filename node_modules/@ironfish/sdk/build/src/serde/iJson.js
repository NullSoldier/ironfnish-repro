"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IJSON = void 0;
const buffer_json_1 = __importDefault(require("buffer-json"));
/**
 * IJSON, for Iron Fish JSON. Supports parsing/stringifying Buffers and BigInts.
 */
exports.IJSON = {
    stringify(value, space) {
        return JSON.stringify(value, (key, value) => typeof value === 'bigint'
            ? `${value.toString()}n`
            : buffer_json_1.default.replacer(key, value), space);
    },
    parse(text) {
        return JSON.parse(text, (key, value) => {
            if (typeof value === 'string' && value.endsWith('n') && value.length > 1) {
                const slice = value.slice(0, value.length - 1);
                const sliceWithoutMinus = slice.startsWith('-') ? slice.slice(1) : slice;
                // If every character except the last is a number, parse as a bigint
                if (sliceWithoutMinus.split('').every((char) => !isNaN(Number(char)))) {
                    return BigInt(slice);
                }
            }
            return buffer_json_1.default.reviver(key, value);
        });
    },
};
//# sourceMappingURL=iJson.js.map