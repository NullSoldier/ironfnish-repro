"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bufio_1 = __importDefault(require("bufio"));
const target_1 = require("../primitives/target");
class PartialBlockHeaderSerde {
    static serialize(header) {
        const bw = bufio_1.default.write(172);
        bw.writeU32(header.sequence);
        bw.writeHash(header.previousBlockHash);
        bw.writeHash(header.noteCommitment);
        bw.writeHash(header.transactionCommitment);
        bw.writeBigU256BE(header.target.asBigInt());
        bw.writeU64(header.timestamp.getTime());
        bw.writeBytes(header.graffiti);
        return bw.render();
    }
    static deserialize(data) {
        const br = bufio_1.default.read(data);
        const sequence = br.readU32();
        const previousBlockHash = br.readHash();
        const noteCommitment = br.readHash();
        const transactionCommitment = br.readHash();
        const target = br.readBytes(32);
        const timestamp = br.readU64();
        const graffiti = br.readBytes(32);
        return {
            sequence: sequence,
            previousBlockHash: previousBlockHash,
            target: new target_1.Target(target),
            timestamp: new Date(timestamp),
            graffiti: graffiti,
            noteCommitment: noteCommitment,
            transactionCommitment,
        };
    }
    static equals() {
        throw new Error('You should never use this');
    }
}
exports.default = PartialBlockHeaderSerde;
//# sourceMappingURL=PartialHeaderSerde.js.map