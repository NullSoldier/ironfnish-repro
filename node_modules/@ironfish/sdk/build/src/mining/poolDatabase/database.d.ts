import { Database } from 'sqlite';
import { Config } from '../../fileStores/config';
import { Logger } from '../../logger';
export declare class PoolDatabase {
    private readonly db;
    private readonly migrations;
    constructor(options: {
        db: Database;
        config: Config;
        logger: Logger;
    });
    static init(options: {
        config: Config;
        logger: Logger;
        dbPath?: string;
    }): Promise<PoolDatabase>;
    start(): Promise<void>;
    stop(): Promise<void>;
    newShare(publicAddress: string): Promise<void>;
    shareCountSince(timestamp: number, publicAddress?: string): Promise<number>;
    getCurrentPayoutPeriod(): Promise<DatabasePayoutPeriod | undefined>;
    rolloverPayoutPeriod(timestamp: number): Promise<void>;
    newBlock(sequence: number, hash: string, reward: string): Promise<number | undefined>;
    unconfirmedBlocks(): Promise<DatabaseBlock[]>;
    updateBlockStatus(blockId: number, main: boolean, confirmed: boolean): Promise<void>;
    newTransaction(hash: string, payoutPeriodId: number): Promise<number | undefined>;
    unconfirmedTransactions(): Promise<DatabasePayoutTransaction[]>;
    updateTransactionStatus(transactionId: number, confirmed: boolean, expired: boolean): Promise<void>;
    payoutAddresses(payoutPeriodId: number): Promise<{
        publicAddress: string;
        shareCount: number;
    }[]>;
    markSharesPaid(payoutPeriodId: number, payoutTransactionId: number, publicAddresses: string[]): Promise<void>;
    markSharesUnpaid(transactionId: number): Promise<void>;
    deleteUnpayableShares(payoutPeriodId: number): Promise<void>;
    earliestOutstandingPayoutPeriod(): Promise<DatabasePayoutPeriod | undefined>;
    payoutPeriodShareCount(payoutPeriodId: number): Promise<number>;
    pendingShareCount(publicAddress?: string): Promise<number>;
    getPayoutReward(payoutPeriodId: number): Promise<bigint>;
    payoutPeriodBlocksConfirmed(payoutPeriodId: number): Promise<boolean>;
}
export declare type DatabasePayoutPeriod = {
    id: number;
    createdAt: string;
    start: number;
    end: number | null;
};
export declare type DatabaseBlock = {
    id: number;
    createdAt: Date;
    blockSequence: number;
    blockHash: string;
    minerReward: bigint;
    confirmed: boolean;
    main: boolean;
    payoutPeriodId: number;
};
export interface RawDatabaseBlock {
    id: number;
    createdAt: string;
    blockSequence: number;
    blockHash: string;
    minerReward: string;
    confirmed: number;
    main: number;
    payoutPeriodId: number;
}
export declare type DatabasePayoutTransaction = {
    id: number;
    createdAt: Date;
    transactionHash: string;
    confirmed: boolean;
    expired: boolean;
    payoutPeriodId: number;
};
export interface RawDatabasePayoutTransaction {
    id: number;
    createdAt: string;
    transactionHash: string;
    confirmed: number;
    expired: number;
    payoutPeriodId: number;
}
//# sourceMappingURL=database.d.ts.map