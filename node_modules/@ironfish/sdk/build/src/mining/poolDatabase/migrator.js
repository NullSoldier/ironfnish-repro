"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migrator = void 0;
/* eslint-disable no-console */
const consola_1 = require("consola");
const migrations_1 = require("./migrations");
class Migrator {
    constructor(options) {
        this.db = options.db;
        this.logger = options.logger;
        this.migrations = migrations_1.MIGRATIONS.map((m) => new m().init()).sort((a, b) => a.id - b.id);
    }
    async getCurrentId() {
        const pragma = await this.db.get('PRAGMA user_version;');
        return pragma?.user_version ?? 0;
    }
    getLatest() {
        return this.migrations[this.migrations.length - 1] ?? null;
    }
    async migrated() {
        const latest = this.getLatest();
        if (latest === null) {
            return true;
        }
        const current = await this.getCurrentId();
        return latest.id <= current;
    }
    async migrate() {
        if (await this.migrated()) {
            return;
        }
        const current = await this.getCurrentId();
        const unapplied = this.migrations.filter((a) => a.id > current);
        try {
            await this.db.run('begin transaction');
            this.logger.info('Running migrations:');
            for (const migration of unapplied) {
                this.write(`  Applying ${migration.name}...`);
                try {
                    await migration.forward(this.db);
                    await this.db.run(`PRAGMA user_version = ${migration.id};`);
                }
                catch (e) {
                    this.write(` ERROR\n`);
                    console.error(e);
                    throw e;
                }
                this.write(` OK\n`);
            }
            await this.db.run('COMMIT;');
            this.logger.info(`Successfully ran ${unapplied.length} migrations`);
        }
        catch (e) {
            await this.db.run('ROLLBACK;').catch(() => {
                /* do nothing */
            });
            throw e;
        }
    }
    write(output) {
        if (this.logger.level >= consola_1.LogLevel.Info) {
            process.stdout.write(output);
        }
    }
}
exports.Migrator = Migrator;
//# sourceMappingURL=migrator.js.map