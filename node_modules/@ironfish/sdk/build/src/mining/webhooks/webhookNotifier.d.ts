import { AxiosInstance } from 'axios';
import { Logger } from '../../logger';
export declare abstract class WebhookNotifier {
    protected readonly webhook: string | null;
    protected readonly client: AxiosInstance | null;
    protected readonly logger: Logger;
    protected readonly explorerBlocksUrl: string | null;
    protected readonly explorerTransactionsUrl: string | null;
    constructor(options: {
        webhook: string | null;
        logger?: Logger;
        explorerBlocksUrl?: string | null;
        explorerTransactionsUrl?: string | null;
    });
    abstract sendText(text: string): void;
    poolConnected(): void;
    poolDisconnected(): void;
    poolSubmittedBlock(hashedHeaderHex: string, hashRate: number, clients: number): void;
    poolPayoutSuccess(payoutPeriodId: number, transactionHashHex: string, outputs: {
        publicAddress: string;
        amount: string;
        memo: string;
    }[], shareCount: number): void;
    poolPayoutError(error: unknown): void;
    poolPayoutStarted(payoutPeriodId: number, outputs: {
        publicAddress: string;
        amount: string;
        memo: string;
    }[], shareCount: number): void;
    poolStatus(status: {
        name: string;
        hashRate: number;
        miners: number;
        sharesPending: number;
        bans: number;
        clients: number;
    }): void;
    private renderHashHex;
}
//# sourceMappingURL=webhookNotifier.d.ts.map