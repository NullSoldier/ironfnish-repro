/// <reference types="node" />
import net from 'net';
import { Config } from '../../fileStores/config';
import { Logger } from '../../logger';
import { SerializedBlockTemplate } from '../../serde/BlockTemplateSerde';
import { MiningPool } from '../pool';
import { IStratumAdapter } from './adapters';
import { MiningDisconnectMessage, MiningNotifyMessage, MiningSetTargetMessage, MiningStatusMessage, MiningSubscribedMessage } from './messages';
import { StratumPeers } from './stratumPeers';
import { StratumServerClient } from './stratumServerClient';
export declare class StratumServer {
    readonly pool: MiningPool;
    readonly config: Config;
    readonly logger: Logger;
    readonly peers: StratumPeers;
    readonly adapters: IStratumAdapter[];
    clients: Map<number, StratumServerClient>;
    nextMinerId: number;
    nextMessageId: number;
    subscribed: number;
    currentWork: Buffer | null;
    currentMiningRequestId: number | null;
    readonly version: number;
    readonly versionMin: number;
    private _isRunning;
    private _startPromise;
    constructor(options: {
        pool: MiningPool;
        config: Config;
        logger: Logger;
        banning?: boolean;
    });
    get isRunning(): boolean;
    /** Starts the Stratum server and tells any attached adapters to start serving requests */
    start(): Promise<void>;
    /** Stops the Stratum server and tells any attached adapters to stop serving requests */
    stop(): Promise<void>;
    /** Adds an adapter to the Stratum server and starts it if the server has already been started */
    mount(adapter: IStratumAdapter): void;
    newWork(miningRequestId: number, block: SerializedBlockTemplate): void;
    waitForWork(): void;
    hasWork(): boolean;
    onConnection(socket: net.Socket): void;
    private onDisconnect;
    private onData;
    private onError;
    private getNotifyMessage;
    private getSetTargetMessage;
    private broadcast;
    send(socket: net.Socket, method: 'mining.notify', body: MiningNotifyMessage): void;
    send(socket: net.Socket, method: 'mining.disconnect', body: MiningDisconnectMessage): void;
    send(socket: net.Socket, method: 'mining.set_target', body: MiningSetTargetMessage): void;
    send(socket: net.Socket, method: 'mining.subscribed', body: MiningSubscribedMessage): void;
    send(socket: net.Socket, method: 'mining.wait_for_work'): void;
    send(socket: net.Socket, method: 'mining.status', body: MiningStatusMessage): void;
}
//# sourceMappingURL=stratumServer.d.ts.map