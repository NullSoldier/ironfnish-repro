/// <reference types="node" />
import { Event } from '../../../event';
import { Logger } from '../../../logger';
import { MiningNotifyMessage, MiningSetTargetMessage, MiningStatusMessage, MiningSubscribedMessage } from '../messages';
export declare abstract class StratumClient {
    readonly logger: Logger;
    readonly version: number;
    private started;
    private id;
    private connected;
    private connectWarned;
    private connectTimeout;
    private nextMessageId;
    private readonly messageBuffer;
    private disconnectReason;
    private disconnectUntil;
    private disconnectVersion;
    private disconnectMessage;
    readonly onConnected: Event<[]>;
    readonly onSubscribed: Event<[MiningSubscribedMessage]>;
    readonly onSetTarget: Event<[MiningSetTargetMessage]>;
    readonly onNotify: Event<[MiningNotifyMessage]>;
    readonly onWaitForWork: Event<[undefined]>;
    readonly onStatus: Event<[MiningStatusMessage]>;
    constructor(options: {
        logger: Logger;
    });
    protected abstract connect(): Promise<void>;
    protected abstract writeData(data: string): void;
    protected abstract close(): Promise<void>;
    start(): void;
    private startConnecting;
    stop(): void;
    subscribe(publicAddress: string, name?: string): void;
    submit(miningRequestId: number, randomness: string): void;
    getStatus(publicAddress?: string): void;
    isConnected(): boolean;
    private send;
    protected onConnect(): void;
    protected onDisconnect: () => void;
    protected onError: (error: unknown) => void;
    protected onData(data: Buffer): Promise<void>;
}
//# sourceMappingURL=client.d.ts.map