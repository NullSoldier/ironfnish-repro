/// <reference types="node" />
import LeastRecentlyUsed from 'blru';
import tls from 'tls';
import { Config } from '../fileStores/config';
import { Logger } from '../logger';
import { RpcSocketClient } from '../rpc/clients';
import { SerializedBlockTemplate } from '../serde/BlockTemplateSerde';
import { MiningPoolShares } from './poolShares';
import { MiningStatusMessage } from './stratum/messages';
import { StratumServer } from './stratum/stratumServer';
import { StratumServerClient } from './stratum/stratumServerClient';
import { WebhookNotifier } from './webhooks';
export declare class MiningPool {
    readonly stratum: StratumServer;
    readonly rpc: RpcSocketClient;
    readonly logger: Logger;
    readonly shares: MiningPoolShares;
    readonly config: Config;
    readonly webhooks: WebhookNotifier[];
    private started;
    private stopPromise;
    private stopResolve;
    private connectWarned;
    private connectTimeout;
    private eventLoopTimeout;
    name: string;
    nextMiningRequestId: number;
    miningRequestBlocks: LeastRecentlyUsed<number, SerializedBlockTemplate>;
    recentSubmissions: Map<number, string[]>;
    difficulty: bigint;
    target: Buffer;
    currentHeadTimestamp: number | null;
    currentHeadDifficulty: bigint | null;
    private recalculateTargetInterval;
    private notifyStatusInterval;
    private constructor();
    static init(options: {
        rpc: RpcSocketClient;
        config: Config;
        logger: Logger;
        webhooks?: WebhookNotifier[];
        enablePayouts?: boolean;
        host: string;
        port: number;
        banning?: boolean;
        tls?: boolean;
        tlsOptions?: tls.TlsOptions;
    }): Promise<MiningPool>;
    start(): Promise<void>;
    stop(): Promise<void>;
    private eventLoop;
    waitForStop(): Promise<void>;
    getTarget(): string;
    submitWork(client: StratumServerClient, miningRequestId: number, randomness: string): Promise<void>;
    private startConnectingRpc;
    private onDisconnectRpc;
    private processNewBlocks;
    private recalculateTarget;
    private distributeNewBlock;
    private restartCalculateTargetInterval;
    private isDuplicateSubmission;
    private addWorkSubmission;
    estimateHashRate(publicAddress?: string): Promise<number>;
    notifyStatus(): Promise<void>;
    getStatus(publicAddress?: string): Promise<MiningStatusMessage>;
    updateUnconfirmedBlocks(): Promise<void>;
    updateUnconfirmedPayoutTransactions(): Promise<void>;
}
//# sourceMappingURL=pool.d.ts.map