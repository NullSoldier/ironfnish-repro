import { Config } from '../fileStores/config';
import { Logger } from '../logger';
import { RpcClient } from '../rpc/clients/client';
import { DatabaseBlock, DatabasePayoutTransaction } from './poolDatabase/database';
import { WebhookNotifier } from './webhooks';
export declare class MiningPoolShares {
    readonly rpc: RpcClient;
    readonly config: Config;
    readonly logger: Logger;
    readonly webhooks: WebhookNotifier[];
    private readonly db;
    private enablePayouts;
    private poolName;
    private recentShareCutoff;
    private accountName;
    private constructor();
    static init(options: {
        rpc: RpcClient;
        config: Config;
        logger: Logger;
        webhooks?: WebhookNotifier[];
        enablePayouts?: boolean;
        dbPath?: string;
    }): Promise<MiningPoolShares>;
    start(): Promise<void>;
    stop(): Promise<void>;
    submitShare(publicAddress: string): Promise<void>;
    shareRate(publicAddress?: string): Promise<number>;
    sharesPendingPayout(publicAddress?: string): Promise<number>;
    rolloverPayoutPeriod(): Promise<void>;
    submitBlock(sequence: number, hash: string, reward: bigint): Promise<void>;
    unconfirmedBlocks(): Promise<DatabaseBlock[]>;
    updateBlockStatus(block: DatabaseBlock, main: boolean, confirmed: boolean): Promise<void>;
    unconfirmedPayoutTransactions(): Promise<DatabasePayoutTransaction[]>;
    updatePayoutTransactionStatus(transaction: DatabasePayoutTransaction, confirmed: boolean, expired: boolean): Promise<void>;
    createNewPayout(): Promise<void>;
    hasAvailableBalance(amount: bigint): Promise<boolean>;
    sendTransaction(outputs: {
        publicAddress: string;
        amount: string;
        memo: string;
        assetId: string;
    }[]): Promise<string>;
    assertAccountExists(): Promise<void>;
}
//# sourceMappingURL=poolShares.d.ts.map