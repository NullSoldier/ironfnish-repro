"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcClient = void 0;
const routes_1 = require("../routes");
class RpcClient {
    constructor(logger) {
        this.node = {
            getStatus: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.node}/getStatus`, params).waitForEnd();
            },
            getStatusStream: () => {
                return this.request(`${routes_1.ApiNamespace.node}/getStatus`, {
                    stream: true,
                });
            },
            stopNode: () => {
                return this.request(`${routes_1.ApiNamespace.node}/stopNode`).waitForEnd();
            },
            getLogStream: () => {
                return this.request(`${routes_1.ApiNamespace.node}/getLogStream`);
            },
        };
        this.wallet = {
            getAccounts: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getAccounts`, params).waitForEnd();
            },
            getDefaultAccount: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getDefaultAccount`, params).waitForEnd();
            },
            createAccount: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/create`, params).waitForEnd();
            },
            useAccount: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/use`, params).waitForEnd();
            },
            renameAccount: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/rename`, params).waitForEnd();
            },
            removeAccount: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/remove`, params).waitForEnd();
            },
            getAccountBalances: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getBalances`, params).waitForEnd();
            },
            getAccountBalance: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getBalance`, params).waitForEnd();
            },
            rescanAccountStream: (params = {}) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/rescanAccount`, params);
            },
            exportAccount: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/exportAccount`, params).waitForEnd();
            },
            importAccount: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/importAccount`, params).waitForEnd();
            },
            getAccountPublicKey: (params = {}) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getPublicKey`, params).waitForEnd();
            },
            getAccountNotesStream: (params = {}) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getAccountNotesStream`, params);
            },
            getAccountsStatus: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getAccountsStatus`, params).waitForEnd();
            },
            getAccountTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getAccountTransaction`, params).waitForEnd();
            },
            getAccountTransactionsStream: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getAccountTransactions`, params);
            },
            getNotes: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getNotes`, params).waitForEnd();
            },
            getAsset: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getAsset`, params).waitForEnd();
            },
            mintAsset: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/mintAsset`, params).waitForEnd();
            },
            burnAsset: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/burnAsset`, params).waitForEnd();
            },
            sendTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/sendTransaction`, params).waitForEnd();
            },
            getAssets: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getAssets`, params);
            },
            postTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/postTransaction`, params).waitForEnd();
            },
            addTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/addTransaction`, params).waitForEnd();
            },
            createTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/createTransaction`, params).waitForEnd();
            },
            estimateFeeRates: (params) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/estimateFeeRates`, params).waitForEnd();
            },
            getNodeStatus: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getNodeStatus`, params).waitForEnd();
            },
            getNodeStatusStream: () => {
                return this.request(`${routes_1.ApiNamespace.wallet}/getNodeStatus`, {
                    stream: true,
                });
            },
        };
        this.mempool = {
            acceptTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.mempool}/acceptTransaction`, params).waitForEnd();
            },
            getMempoolTransactionsStream: (params) => {
                return this.request(`${routes_1.ApiNamespace.mempool}/getTransactions`, { ...params });
            },
            getMempoolStatus: () => {
                return this.request(`${routes_1.ApiNamespace.mempool}/getStatus`).waitForEnd();
            },
            getMempoolStatusStream: () => {
                return this.request(`${routes_1.ApiNamespace.mempool}/getStatus`, {
                    stream: true,
                });
            },
        };
        this.peer = {
            addPeer: (params) => {
                return this.request(`${routes_1.ApiNamespace.peer}/addPeer`, params).waitForEnd();
            },
            getBannedPeers: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getBannedPeers`, params).waitForEnd();
            },
            getBannedPeersStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getBannedPeers`, {
                    ...params,
                    stream: true,
                });
            },
            getPeers: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getPeers`, params).waitForEnd();
            },
            getPeersStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getPeers`, {
                    ...params,
                    stream: true,
                });
            },
            getPeer: (params) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getPeer`, params).waitForEnd();
            },
            getPeerStream: (params) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getPeer`, {
                    ...params,
                    stream: true,
                });
            },
            getPeerMessages: (params) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getPeerMessages`, params).waitForEnd();
            },
            getPeerMessagesStream: (params) => {
                return this.request(`${routes_1.ApiNamespace.peer}/getPeerMessages`, {
                    ...params,
                    stream: true,
                });
            },
        };
        this.worker = {
            getWorkersStatus: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.worker}/getStatus`, params).waitForEnd();
            },
            getWorkersStatusStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.worker}/getStatus`, {
                    ...params,
                    stream: true,
                });
            },
        };
        this.rpc = {
            getRpcStatus: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.rpc}/getStatus`, params).waitForEnd();
            },
            getRpcStatusStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.rpc}/getStatus`, {
                    ...params,
                    stream: true,
                });
            },
        };
        this.event = {
            onGossipStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.event}/onGossip`, params);
            },
            onReorganizeChainStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.event}/onReorganizeChain`, params);
            },
            onTransactionGossipStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.event}/onTransactionGossip`, params);
            },
        };
        this.miner = {
            blockTemplateStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.miner}/blockTemplateStream`, params);
            },
            submitBlock: (params) => {
                return this.request(`${routes_1.ApiNamespace.miner}/submitBlock`, params).waitForEnd();
            },
        };
        this.faucet = {
            getFunds: (params) => {
                return this.request(`${routes_1.ApiNamespace.faucet}/getFunds`, params).waitForEnd();
            },
        };
        this.chain = {
            estimateFeeRates: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/estimateFeeRates`, params).waitForEnd();
            },
            estimateFeeRate: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/estimateFeeRate`, params).waitForEnd();
            },
            getChainInfo: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getChainInfo`, params).waitForEnd();
            },
            exportChainStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.chain}/exportChainStream`, params);
            },
            followChainStream: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.chain}/followChainStream`, params);
            },
            getBlock: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getBlock`, params).waitForEnd();
            },
            getDifficulty: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getDifficulty`, params).waitForEnd();
            },
            getNoteWitness: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getNoteWitness`, params).waitForEnd();
            },
            getNetworkHashPower: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getNetworkHashPower`, params).waitForEnd();
            },
            showChain: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.chain}/showChain`, params).waitForEnd();
            },
            getTransactionStream: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getTransactionStream`, params);
            },
            getTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getTransaction`, params);
            },
            getConsensusParameters: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getConsensusParameters`, params).waitForEnd();
            },
            getAsset: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getAsset`, params).waitForEnd();
            },
            getNetworkInfo: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/getNetworkInfo`, params).waitForEnd();
            },
            isValidPublicAddress: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/isValidPublicAddress`, params).waitForEnd();
            },
            broadcastTransaction: (params) => {
                return this.request(`${routes_1.ApiNamespace.chain}/broadcastTransaction`, params).waitForEnd();
            },
        };
        this.config = {
            getConfig: (params = undefined) => {
                return this.request(`${routes_1.ApiNamespace.config}/getConfig`, params).waitForEnd();
            },
            setConfig: (params) => {
                return this.request(`${routes_1.ApiNamespace.config}/setConfig`, params).waitForEnd();
            },
            unsetConfig: (params) => {
                return this.request(`${routes_1.ApiNamespace.config}/unsetConfig`, params).waitForEnd();
            },
            uploadConfig: (params) => {
                return this.request(`${routes_1.ApiNamespace.config}/uploadConfig`, params).waitForEnd();
            },
        };
        this.logger = logger;
    }
}
exports.RpcClient = RpcClient;
//# sourceMappingURL=client.js.map