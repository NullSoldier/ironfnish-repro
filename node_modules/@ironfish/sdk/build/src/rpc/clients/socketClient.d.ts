/// <reference types="node" />
import net from 'net';
import { Event } from '../../event';
import { Logger } from '../../logger';
import { MessageBuffer } from '../messageBuffer';
import { RpcResponse } from '../response';
import { RpcClient } from './client';
export declare type RpcSocketClientConnectionInfo = {
    path?: string;
    host?: string;
    port?: number;
};
export declare abstract class RpcSocketClient extends RpcClient {
    readonly onClose: Event<[]>;
    readonly connectTo: RpcSocketClientConnectionInfo;
    readonly authToken: string | null;
    readonly messageBuffer: MessageBuffer;
    client: net.Socket | null;
    isConnected: boolean;
    constructor(connectTo: RpcSocketClientConnectionInfo, logger?: Logger, authToken?: string);
    private timeoutMs;
    private messageIds;
    private pending;
    connect(): Promise<void>;
    close(): void;
    tryConnect(): Promise<boolean>;
    request<TEnd = unknown, TStream = unknown>(route: string, data?: unknown, options?: {
        timeoutMs?: number | null;
    }): RpcResponse<TEnd, TStream>;
    protected send(messageId: number, route: string, data: unknown, authToken: string | null): void;
    protected handleStream: (data: unknown) => Promise<void>;
    protected handleClose: () => void;
    protected handleEnd: (data: unknown) => Promise<void>;
    protected onConnect(): void;
    protected onClientData: (data: Buffer) => void;
    protected onData: (data: Buffer) => Promise<void>;
    protected onClientClose: () => void;
    protected onMessage: (data: unknown) => void;
    protected onStream: (data: unknown) => void;
    protected onError(error: unknown): void;
    describe(): string;
}
//# sourceMappingURL=socketClient.d.ts.map