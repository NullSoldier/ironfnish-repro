import { Logger } from '../../logger';
import { RpcResponse, RpcResponseEnded } from '../response';
import { AcceptTransactionRequest, AcceptTransactionResponse, AddPeerRequest, AddPeerResponse, AddTransactionRequest, AddTransactionResponse, BlockTemplateStreamRequest, BlockTemplateStreamResponse, BroadcastTransactionRequest, BroadcastTransactionResponse, BurnAssetRequest, BurnAssetResponse, CreateAccountRequest, CreateAccountResponse, CreateTransactionRequest, CreateTransactionResponse, EstimateFeeRateRequest, EstimateFeeRateResponse, EstimateFeeRatesRequest, EstimateFeeRatesResponse, ExportAccountRequest, ExportAccountResponse, ExportChainStreamRequest, ExportChainStreamResponse, FollowChainStreamRequest, FollowChainStreamResponse, GetAccountNotesStreamRequest, GetAccountNotesStreamResponse, GetAccountsRequest, GetAccountsResponse, GetAccountStatusRequest, GetAccountStatusResponse, GetAccountTransactionRequest, GetAccountTransactionResponse, GetAccountTransactionsRequest, GetAccountTransactionsResponse, GetAssetRequest, GetAssetResponse, GetAssetsRequest, GetAssetsResponse, GetBalanceRequest, GetBalanceResponse, GetBalancesRequest, GetBalancesResponse, GetBannedPeersRequest, GetBannedPeersResponse, GetBlockRequest, GetBlockResponse, GetChainInfoRequest, GetChainInfoResponse, GetConfigRequest, GetConfigResponse, GetConsensusParametersRequest, GetConsensusParametersResponse, GetDefaultAccountRequest, GetDefaultAccountResponse, GetDifficultyRequest, GetDifficultyResponse, GetFundsRequest, GetFundsResponse, GetLogStreamResponse, GetMempoolStatusResponse, GetMempoolTransactionResponse, GetMempoolTransactionsRequest, GetNetworkHashPowerRequest, GetNetworkHashPowerResponse, GetNetworkInfoRequest, GetNetworkInfoResponse, GetNodeStatusRequest, GetNodeStatusResponse, GetNoteWitnessRequest, GetNoteWitnessResponse, GetPeerMessagesRequest, GetPeerMessagesResponse, GetPeerRequest, GetPeerResponse, GetPeersRequest, GetPeersResponse, GetPublicKeyRequest, GetPublicKeyResponse, GetRpcStatusRequest, GetRpcStatusResponse, GetTransactionRequest, GetTransactionResponse, GetTransactionStreamRequest, GetTransactionStreamResponse, GetWorkersStatusRequest, GetWorkersStatusResponse, ImportAccountRequest, ImportResponse, MintAssetRequest, MintAssetResponse, OnGossipRequest, OnGossipResponse, OnReorganizeChainRequest, OnReorganizeChainResponse, OnTransactionGossipRequest, OnTransactionGossipResponse, PostTransactionRequest, PostTransactionResponse, RemoveAccountRequest, RemoveAccountResponse, RenameAccountRequest, RenameAccountResponse, RescanAccountRequest, RescanAccountResponse, SendTransactionRequest, SendTransactionResponse, SetConfigRequest, SetConfigResponse, ShowChainRequest, ShowChainResponse, StopNodeResponse, SubmitBlockRequest, SubmitBlockResponse, UnsetConfigRequest, UnsetConfigResponse, UploadConfigRequest, UploadConfigResponse, UseAccountRequest, UseAccountResponse } from '../routes';
import { IsValidPublicAddressRequest, IsValidPublicAddressResponse } from '../routes/chain/isValidPublicAddress';
import { GetWalletAssetRequest, GetWalletAssetResponse } from '../routes/wallet/getAsset';
import { GetNotesRequest, GetNotesResponse } from '../routes/wallet/getNotes';
export declare abstract class RpcClient {
    readonly logger: Logger;
    constructor(logger: Logger);
    abstract request<TEnd = unknown, TStream = unknown>(route: string, data?: unknown, options?: {
        timeoutMs?: number | null;
    }): RpcResponse<TEnd, TStream>;
    node: {
        getStatus: (params?: GetNodeStatusRequest) => Promise<RpcResponseEnded<GetNodeStatusResponse>>;
        getStatusStream: () => RpcResponse<void, GetNodeStatusResponse>;
        stopNode: () => Promise<RpcResponseEnded<StopNodeResponse>>;
        getLogStream: () => RpcResponse<void, GetLogStreamResponse>;
    };
    wallet: {
        getAccounts: (params?: GetAccountsRequest) => Promise<RpcResponseEnded<GetAccountsResponse>>;
        getDefaultAccount: (params?: GetDefaultAccountRequest) => Promise<RpcResponseEnded<GetDefaultAccountResponse>>;
        createAccount: (params: CreateAccountRequest) => Promise<RpcResponseEnded<CreateAccountResponse>>;
        useAccount: (params: UseAccountRequest) => Promise<RpcResponseEnded<UseAccountResponse>>;
        renameAccount: (params: RenameAccountRequest) => Promise<RpcResponseEnded<RenameAccountResponse>>;
        removeAccount: (params: RemoveAccountRequest) => Promise<RpcResponseEnded<RemoveAccountResponse>>;
        getAccountBalances: (params: GetBalancesRequest) => Promise<RpcResponseEnded<GetBalancesResponse>>;
        getAccountBalance: (params?: GetBalanceRequest) => Promise<RpcResponseEnded<GetBalanceResponse>>;
        rescanAccountStream: (params?: RescanAccountRequest) => RpcResponse<void, RescanAccountResponse>;
        exportAccount: (params: ExportAccountRequest) => Promise<RpcResponseEnded<ExportAccountResponse>>;
        importAccount: (params: ImportAccountRequest) => Promise<RpcResponseEnded<ImportResponse>>;
        getAccountPublicKey: (params?: GetPublicKeyRequest) => Promise<RpcResponseEnded<GetPublicKeyResponse>>;
        getAccountNotesStream: (params?: GetAccountNotesStreamRequest) => RpcResponse<void, GetAccountNotesStreamResponse>;
        getAccountsStatus: (params: GetAccountStatusRequest) => Promise<RpcResponseEnded<GetAccountStatusResponse>>;
        getAccountTransaction: (params: GetAccountTransactionRequest) => Promise<RpcResponseEnded<GetAccountTransactionResponse>>;
        getAccountTransactionsStream: (params: GetAccountTransactionsRequest) => RpcResponse<void, GetAccountTransactionsResponse>;
        getNotes: (params: GetNotesRequest) => Promise<RpcResponseEnded<GetNotesResponse>>;
        getAsset: (params: GetWalletAssetRequest) => Promise<RpcResponseEnded<GetWalletAssetResponse>>;
        mintAsset: (params: MintAssetRequest) => Promise<RpcResponseEnded<MintAssetResponse>>;
        burnAsset: (params: BurnAssetRequest) => Promise<RpcResponseEnded<BurnAssetResponse>>;
        sendTransaction: (params: SendTransactionRequest) => Promise<RpcResponseEnded<SendTransactionResponse>>;
        getAssets: (params: GetAssetsRequest) => RpcResponse<void, GetAssetsResponse>;
        postTransaction: (params: PostTransactionRequest) => Promise<RpcResponseEnded<PostTransactionResponse>>;
        addTransaction: (params: AddTransactionRequest) => Promise<RpcResponseEnded<AddTransactionResponse>>;
        createTransaction: (params: CreateTransactionRequest) => Promise<RpcResponseEnded<CreateTransactionResponse>>;
        estimateFeeRates: (params?: EstimateFeeRatesRequest) => Promise<RpcResponseEnded<EstimateFeeRatesResponse>>;
        getNodeStatus: (params?: GetNodeStatusRequest) => Promise<RpcResponseEnded<GetNodeStatusResponse>>;
        getNodeStatusStream: () => RpcResponse<void, GetNodeStatusResponse>;
    };
    mempool: {
        acceptTransaction: (params: AcceptTransactionRequest) => Promise<RpcResponseEnded<AcceptTransactionResponse>>;
        getMempoolTransactionsStream: (params: GetMempoolTransactionsRequest) => RpcResponse<void, GetMempoolTransactionResponse>;
        getMempoolStatus: () => Promise<RpcResponseEnded<GetMempoolStatusResponse>>;
        getMempoolStatusStream: () => RpcResponse<void, GetMempoolStatusResponse>;
    };
    peer: {
        addPeer: (params: AddPeerRequest) => Promise<RpcResponseEnded<AddPeerResponse>>;
        getBannedPeers: (params?: GetBannedPeersRequest) => Promise<RpcResponseEnded<GetBannedPeersResponse>>;
        getBannedPeersStream: (params?: GetBannedPeersRequest) => RpcResponse<void, GetBannedPeersResponse>;
        getPeers: (params?: GetPeersRequest) => Promise<RpcResponseEnded<GetPeersResponse>>;
        getPeersStream: (params?: GetPeersRequest) => RpcResponse<void, GetPeersResponse>;
        getPeer: (params: GetPeerRequest) => Promise<RpcResponseEnded<GetPeerResponse>>;
        getPeerStream: (params: GetPeerRequest) => RpcResponse<void, GetPeerResponse>;
        getPeerMessages: (params: GetPeerMessagesRequest) => Promise<RpcResponseEnded<GetPeerMessagesResponse>>;
        getPeerMessagesStream: (params: GetPeerMessagesRequest) => RpcResponse<void, GetPeerMessagesResponse>;
    };
    worker: {
        getWorkersStatus: (params?: GetWorkersStatusRequest) => Promise<RpcResponseEnded<GetWorkersStatusResponse>>;
        getWorkersStatusStream: (params?: GetWorkersStatusRequest) => RpcResponse<void, GetWorkersStatusResponse>;
    };
    rpc: {
        getRpcStatus: (params?: GetRpcStatusRequest) => Promise<RpcResponseEnded<GetRpcStatusResponse>>;
        getRpcStatusStream: (params?: GetRpcStatusRequest) => RpcResponse<void, GetRpcStatusResponse>;
    };
    event: {
        onGossipStream: (params?: OnGossipRequest) => RpcResponse<void, OnGossipResponse>;
        onReorganizeChainStream: (params?: OnReorganizeChainRequest) => RpcResponse<void, OnReorganizeChainResponse>;
        onTransactionGossipStream: (params?: OnTransactionGossipRequest) => RpcResponse<void, OnTransactionGossipResponse>;
    };
    miner: {
        blockTemplateStream: (params?: BlockTemplateStreamRequest) => RpcResponse<void, BlockTemplateStreamResponse>;
        submitBlock: (params: SubmitBlockRequest) => Promise<RpcResponseEnded<SubmitBlockResponse>>;
    };
    faucet: {
        getFunds: (params: GetFundsRequest) => Promise<RpcResponseEnded<GetFundsResponse>>;
    };
    chain: {
        estimateFeeRates: (params?: EstimateFeeRatesRequest) => Promise<RpcResponseEnded<EstimateFeeRatesResponse>>;
        estimateFeeRate: (params?: EstimateFeeRateRequest) => Promise<RpcResponseEnded<EstimateFeeRateResponse>>;
        getChainInfo: (params?: GetChainInfoRequest) => Promise<RpcResponseEnded<GetChainInfoResponse>>;
        exportChainStream: (params?: ExportChainStreamRequest) => RpcResponse<void, ExportChainStreamResponse>;
        followChainStream: (params?: FollowChainStreamRequest) => RpcResponse<void, FollowChainStreamResponse>;
        getBlock: (params: GetBlockRequest) => Promise<RpcResponseEnded<GetBlockResponse>>;
        getDifficulty: (params?: GetDifficultyRequest) => Promise<RpcResponseEnded<GetDifficultyResponse>>;
        getNoteWitness: (params: GetNoteWitnessRequest) => Promise<RpcResponseEnded<GetNoteWitnessResponse>>;
        getNetworkHashPower: (params: GetNetworkHashPowerRequest) => Promise<RpcResponseEnded<GetNetworkHashPowerResponse>>;
        showChain: (params?: ShowChainRequest) => Promise<RpcResponseEnded<ShowChainResponse>>;
        getTransactionStream: (params: GetTransactionStreamRequest) => RpcResponse<void, GetTransactionStreamResponse>;
        getTransaction: (params: GetTransactionRequest) => RpcResponse<void, GetTransactionResponse>;
        getConsensusParameters: (params?: GetConsensusParametersRequest) => Promise<RpcResponseEnded<GetConsensusParametersResponse>>;
        getAsset: (params: GetAssetRequest) => Promise<RpcResponseEnded<GetAssetResponse>>;
        getNetworkInfo: (params?: GetNetworkInfoRequest) => Promise<RpcResponse<GetNetworkInfoResponse>>;
        isValidPublicAddress: (params: IsValidPublicAddressRequest) => Promise<RpcResponse<IsValidPublicAddressResponse>>;
        broadcastTransaction: (params: BroadcastTransactionRequest) => Promise<RpcResponse<BroadcastTransactionResponse>>;
    };
    config: {
        getConfig: (params?: GetConfigRequest) => Promise<RpcResponseEnded<GetConfigResponse>>;
        setConfig: (params: SetConfigRequest) => Promise<RpcResponseEnded<SetConfigResponse>>;
        unsetConfig: (params: UnsetConfigRequest) => Promise<RpcResponseEnded<UnsetConfigResponse>>;
        uploadConfig: (params: UploadConfigRequest) => Promise<RpcResponseEnded<UploadConfigResponse>>;
    };
}
//# sourceMappingURL=client.d.ts.map