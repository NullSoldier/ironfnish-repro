"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcTlsClient = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const tls_1 = __importDefault(require("tls"));
const assert_1 = require("../../assert");
const utils_1 = require("../../utils");
const errors_1 = require("./errors");
const tcpClient_1 = require("./tcpClient");
class RpcTlsClient extends tcpClient_1.RpcTcpClient {
    async connect() {
        this.logger.debug(`Connecting to ${this.describe()}`);
        return new Promise((resolve, reject) => {
            const onSecureConnect = () => {
                client.off('secureConnection', onSecureConnect);
                client.off('error', onError);
                this.onConnect();
                resolve();
            };
            const onError = (error) => {
                client.off('secureConnection', onSecureConnect);
                client.off('error', onError);
                if (utils_1.ErrorUtils.isConnectRefusedError(error) || utils_1.ErrorUtils.isNoEntityError(error)) {
                    reject(new errors_1.RpcConnectionRefusedError());
                }
                else if (utils_1.ErrorUtils.isConnectTimeOutError(error) ||
                    utils_1.ErrorUtils.isConnectResetError(error)) {
                    reject(new errors_1.RpcConnectionLostError());
                }
                else {
                    reject(error);
                }
            };
            const options = {
                rejectUnauthorized: false,
            };
            assert_1.Assert.isNotUndefined(this.connectTo.host);
            assert_1.Assert.isNotUndefined(this.connectTo.port);
            const client = tls_1.default.connect(this.connectTo.port, this.connectTo.host, options);
            client.on('error', onError);
            client.on('secureConnect', onSecureConnect);
            this.client = client;
        });
    }
}
exports.RpcTlsClient = RpcTlsClient;
//# sourceMappingURL=tlsClient.js.map