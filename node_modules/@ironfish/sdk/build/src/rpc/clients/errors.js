"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestTimeoutError = exports.RpcRequestError = exports.RpcConnectionLostError = exports.RpcConnectionRefusedError = exports.RpcConnectionError = void 0;
/*
 The errors in this file are to be used by RPC client implementations
 to provide a common error interface to consumers of the Ironfish RPC
 interface. Try to throw these errors when you are developing a client
 so developers can rely on these errors.
*/
/**
 * The base class for a connection related error. In case someone wants
 * to log and handle any connection related issues.
 */
class RpcConnectionError extends Error {
    constructor() {
        super(...arguments);
        this.name = this.constructor.name;
    }
}
exports.RpcConnectionError = RpcConnectionError;
/**
 * Thrown when the connection attempt has failed for any reason. Most
 * likely because the server is not running, the server is unreachable,
 * the server is running on a different port, etc...
 */
class RpcConnectionRefusedError extends RpcConnectionError {
}
exports.RpcConnectionRefusedError = RpcConnectionRefusedError;
/** Thrown when the connection is lost after you've successfully connected.
 *
 * @note In a stateless connection like HTTP this should happen after the request was sent out, but before the response has been returned.
 * @note In a stateful connection like websockets or IPC, this should be thrown any time after you've connected when the connection has been disconnected unexpectedly. */
class RpcConnectionLostError extends RpcConnectionError {
}
exports.RpcConnectionLostError = RpcConnectionLostError;
/** Thrown when a response comes back with a code that is between 400 to 500 */
class RpcRequestError extends Error {
    constructor(response, code, codeMessage, codeStack) {
        super(`Request failed (${response.status}) ${code}: ${codeMessage}`);
        this.name = this.constructor.name;
        this.response = undefined;
        this.response = response;
        this.status = response.status;
        this.code = code;
        this.codeMessage = codeMessage;
        this.codeStack = codeStack || null;
    }
}
exports.RpcRequestError = RpcRequestError;
/** Thrown when the request timeout has been exceeded and the request has been aborted */
class RequestTimeoutError extends RpcRequestError {
    constructor(response, timeoutMs, route) {
        super(response, 'request-timeout', `Timeout of ${timeoutMs} exceeded to ${route}`);
    }
}
exports.RequestTimeoutError = RequestTimeoutError;
//# sourceMappingURL=errors.js.map