import { SetTimeoutToken } from '../utils';
import { Stream } from './stream';
export declare function isRpcResponseError(response: RpcResponse<unknown>): boolean;
export declare function isRpcResponseServerError(response: RpcResponse<unknown>): boolean;
export declare function isRpcResponseUserError(response: RpcResponse<unknown>): boolean;
export declare type RpcResponseEnded<TEnd> = Exclude<RpcResponse<TEnd>, 'content'> & {
    content: TEnd;
};
export declare class RpcResponse<TEnd = unknown, TStream = unknown> {
    private promise;
    private stream;
    private timeout;
    status: number;
    content: TEnd | null;
    constructor(promise: Promise<TEnd>, stream: Stream<TStream>, timeout: SetTimeoutToken | null);
    waitForEnd(): Promise<RpcResponseEnded<TEnd>>;
    bufferSize(): number;
    contentStream(ignoreClose?: boolean): AsyncGenerator<TStream, void>;
}
//# sourceMappingURL=response.d.ts.map