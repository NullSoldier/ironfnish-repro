/// <reference types="node" />
import net from 'net';
import { Logger } from '../../../logger';
import { Meter } from '../../../metrics/meter';
import { MessageBuffer } from '../../messageBuffer';
import { RpcRequest } from '../../request';
import { ApiNamespace, Router } from '../../routes';
import { RpcServer } from '../../server';
import { IRpcAdapter } from '../adapter';
import { ServerSocketRpc } from './protocol';
declare type SocketClient = {
    id: string;
    socket: net.Socket;
    requests: Map<string, RpcRequest>;
    messageBuffer: MessageBuffer;
};
export declare abstract class RpcSocketAdapter implements IRpcAdapter {
    logger: Logger;
    listen: net.ListenOptions;
    server: net.Server | null;
    router: Router | null;
    namespaces: ApiNamespace[];
    enableAuthentication: boolean;
    started: boolean;
    clients: Map<string, SocketClient>;
    inboundTraffic: Meter;
    outboundTraffic: Meter;
    get addressPort(): number | null;
    constructor(listen: net.ListenOptions, logger: Logger | undefined, namespaces: ApiNamespace[]);
    protected createServer(): net.Server | Promise<net.Server>;
    start(): Promise<void>;
    stop(): Promise<void>;
    attach(server: RpcServer): void;
    waitForAllToDisconnect(): Promise<void>;
    waitForClientToDisconnect(client: SocketClient): Promise<void>;
    onClientConnection(socket: net.Socket): void;
    onClientDisconnection(client: SocketClient): void;
    onClientError(client: SocketClient, error: unknown): void;
    onClientData(client: SocketClient, data: Buffer): Promise<void>;
    emitResponse(client: SocketClient, data: ServerSocketRpc, requestId?: string): void;
    emitStream(client: SocketClient, data: ServerSocketRpc): void;
    encodeMessage(data: ServerSocketRpc): Buffer;
    constructMessage(messageId: number, status: number, data: unknown): ServerSocketRpc;
    constructStream(messageId: number, data: unknown): ServerSocketRpc;
    constructMalformedRequest(request: unknown): ServerSocketRpc;
    describe(): string;
}
export {};
//# sourceMappingURL=socketAdapter.d.ts.map