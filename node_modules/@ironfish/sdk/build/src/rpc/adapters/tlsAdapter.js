"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcTlsAdapter = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const crypto_1 = require("crypto");
const tls_1 = __importDefault(require("tls"));
const logger_1 = require("../../logger");
const tls_2 = require("../../utils/tls");
const socketAdapter_1 = require("./socketAdapter/socketAdapter");
class RpcTlsAdapter extends socketAdapter_1.RpcSocketAdapter {
    constructor(host, port, fileSystem, nodeKeyPath, nodeCertPath, node, logger = logger_1.createRootLogger(), namespaces) {
        super({ host, port }, logger, namespaces);
        this.fileSystem = fileSystem;
        this.nodeKeyPath = nodeKeyPath;
        this.nodeCertPath = nodeCertPath;
        this.node = node;
        this.enableAuthentication = true;
    }
    async createServer() {
        const rpcAuthToken = this.node.internal.get('rpcAuthToken');
        if (!rpcAuthToken || rpcAuthToken === '') {
            this.logger.debug(`Missing RPC Auth token in internal.json config. Automatically generating auth token.`);
            const newPassword = crypto_1.randomBytes(32).toString('hex');
            this.node.internal.set('rpcAuthToken', newPassword);
            await this.node.internal.save();
        }
        const options = await tls_2.TlsUtils.getTlsOptions(this.fileSystem, this.nodeKeyPath, this.nodeCertPath, this.logger);
        return tls_1.default.createServer(options, (socket) => this.onClientConnection(socket));
    }
}
exports.RpcTlsAdapter = RpcTlsAdapter;
//# sourceMappingURL=tlsAdapter.js.map