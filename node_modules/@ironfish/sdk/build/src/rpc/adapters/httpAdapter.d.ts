/// <reference types="node" />
import http from 'http';
import { Logger } from '../../logger';
import { Gauge, Meter } from '../../metrics';
import { RpcRequest } from '../request';
import { ApiNamespace, Router } from '../routes';
import { RpcServer } from '../server';
import { IRpcAdapter } from './adapter';
export declare type HttpRpcError = {
    status: number;
    code: string;
    message: string;
    stack?: string;
};
export declare class RpcHttpAdapter implements IRpcAdapter {
    server: http.Server | null;
    router: Router | null;
    readonly host: string;
    readonly port: number;
    readonly logger: Logger;
    readonly namespaces: ApiNamespace[];
    readonly requests: Map<string, {
        rpcRequest?: RpcRequest;
        req: http.IncomingMessage;
        waitForClose: Promise<void>;
    }>;
    inboundTraffic: Meter;
    outboundTraffic: Meter;
    inboundBytes: Gauge;
    outboundBytes: Gauge;
    constructor(host: string, port: number, logger: Logger | undefined, namespaces: ApiNamespace[]);
    attach(server: RpcServer): void | Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    cleanUpRequest(requestId: string): void;
    handleRequest(request: http.IncomingMessage, response: http.ServerResponse, requestId: string): Promise<void>;
    formatRoute(request: http.IncomingMessage): string | undefined;
}
//# sourceMappingURL=httpAdapter.d.ts.map