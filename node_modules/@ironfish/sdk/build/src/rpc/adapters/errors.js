"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotFoundError = exports.ValidationError = exports.ResponseError = exports.ERROR_CODES = void 0;
/** All the known error codes for APIs that can be sent back from all APIs */
var ERROR_CODES;
(function (ERROR_CODES) {
    ERROR_CODES["ACCOUNT_EXISTS"] = "account-exists";
    ERROR_CODES["ERROR"] = "error";
    ERROR_CODES["ROUTE_NOT_FOUND"] = "route-not-found";
    ERROR_CODES["VALIDATION"] = "validation";
    ERROR_CODES["INSUFFICIENT_BALANCE"] = "insufficient-balance";
    ERROR_CODES["UNAUTHENTICATED"] = "unauthenticated";
    ERROR_CODES["NOT_FOUND"] = "not-found";
})(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));
/**
 * Thrown by any part of the RPC server side networking stack to
 * indicate that the request should be ended and an error should be
 * sent back to the client. Any implementer of {@link IAdapter} should
 * catch this before feeding the {@link Request} into the {@link Router},
 * handle it, and render a response to the requester appropriately.
 *
 * @note Look at the {@link IPCAdapter} implementation for an example
 */
class ResponseError extends Error {
    constructor(messageOrError, code = ERROR_CODES.ERROR, status = 400) {
        super(messageOrError instanceof Error ? messageOrError.message : messageOrError);
        this.name = this.constructor.name;
        this.error = null;
        if (messageOrError instanceof Error) {
            this.error = messageOrError;
            this.stack = this.error.stack;
        }
        this.status = status;
        this.code = code;
    }
}
exports.ResponseError = ResponseError;
/**
 * A convenience error to throw inside of routes when you want to indicate
 * a 400 error to the user based on validation
 */
class ValidationError extends ResponseError {
    constructor(message, status = 400, code = ERROR_CODES.VALIDATION) {
        super(message, code, status);
    }
}
exports.ValidationError = ValidationError;
/**
 * A convenience error to throw inside of routes when a resource is not found
 */
class NotFoundError extends ResponseError {
    constructor(message, status = 404, code = ERROR_CODES.NOT_FOUND) {
        super(message, code, status);
    }
}
exports.NotFoundError = NotFoundError;
//# sourceMappingURL=errors.js.map