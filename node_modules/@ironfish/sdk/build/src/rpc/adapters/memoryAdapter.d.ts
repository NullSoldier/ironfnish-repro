import { SetTimeoutToken } from '../../utils';
import { RpcRequest } from '../request';
import { RpcResponse } from '../response';
import { Router } from '../routes';
import { Stream } from '../stream';
/**
 * This class provides a way to route requests directly against the routing layer
 * return a response from the route
 *
 * This is useful any time you want to make requests without hitting an IO layer.
 */
export declare class RpcMemoryAdapter {
    /**
     * Makes a request against the routing layer with a given route, and data and returns
     * a response for you to accumulate the streaming results, or wait for a response
     */
    static requestStream<TEnd = unknown, TStream = unknown>(router: Router, route: string, data?: unknown): MemoryResponse<TEnd, TStream>;
}
export declare class MemoryResponse<TEnd, TStream> extends RpcResponse<TEnd, TStream> {
    request: RpcRequest<unknown, unknown> | null;
    routePromise: Promise<void> | null;
    constructor(promise: Promise<TEnd>, stream: Stream<TStream>, timeout: SetTimeoutToken | null);
    close(): void;
    end(...args: Parameters<RpcRequest['end']>): ReturnType<RpcRequest['end']>;
    waitForRoute(): Promise<MemoryResponse<TEnd, TStream>>;
}
//# sourceMappingURL=memoryAdapter.d.ts.map