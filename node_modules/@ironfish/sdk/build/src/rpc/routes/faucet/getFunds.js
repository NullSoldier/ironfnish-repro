"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetFundsResponseSchema = exports.GetFundsRequestSchema = void 0;
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const webApi_1 = require("../../../webApi");
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
const utils_1 = require("../wallet/utils");
exports.GetFundsRequestSchema = yup
    .object({
    account: yup.string(),
    email: yup.string().trim(),
})
    .defined();
exports.GetFundsResponseSchema = yup
    .object({
    id: yup.string().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.faucet}/getFunds`, exports.GetFundsRequestSchema, async (request, node) => {
    // check node network id
    const networkId = node.internal.get('networkId');
    if (networkId !== 0) {
        // not testnet
        throw new adapters_1.ResponseError('This endpoint is only available for testnet.', adapters_1.ERROR_CODES.ERROR);
    }
    const account = utils_1.getAccount(node.wallet, request.data.account);
    const api = new webApi_1.WebApi({
        getFundsEndpoint: node.config.get('getFundsApi'),
    });
    const response = await api
        .getFunds({
        email: request.data.email,
        public_key: account.publicAddress,
    })
        .catch((error) => {
        if (error.response) {
            const { data, status } = error.response;
            if (status === 422) {
                if (data.code === 'faucet_max_requests_reached') {
                    assert_1.Assert.isNotUndefined(data.message);
                    throw new adapters_1.ResponseError(data.message, adapters_1.ERROR_CODES.VALIDATION, status);
                }
                throw new adapters_1.ResponseError('You entered an invalid email.', adapters_1.ERROR_CODES.VALIDATION, status);
            }
            else if (data.message) {
                throw new adapters_1.ResponseError(data.message, adapters_1.ERROR_CODES.ERROR, status);
            }
        }
        throw new adapters_1.ResponseError(error.message, adapters_1.ERROR_CODES.ERROR, Number(error.code));
    });
    request.end({
        id: response.id.toString(),
    });
});
//# sourceMappingURL=getFunds.js.map