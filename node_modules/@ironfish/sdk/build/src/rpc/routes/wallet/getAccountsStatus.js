"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAccountStatusResponseSchema = exports.GetAccountStatusRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const router_1 = require("../router");
exports.GetAccountStatusRequestSchema = yup
    .object({})
    .defined();
exports.GetAccountStatusResponseSchema = yup
    .object({
    accounts: yup
        .array(yup
        .object({
        name: yup.string().defined(),
        id: yup.string().defined(),
        headHash: yup.string().defined(),
        headInChain: yup.boolean().optional(),
        sequence: yup.string().defined(),
    })
        .defined())
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/getAccountsStatus`, exports.GetAccountStatusRequestSchema, async (request, node) => {
    const heads = new Map();
    for await (const { accountId, head } of node.wallet.walletDb.loadHeads()) {
        heads.set(accountId, head);
    }
    const accountsInfo = [];
    for (const account of node.wallet.listAccounts()) {
        const head = heads.get(account.id);
        let headInChain = undefined;
        if (node.wallet.nodeClient) {
            headInChain = head?.hash ? await node.wallet.chainHasBlock(head.hash) : false;
        }
        accountsInfo.push({
            name: account.name,
            id: account.id,
            headHash: head?.hash.toString('hex') || 'NULL',
            headInChain,
            sequence: head?.sequence || 'NULL',
        });
    }
    request.end({ accounts: accountsInfo });
});
//# sourceMappingURL=getAccountsStatus.js.map