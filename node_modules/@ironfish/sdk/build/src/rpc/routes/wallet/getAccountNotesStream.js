"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAccountNotesStreamResponseSchema = exports.GetAccountNotesStreamRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const utils_1 = require("../../../utils");
const router_1 = require("../router");
const types_1 = require("./types");
const utils_2 = require("./utils");
exports.GetAccountNotesStreamRequestSchema = yup
    .object({
    account: yup.string().trim(),
})
    .defined();
exports.GetAccountNotesStreamResponseSchema = types_1.RpcWalletNoteSchema;
router_1.routes.register(`${router_1.ApiNamespace.wallet}/getAccountNotesStream`, exports.GetAccountNotesStreamRequestSchema, async (request, node) => {
    const account = utils_2.getAccount(node.wallet, request.data.account);
    for await (const transaction of account.getTransactionsByTime()) {
        if (request.closed) {
            break;
        }
        const notes = await account.getTransactionNotes(transaction.transaction);
        for (const { note, spent, index, nullifier } of notes) {
            if (request.closed) {
                break;
            }
            const asset = await account.getAsset(note.assetId());
            request.stream({
                value: utils_1.CurrencyUtils.encode(note.value()),
                assetId: note.assetId().toString('hex'),
                assetName: asset?.name.toString('hex') || '',
                memo: note.memo(),
                sender: note.sender(),
                owner: note.owner(),
                noteHash: note.hash().toString('hex'),
                transactionHash: transaction.transaction.hash().toString('hex'),
                index,
                spent,
                nullifier: nullifier?.toString('hex') || null,
                isOwner: true,
                hash: note.hash().toString('hex'),
            });
        }
    }
    request.end();
});
//# sourceMappingURL=getAccountNotesStream.js.map