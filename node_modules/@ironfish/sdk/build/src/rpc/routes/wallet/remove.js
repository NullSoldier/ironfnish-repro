"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveAccountResponseSchema = exports.RemoveAccountRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const router_1 = require("../router");
const utils_1 = require("./utils");
exports.RemoveAccountRequestSchema = yup
    .object({
    account: yup.string().defined(),
    confirm: yup.boolean().optional(),
    wait: yup.boolean().optional(),
})
    .defined();
exports.RemoveAccountResponseSchema = yup
    .object({
    needsConfirm: yup.boolean().optional(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/remove`, exports.RemoveAccountRequestSchema, async (request, node) => {
    const account = utils_1.getAccount(node.wallet, request.data.account);
    if (!request.data.confirm) {
        if (!(await node.wallet.isAccountUpToDate(account))) {
            request.end({ needsConfirm: true });
            return;
        }
        const balances = await account.getUnconfirmedBalances();
        for (const [_, { unconfirmed }] of balances) {
            if (unconfirmed !== 0n) {
                request.end({ needsConfirm: true });
                return;
            }
        }
    }
    await node.wallet.removeAccountByName(account.name);
    if (request.data.wait) {
        await node.wallet.forceCleanupDeletedAccounts();
    }
    request.end({});
});
//# sourceMappingURL=remove.js.map