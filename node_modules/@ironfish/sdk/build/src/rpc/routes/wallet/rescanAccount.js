"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RescanAccountResponseSchema = exports.RescanAccountRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const primitives_1 = require("../../../primitives");
const errors_1 = require("../../adapters/errors");
const router_1 = require("../router");
exports.RescanAccountRequestSchema = yup
    .object({
    follow: yup.boolean().optional(),
    from: yup.number().optional(),
})
    .defined();
exports.RescanAccountResponseSchema = yup
    .object({
    sequence: yup.number().defined(),
    endSequence: yup.number().defined(),
    startedAt: yup.number().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/rescanAccount`, exports.RescanAccountRequestSchema, async (request, node) => {
    let scan = node.wallet.scan;
    if (scan && !request.data.follow) {
        throw new errors_1.ValidationError(`A transaction rescan is already running`);
    }
    if (!scan) {
        if (node.wallet.updateHeadState) {
            await node.wallet.updateHeadState.abort();
        }
        await node.wallet.reset();
        let fromHash = undefined;
        if (request.data.from && request.data.from > primitives_1.GENESIS_BLOCK_SEQUENCE) {
            const response = await node.wallet.chainGetBlock({ sequence: request.data.from });
            if (response === null) {
                throw new errors_1.ValidationError(`No block header found in the chain at sequence ${request.data.from}`);
            }
            fromHash = Buffer.from(response.block.hash, 'hex');
            for (const account of node.wallet.listAccounts()) {
                await account.updateHead({
                    hash: Buffer.from(response.block.previousBlockHash, 'hex'),
                    sequence: response.block.sequence - 1,
                });
            }
        }
        void node.wallet.scanTransactions(fromHash);
        scan = node.wallet.scan;
        if (!scan) {
            node.logger.warn(`Attempted to start accounts scan but one did not start.`);
        }
    }
    if (scan && request.data.follow) {
        const onTransaction = (sequence, endSequence) => {
            request.stream({
                sequence: sequence,
                endSequence: endSequence,
                startedAt: scan?.startedAt || 0,
            });
        };
        scan.onTransaction.on(onTransaction);
        request.onClose.on(() => {
            scan?.onTransaction.off(onTransaction);
        });
        await scan.wait();
    }
    request.end();
});
//# sourceMappingURL=rescanAccount.js.map