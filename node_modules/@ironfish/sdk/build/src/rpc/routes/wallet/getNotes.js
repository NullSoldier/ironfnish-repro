"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNotesResponseSchema = exports.GetNotesRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const router_1 = require("../router");
const types_1 = require("./types");
const utils_1 = require("./utils");
const DEFAULT_PAGE_SIZE = 100;
exports.GetNotesRequestSchema = yup
    .object({
    account: yup.string().trim(),
    pageSize: yup.number().min(1),
    pageCursor: yup.string(),
    filter: yup
        .object({
        value: yup.object({
            min: yup.string(),
            max: yup.string(),
        }),
        assetId: yup.string(),
        memo: yup.string(),
        sender: yup.string(),
        noteHash: yup.string(),
        transactionHash: yup.string(),
        index: yup.number(),
        nullifier: yup.string(),
        spent: yup.boolean(),
    })
        .defined(),
})
    .defined();
exports.GetNotesResponseSchema = yup
    .object({
    notes: yup.array(types_1.RpcWalletNoteSchema).defined(),
    nextPageCursor: yup.string(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/getNotes`, exports.GetNotesRequestSchema, async (request, node) => {
    const account = utils_1.getAccount(node.wallet, request.data.account);
    const pageSize = request.data.pageSize ?? DEFAULT_PAGE_SIZE;
    const pageCursor = request.data.pageCursor;
    const keyRange = pageCursor ? { gte: Buffer.from(pageCursor, 'hex') } : undefined;
    const notes = [];
    let nextPageCursor = null;
    for await (const decryptedNote of account.getNotes(keyRange)) {
        if (notes.length === pageSize) {
            nextPageCursor = node.wallet.walletDb.decryptedNotes.keyEncoding.serialize([
                account.prefix,
                decryptedNote.hash,
            ]);
            break;
        }
        const asset = await account.getAsset(decryptedNote.note.assetId());
        const note = utils_1.serializeRpcWalletNote(decryptedNote, account.publicAddress, asset);
        if (!includeNote(note, request.data.filter ?? {})) {
            continue;
        }
        notes.push(note);
    }
    request.end({
        notes,
        nextPageCursor: nextPageCursor ? nextPageCursor.toString('hex') : null,
    });
});
function includeNote(note, filter) {
    return ((filter.value?.min === undefined || BigInt(note.value) >= BigInt(filter.value.min)) &&
        (filter.value?.max === undefined || BigInt(note.value) <= BigInt(filter.value.max)) &&
        (filter.assetId === undefined || note.assetId === filter.assetId) &&
        (filter.memo === undefined || note.memo === filter.memo) &&
        (filter.sender === undefined || note.sender === filter.sender) &&
        (filter.noteHash === undefined || note.noteHash === filter.noteHash) &&
        (filter.transactionHash === undefined || note.transactionHash === filter.transactionHash) &&
        (filter.index === undefined || note.index === filter.index) &&
        (filter.nullifier === undefined || note.nullifier === filter.nullifier) &&
        (filter.spent === undefined || note.spent === filter.spent));
}
//# sourceMappingURL=getNotes.js.map