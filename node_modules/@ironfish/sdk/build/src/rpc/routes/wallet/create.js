"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAccountResponseSchema = exports.CreateAccountRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
exports.CreateAccountRequestSchema = yup
    .object({
    name: yup.string().defined(),
    default: yup.boolean().optional(),
})
    .defined();
exports.CreateAccountResponseSchema = yup
    .object({
    name: yup.string().defined(),
    publicAddress: yup.string().defined(),
    isDefaultAccount: yup.boolean().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/create`, exports.CreateAccountRequestSchema, async (request, node) => {
    const name = request.data.name;
    if (node.wallet.accountExists(name)) {
        throw new adapters_1.ValidationError(`There is already an account with the name ${name}`, 400, adapters_1.ERROR_CODES.ACCOUNT_EXISTS);
    }
    const account = await node.wallet.createAccount(name);
    if (node.wallet.nodeClient) {
        void node.wallet.scanTransactions();
    }
    let isDefaultAccount = false;
    if (!node.wallet.hasDefaultAccount || request.data.default) {
        await node.wallet.setDefaultAccount(name);
        isDefaultAccount = true;
    }
    request.end({
        name: account.name,
        publicAddress: account.publicAddress,
        isDefaultAccount,
    });
});
//# sourceMappingURL=create.js.map