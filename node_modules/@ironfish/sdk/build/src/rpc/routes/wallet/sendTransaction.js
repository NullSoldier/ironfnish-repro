"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendTransactionResponseSchema = exports.SendTransactionRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const buffer_map_1 = require("buffer-map");
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const utils_1 = require("../../../utils");
const errors_1 = require("../../../wallet/errors");
const errors_2 = require("../../adapters/errors");
const router_1 = require("../router");
const utils_2 = require("./utils");
exports.SendTransactionRequestSchema = yup
    .object({
    account: yup.string().defined(),
    outputs: yup
        .array(yup
        .object({
        publicAddress: yup.string().defined(),
        amount: utils_1.YupUtils.currency({ min: 0n }).defined(),
        memo: yup.string().defined().max(rust_nodejs_1.MEMO_LENGTH),
        assetId: yup.string().optional(),
    })
        .defined())
        .defined(),
    fee: utils_1.YupUtils.currency({ min: 1n }).optional(),
    feeRate: utils_1.YupUtils.currency({ min: 1n }).optional(),
    expiration: yup.number().nullable().optional(),
    expirationDelta: yup.number().nullable().optional(),
    confirmations: yup.number().nullable().optional(),
})
    .defined();
exports.SendTransactionResponseSchema = yup
    .object({
    account: yup.string().defined(),
    hash: yup.string().defined(),
    transaction: yup.string().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/sendTransaction`, exports.SendTransactionRequestSchema, async (request, node) => {
    assert_1.Assert.isNotNull(node.wallet.nodeClient);
    const account = utils_2.getAccount(node.wallet, request.data.account);
    const status = await node.wallet.nodeClient.node.getStatus();
    if (!status.content.blockchain.synced) {
        throw new errors_2.ValidationError(`Your node must be synced with the Iron Fish network to send a transaction. Please try again later`);
    }
    const outputs = request.data.outputs.map((output) => ({
        publicAddress: output.publicAddress,
        amount: utils_1.CurrencyUtils.decode(output.amount),
        memo: output.memo,
        assetId: output.assetId ? Buffer.from(output.assetId, 'hex') : rust_nodejs_1.Asset.nativeId(),
    }));
    const params = {
        account,
        outputs,
        expiration: request.data.expiration ?? undefined,
        expirationDelta: request.data.expirationDelta ?? undefined,
        confirmations: request.data.confirmations ?? undefined,
    };
    const totalByAssetId = new buffer_map_1.BufferMap();
    for (const { assetId, amount } of outputs) {
        const sum = totalByAssetId.get(assetId) ?? 0n;
        totalByAssetId.set(assetId, sum + amount);
    }
    if (request.data.fee) {
        params.fee = utils_1.CurrencyUtils.decode(request.data.fee);
        totalByAssetId.set(rust_nodejs_1.Asset.nativeId(), params.fee);
    }
    if (request.data.feeRate) {
        params.feeRate = utils_1.CurrencyUtils.decode(request.data.feeRate);
    }
    // Check that the node has enough balance
    for (const [assetId, sum] of totalByAssetId) {
        const balance = await node.wallet.getBalance(account, assetId, {
            confirmations: request.data.confirmations ?? undefined,
        });
        if (balance.available < sum) {
            throw new errors_2.ValidationError(`Your balance is too low. Add funds to your account first`, undefined, errors_2.ERROR_CODES.INSUFFICIENT_BALANCE);
        }
    }
    try {
        const transaction = await node.wallet.send(params);
        request.end({
            account: account.name,
            transaction: transaction.serialize().toString('hex'),
            hash: transaction.hash().toString('hex'),
        });
    }
    catch (e) {
        if (e instanceof errors_1.NotEnoughFundsError) {
            throw new errors_2.ValidationError(e.message, 400, errors_2.ERROR_CODES.INSUFFICIENT_BALANCE);
        }
        throw e;
    }
});
//# sourceMappingURL=sendTransaction.js.map