"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetBalancesResponseSchema = exports.GetBalancesRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const utils_1 = require("../../../utils");
const router_1 = require("../router");
const utils_2 = require("./utils");
exports.GetBalancesRequestSchema = yup
    .object({
    account: yup.string().optional(),
    confirmations: yup.number().min(0).optional(),
})
    .defined();
exports.GetBalancesResponseSchema = yup
    .object({
    account: yup.string().defined(),
    balances: yup
        .array()
        .of(yup
        .object()
        .shape({
        assetId: yup.string().defined(),
        assetName: yup.string().defined(),
        assetCreator: yup.string().defined(),
        assetOwner: yup.string().defined(),
        assetVerification: yup
            .object({
            status: yup.string().oneOf(['verified', 'unverified', 'unknown']).defined(),
        })
            .defined(),
        unconfirmed: yup.string().defined(),
        unconfirmedCount: yup.number().defined(),
        pending: yup.string().defined(),
        pendingCount: yup.number().defined(),
        confirmed: yup.string().defined(),
        available: yup.string().defined(),
        blockHash: yup.string().nullable(true).defined(),
        sequence: yup.number().nullable(true).defined(),
    })
        .defined())
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/getBalances`, exports.GetBalancesRequestSchema, async (request, node) => {
    const account = utils_2.getAccount(node.wallet, request.data.account);
    const balances = [];
    for await (const balance of node.wallet.getBalances(account, request.data.confirmations)) {
        if (request.closed) {
            return;
        }
        const asset = await account.getAsset(balance.assetId);
        balances.push({
            assetId: balance.assetId.toString('hex'),
            assetName: asset?.name.toString('hex') ?? '',
            assetCreator: asset?.creator.toString('hex') ?? '',
            assetOwner: asset?.owner.toString('hex') ?? '',
            assetVerification: node.assetsVerifier.verify(balance.assetId),
            blockHash: balance.blockHash?.toString('hex') ?? null,
            confirmed: utils_1.CurrencyUtils.encode(balance.confirmed),
            sequence: balance.sequence,
            unconfirmed: utils_1.CurrencyUtils.encode(balance.unconfirmed),
            unconfirmedCount: balance.unconfirmedCount,
            pending: utils_1.CurrencyUtils.encode(balance.pending),
            pendingCount: balance.pendingCount,
            available: utils_1.CurrencyUtils.encode(balance.available),
        });
    }
    request.end({ account: account.name, balances });
});
//# sourceMappingURL=getBalances.js.map