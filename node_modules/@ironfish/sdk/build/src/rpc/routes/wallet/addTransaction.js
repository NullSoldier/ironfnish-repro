"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddTransactionResponseSchema = exports.AddTransactionRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const consensus_1 = require("../../../consensus");
const primitives_1 = require("../../../primitives");
const utils_1 = require("../../../utils");
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
exports.AddTransactionRequestSchema = yup
    .object({
    transaction: yup.string().defined(),
    broadcast: yup.boolean().optional().default(true),
})
    .defined();
exports.AddTransactionResponseSchema = yup
    .object({
    accounts: yup.array(yup.string().defined()).defined(),
    hash: yup.string().defined(),
    accepted: yup.boolean().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/addTransaction`, exports.AddTransactionRequestSchema, async (request, node) => {
    const data = Buffer.from(request.data.transaction, 'hex');
    const transaction = new primitives_1.Transaction(data);
    const verify = consensus_1.Verifier.verifyCreatedTransaction(transaction, node.strategy.consensus);
    if (!verify.valid) {
        throw new adapters_1.ValidationError(`Invalid transaction, reason: ${String(verify.reason)}`, 400);
    }
    await node.wallet.addPendingTransaction(transaction);
    const accounts = await utils_1.AsyncUtils.filter(node.wallet.listAccounts(), (account) => account.hasTransaction(transaction.hash()));
    if (accounts.length === 0) {
        throw new adapters_1.ValidationError(`Transaction ${transaction.hash().toString('hex')} is not related to any account`);
    }
    let accepted = false;
    if (request.data.broadcast) {
        const result = await node.wallet.broadcastTransaction(transaction);
        accepted = result.accepted;
    }
    request.end({
        accounts: accounts.map((a) => a.name),
        hash: transaction.hash().toString('hex'),
        accepted,
    });
});
//# sourceMappingURL=addTransaction.js.map