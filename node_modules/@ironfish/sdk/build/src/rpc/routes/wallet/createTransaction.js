"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTransactionResponseSchema = exports.CreateTransactionRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const rawTransaction_1 = require("../../../primitives/rawTransaction");
const utils_1 = require("../../../utils");
const errors_1 = require("../../../wallet/errors");
const errors_2 = require("../../adapters/errors");
const router_1 = require("../router");
const utils_2 = require("./utils");
exports.CreateTransactionRequestSchema = yup
    .object({
    account: yup.string().defined(),
    outputs: yup
        .array(yup
        .object({
        publicAddress: yup.string().defined(),
        amount: utils_1.YupUtils.currency({ min: 1n }).defined(),
        memo: yup.string().defined().max(rust_nodejs_1.MEMO_LENGTH),
        assetId: yup.string().optional(),
    })
        .defined())
        .defined(),
    mints: yup
        .array(yup
        .object({
        assetId: yup.string().optional(),
        name: yup.string().optional().max(rust_nodejs_1.ASSET_NAME_LENGTH),
        metadata: yup.string().optional().max(rust_nodejs_1.ASSET_METADATA_LENGTH),
        value: utils_1.YupUtils.currency({ min: 1n }).defined(),
    })
        .defined())
        .optional(),
    burns: yup
        .array(yup
        .object({
        assetId: yup.string().defined(),
        value: utils_1.YupUtils.currency({ min: 1n }).defined(),
    })
        .defined())
        .optional(),
    fee: utils_1.YupUtils.currency({ min: 1n }).nullable().optional(),
    feeRate: utils_1.YupUtils.currency({ min: 1n }).nullable().optional(),
    expiration: yup.number().optional(),
    expirationDelta: yup.number().optional(),
    confirmations: yup.number().optional(),
    notes: yup.array(yup.string().defined()).optional(),
})
    .defined();
exports.CreateTransactionResponseSchema = yup
    .object({
    transaction: yup.string().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/createTransaction`, exports.CreateTransactionRequestSchema, async (request, node) => {
    const account = utils_2.getAccount(node.wallet, request.data.account);
    const params = {
        account: account,
        confirmations: request.data.confirmations,
        expiration: request.data.expiration,
        expirationDelta: request.data.expirationDelta,
    };
    if (request.data.outputs) {
        params.outputs = [];
        for (const output of request.data.outputs) {
            params.outputs.push({
                publicAddress: output.publicAddress,
                amount: utils_1.CurrencyUtils.decode(output.amount),
                memo: output.memo,
                assetId: output.assetId ? Buffer.from(output.assetId, 'hex') : rust_nodejs_1.Asset.nativeId(),
            });
        }
    }
    if (request.data.mints) {
        params.mints = [];
        for (const mint of request.data.mints) {
            if (mint.assetId == null && mint.name == null) {
                throw new errors_2.ValidationError('Must provide name or identifier to mint');
            }
            let name = mint.name;
            let metadata = mint.metadata ?? '';
            if (mint.assetId) {
                const assetId = Buffer.from(mint.assetId, 'hex');
                const asset = await account.getAsset(assetId);
                if (!asset) {
                    throw new errors_2.ValidationError(`Error minting: Asset ${mint.assetId} not found.`);
                }
                name = asset.name.toString('utf8');
                metadata = asset.metadata.toString('utf8');
            }
            assert_1.Assert.isNotUndefined(name);
            assert_1.Assert.isNotUndefined(metadata);
            params.mints.push({
                name,
                metadata,
                value: utils_1.CurrencyUtils.decode(mint.value),
            });
        }
    }
    if (request.data.burns) {
        params.burns = [];
        for (const burn of request.data.burns) {
            params.burns.push({
                assetId: burn.assetId ? Buffer.from(burn.assetId, 'hex') : rust_nodejs_1.Asset.nativeId(),
                value: utils_1.CurrencyUtils.decode(burn.value),
            });
        }
    }
    if (request.data.fee) {
        params.fee = utils_1.CurrencyUtils.decode(request.data.fee);
    }
    else if (request.data.feeRate) {
        params.feeRate = utils_1.CurrencyUtils.decode(request.data.feeRate);
    }
    else {
        assert_1.Assert.isNotNull(node.wallet.nodeClient);
        const avgFeeRateResponse = await node.wallet.nodeClient.chain.estimateFeeRate({
            priority: 'average',
        });
        params.feeRate = utils_1.CurrencyUtils.decode(avgFeeRateResponse.content.rate);
    }
    if (request.data.notes) {
        params.notes = [];
        for (const noteHash of request.data.notes) {
            params.notes.push(Buffer.from(noteHash, 'hex'));
        }
    }
    try {
        const transaction = await node.wallet.createTransaction(params);
        const serialized = rawTransaction_1.RawTransactionSerde.serialize(transaction);
        request.end({
            transaction: serialized.toString('hex'),
        });
    }
    catch (e) {
        if (e instanceof errors_1.NotEnoughFundsError) {
            throw new errors_2.ValidationError(e.message, 400, errors_2.ERROR_CODES.INSUFFICIENT_BALANCE);
        }
        throw e;
    }
});
//# sourceMappingURL=createTransaction.js.map