"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAccountTransactionsResponseSchema = exports.GetAccountTransactionsRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const primitives_1 = require("../../../primitives");
const wallet_1 = require("../../../wallet");
const chain_1 = require("../chain");
const router_1 = require("../router");
const types_1 = require("./types");
const utils_1 = require("./utils");
exports.GetAccountTransactionsRequestSchema = yup
    .object({
    account: yup.string().trim(),
    hash: yup.string().notRequired(),
    sequence: yup.number().min(primitives_1.GENESIS_BLOCK_SEQUENCE).notRequired(),
    limit: yup.number().notRequired(),
    offset: yup.number().notRequired(),
    confirmations: yup.number().notRequired(),
    notes: yup.boolean().notRequired().default(false),
    spends: yup.boolean().notRequired().default(false),
})
    .defined();
exports.GetAccountTransactionsResponseSchema = yup
    .object({
    hash: yup.string().defined(),
    status: yup.string().oneOf(Object.values(wallet_1.TransactionStatus)).defined(),
    confirmations: yup.number().defined(),
    type: yup.string().oneOf(Object.values(wallet_1.TransactionType)).defined(),
    fee: yup.string().defined(),
    blockHash: yup.string().optional(),
    blockSequence: yup.number().optional(),
    notesCount: yup.number().defined(),
    spendsCount: yup.number().defined(),
    mintsCount: yup.number().defined(),
    burnsCount: yup.number().defined(),
    expiration: yup.number().defined(),
    timestamp: yup.number().defined(),
    submittedSequence: yup.number().defined(),
    assetBalanceDeltas: yup
        .array(yup
        .object({
        assetId: yup.string().defined(),
        assetName: yup.string().defined(),
        delta: yup.string().defined(),
    })
        .defined())
        .defined(),
    notes: yup.array(types_1.RpcWalletNoteSchema).defined(),
    spends: yup.array(chain_1.RpcSpendSchema).defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/getAccountTransactions`, exports.GetAccountTransactionsRequestSchema, async (request, node) => {
    const account = utils_1.getAccount(node.wallet, request.data.account);
    const headSequence = (await account.getHead())?.sequence ?? null;
    const options = {
        headSequence,
        confirmations: request.data.confirmations ?? node.config.get('confirmations'),
    };
    if (request.data.hash) {
        const hashBuffer = Buffer.from(request.data.hash, 'hex');
        const transaction = await account.getTransaction(hashBuffer);
        if (transaction) {
            await streamTransaction(request, node.wallet, account, transaction, options);
        }
        request.end();
        return;
    }
    let count = 0;
    let offset = 0;
    const transactions = request.data.sequence
        ? account.getTransactionsBySequence(request.data.sequence)
        : account.getTransactionsByTime();
    for await (const transaction of transactions) {
        if (request.closed) {
            break;
        }
        if (request.data.offset && offset < request.data.offset) {
            offset++;
            continue;
        }
        if (request.data.limit && count === request.data.limit) {
            break;
        }
        await streamTransaction(request, node.wallet, account, transaction, options);
        count++;
    }
    request.end();
});
const streamTransaction = async (request, wallet, account, transaction, options) => {
    const serializedTransaction = utils_1.serializeRpcAccountTransaction(transaction);
    const assetBalanceDeltas = await utils_1.getAssetBalanceDeltas(account, transaction);
    let notes = undefined;
    if (request.data.notes) {
        notes = await utils_1.getAccountDecryptedNotes(wallet.workerPool, account, transaction);
    }
    let spends = undefined;
    if (request.data.spends) {
        spends = transaction.transaction.spends.map((spend) => ({
            nullifier: spend.nullifier.toString('hex'),
            commitment: spend.commitment.toString('hex'),
            size: spend.size,
        }));
    }
    const status = await wallet.getTransactionStatus(account, transaction, options);
    const type = await wallet.getTransactionType(account, transaction);
    const serialized = {
        ...serializedTransaction,
        assetBalanceDeltas,
        status,
        confirmations: options.confirmations,
        type,
        notes,
        spends,
    };
    request.stream(serialized);
};
//# sourceMappingURL=getAccountTransactions.js.map