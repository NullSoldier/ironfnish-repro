"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportAccountResponseSchema = exports.ExportAccountRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const utils_1 = require("../../../utils");
const account_1 = require("../../../wallet/account/encoder/account");
const encoder_1 = require("../../../wallet/account/encoder/encoder");
const router_1 = require("../router");
const utils_2 = require("./utils");
exports.ExportAccountRequestSchema = yup
    .object({
    account: yup.string().trim(),
    viewOnly: yup.boolean().optional().default(false),
    format: yup.string().oneOf(Object.values(encoder_1.AccountFormat)).optional(),
    language: yup.string().oneOf(utils_1.LanguageUtils.LANGUAGE_KEYS).optional(),
})
    .defined();
exports.ExportAccountResponseSchema = yup
    .object({
    account: yup.mixed().nullable(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/exportAccount`, exports.ExportAccountRequestSchema, (request, node) => {
    const account = utils_2.getAccount(node.wallet, request.data.account);
    const { id: _, ...accountInfo } = account.serialize();
    if (request.data.viewOnly) {
        accountInfo.spendingKey = null;
    }
    if (!request.data.format) {
        let createdAt = null;
        if (accountInfo.createdAt) {
            createdAt = {
                hash: accountInfo.createdAt.hash.toString('hex'),
                sequence: accountInfo.createdAt.sequence,
            };
        }
        request.end({ account: { ...accountInfo, createdAt } });
    }
    else {
        const encoded = account_1.encodeAccount(accountInfo, request.data.format, {
            language: request.data.language,
        });
        request.end({ account: encoded });
    }
});
//# sourceMappingURL=exportAccount.js.map