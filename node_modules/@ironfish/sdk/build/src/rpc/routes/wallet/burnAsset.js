"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurnAssetResponseSchema = exports.BurnAssetRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const utils_1 = require("../../../utils");
const router_1 = require("../router");
const utils_2 = require("./utils");
exports.BurnAssetRequestSchema = yup
    .object({
    account: yup.string().required(),
    assetId: yup.string().required(),
    fee: utils_1.YupUtils.currency({ min: 1n }).defined(),
    value: utils_1.YupUtils.currency({ min: 1n }).defined(),
    expiration: yup.number().optional(),
    expirationDelta: yup.number().optional(),
    confirmations: yup.number().optional(),
})
    .defined();
exports.BurnAssetResponseSchema = yup
    .object({
    assetId: yup.string().required(),
    hash: yup.string().required(),
    name: yup.string().required(),
    value: yup.string().required(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/burnAsset`, exports.BurnAssetRequestSchema, async (request, node) => {
    const account = utils_2.getAccount(node.wallet, request.data.account);
    const fee = utils_1.CurrencyUtils.decode(request.data.fee);
    const value = utils_1.CurrencyUtils.decode(request.data.value);
    const assetId = Buffer.from(request.data.assetId, 'hex');
    const asset = await account.getAsset(assetId);
    assert_1.Assert.isNotUndefined(asset);
    const transaction = await node.wallet.burn(account, assetId, value, fee, request.data.expirationDelta ?? node.config.get('transactionExpirationDelta'), request.data.expiration, request.data.confirmations);
    assert_1.Assert.isEqual(transaction.burns.length, 1);
    const burn = transaction.burns[0];
    request.end({
        assetId: burn.assetId.toString('hex'),
        hash: transaction.hash().toString('hex'),
        name: asset.name.toString('hex'),
        value: utils_1.CurrencyUtils.encode(burn.value),
    });
});
//# sourceMappingURL=burnAsset.js.map