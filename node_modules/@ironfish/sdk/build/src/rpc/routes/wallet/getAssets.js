"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAssetsResponseSchema = exports.GetAssetsRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const utils_1 = require("../../../utils");
const router_1 = require("../router");
const utils_2 = require("./utils");
exports.GetAssetsRequestSchema = yup
    .object()
    .shape({
    account: yup.string(),
    confirmations: yup.number().optional(),
})
    .defined();
exports.GetAssetsResponseSchema = yup
    .object({
    createdTransactionHash: yup.string().defined(),
    id: yup.string().defined(),
    metadata: yup.string().defined(),
    name: yup.string().defined(),
    creator: yup.string().defined(),
    owner: yup.string().defined(),
    status: yup.string().defined(),
    nonce: yup.number().defined(),
    supply: yup.string().optional(),
    verification: yup
        .object({ status: yup.string().oneOf(['verified', 'unverified', 'unknown']).defined() })
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/getAssets`, exports.GetAssetsRequestSchema, async (request, node) => {
    const account = utils_2.getAccount(node.wallet, request.data.account);
    for await (const asset of account.getAssets()) {
        if (request.closed) {
            break;
        }
        request.stream({
            createdTransactionHash: asset.createdTransactionHash.toString('hex'),
            id: asset.id.toString('hex'),
            metadata: asset.metadata.toString('hex'),
            name: asset.name.toString('hex'),
            creator: asset.creator.toString('hex'),
            owner: asset.owner.toString('hex'),
            nonce: asset.nonce,
            status: await node.wallet.getAssetStatus(account, asset, {
                confirmations: request.data.confirmations,
            }),
            supply: asset.supply !== null ? utils_1.CurrencyUtils.encode(asset.supply) : undefined,
            verification: node.assetsVerifier.verify(asset.id),
        });
    }
    request.end();
});
//# sourceMappingURL=getAssets.js.map