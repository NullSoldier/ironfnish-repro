"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetBalanceResponseSchema = exports.GetBalanceRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const yup = __importStar(require("yup"));
const router_1 = require("../router");
const utils_1 = require("./utils");
exports.GetBalanceRequestSchema = yup
    .object({
    account: yup.string().optional().trim(),
    assetId: yup.string().optional().trim(),
    confirmations: yup.number().min(0).optional(),
})
    .optional();
exports.GetBalanceResponseSchema = yup
    .object({
    account: yup.string().defined(),
    assetId: yup.string().defined(),
    assetVerification: yup
        .object({ status: yup.string().oneOf(['verified', 'unverified', 'unknown']).defined() })
        .defined(),
    unconfirmed: yup.string().defined(),
    unconfirmedCount: yup.number().defined(),
    pending: yup.string().defined(),
    pendingCount: yup.number().defined(),
    confirmed: yup.string().defined(),
    available: yup.string().defined(),
    confirmations: yup.number().defined(),
    blockHash: yup.string().nullable(true).defined(),
    sequence: yup.number().nullable(true).defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/getBalance`, exports.GetBalanceRequestSchema, async (request, node) => {
    const confirmations = request.data?.confirmations ?? node.config.get('confirmations');
    const account = utils_1.getAccount(node.wallet, request.data?.account);
    let assetId = rust_nodejs_1.Asset.nativeId();
    if (request.data?.assetId) {
        assetId = Buffer.from(request.data.assetId, 'hex');
    }
    const balance = await node.wallet.getBalance(account, assetId, {
        confirmations,
    });
    request.end({
        account: account.name,
        assetId: assetId.toString('hex'),
        assetVerification: node.assetsVerifier.verify(assetId),
        confirmed: balance.confirmed.toString(),
        unconfirmed: balance.unconfirmed.toString(),
        unconfirmedCount: balance.unconfirmedCount,
        pending: balance.pending.toString(),
        available: balance.available.toString(),
        pendingCount: balance.pendingCount,
        confirmations: confirmations,
        blockHash: balance.blockHash?.toString('hex') ?? null,
        sequence: balance.sequence,
    });
});
//# sourceMappingURL=getBalance.js.map