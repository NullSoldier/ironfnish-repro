"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportAccountResponseSchema = exports.ImportAccountRequestSchema = exports.ImportError = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const uuid_1 = require("uuid");
const yup = __importStar(require("yup"));
const account_1 = require("../../../wallet/account/encoder/account");
const router_1 = require("../router");
const utils_1 = require("./utils");
class ImportError extends Error {
}
exports.ImportError = ImportError;
exports.ImportAccountRequestSchema = yup
    .object({
    rescan: yup.boolean().optional().default(true),
    name: yup.string().optional(),
    account: yup.mixed().defined(),
})
    .defined();
exports.ImportAccountResponseSchema = yup
    .object({
    name: yup.string().defined(),
    isDefaultAccount: yup.boolean().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.wallet}/importAccount`, exports.ImportAccountRequestSchema, async (request, node) => {
    let accountImport = null;
    if (typeof request.data.account === 'string') {
        accountImport = account_1.decodeAccount(request.data.account, {
            name: request.data.name,
        });
    }
    else {
        accountImport = utils_1.deserializeRpcAccountImport(request.data.account);
    }
    const account = await node.wallet.importAccount({
        id: uuid_1.v4(),
        ...accountImport,
    });
    if (request.data.rescan) {
        if (node.wallet.nodeClient) {
            void node.wallet.scanTransactions(undefined, true);
        }
    }
    else {
        await node.wallet.skipRescan(account);
    }
    let isDefaultAccount = false;
    if (!node.wallet.hasDefaultAccount) {
        await node.wallet.setDefaultAccount(account.name);
        isDefaultAccount = true;
    }
    request.end({
        name: account.name,
        isDefaultAccount,
    });
});
//# sourceMappingURL=importAccount.js.map