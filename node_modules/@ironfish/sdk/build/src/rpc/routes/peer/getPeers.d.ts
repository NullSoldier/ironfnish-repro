import * as yup from 'yup';
import { Connection } from '../../../network';
import { Features } from '../../../network/peers/peerFeatures';
declare type ConnectionState = Connection['state']['type'] | '';
export declare type PeerResponse = {
    state: string;
    identity: string | null;
    version: number | null;
    head: string | null;
    sequence: number | null;
    work: string | null;
    agent: string | null;
    name: string | null;
    address: string | null;
    port: number | null;
    error: string | null;
    connections: number;
    connectionWebSocket: ConnectionState;
    connectionWebSocketError: string;
    connectionWebRTC: ConnectionState;
    connectionWebRTCError: string;
    networkId: number | null;
    genesisBlockHash: string | null;
    features: Features | null;
};
export declare type GetPeersRequest = undefined | {
    stream?: boolean;
};
export declare type GetPeersResponse = {
    peers: Array<PeerResponse>;
};
export declare const GetPeersRequestSchema: yup.ObjectSchema<GetPeersRequest>;
export declare const GetPeersResponseSchema: yup.ObjectSchema<GetPeersResponse>;
export {};
//# sourceMappingURL=getPeers.d.ts.map