"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPeerResponseSchema = exports.GetPeerRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const router_1 = require("../router");
exports.GetPeerRequestSchema = yup
    .object({
    identity: yup.string().defined(),
    stream: yup.boolean().optional(),
})
    .defined();
exports.GetPeerResponseSchema = yup
    .object({
    peer: yup
        .object({
        state: yup.string().defined(),
        address: yup.string().nullable().defined(),
        port: yup.number().nullable().defined(),
        identity: yup.string().nullable().defined(),
        name: yup.string().nullable().defined(),
        head: yup.string().nullable().defined(),
        work: yup.string().nullable().defined(),
        sequence: yup.number().nullable().defined(),
        version: yup.number().nullable().defined(),
        agent: yup.string().nullable().defined(),
        error: yup.string().nullable().defined(),
        connections: yup.number().defined(),
        connectionWebSocket: yup.string().defined(),
        connectionWebSocketError: yup.string().defined(),
        connectionWebRTC: yup.string().defined(),
        connectionWebRTCError: yup.string().defined(),
        networkId: yup.number().nullable().defined(),
        genesisBlockHash: yup.string().nullable().defined(),
        features: yup
            .object({
            syncing: yup.boolean().defined(),
        })
            .nullable()
            .defined(),
    })
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.peer}/getPeer`, exports.GetPeerRequestSchema, (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const peerNetwork = node.peerNetwork;
    if (!peerNetwork) {
        request.end({ peer: null });
        return;
    }
    const peer = getPeer(peerNetwork, request.data.identity);
    if (!request.data.stream) {
        request.end({ peer });
        return;
    }
    request.stream({ peer });
    const interval = setInterval(() => {
        const peer = getPeer(peerNetwork, request.data.identity);
        request.stream({ peer });
    }, 1000);
    request.onClose.on(() => {
        clearInterval(interval);
    });
});
function getPeer(network, identity) {
    for (const peer of network.peerManager.peers) {
        if (peer.state.identity !== null && peer.state.identity.includes(identity)) {
            let connections = 0;
            let connectionWebRTC = '';
            let connectionWebSocket = '';
            let connectionWebRTCError = '';
            let connectionWebSocketError = '';
            if (peer.state.type !== 'DISCONNECTED') {
                if (peer.state.connections.webSocket) {
                    connectionWebSocket = peer.state.connections.webSocket.state.type;
                    connectionWebSocketError = String(peer.state.connections.webSocket.error || '');
                }
                if (peer.state.connections.webRtc) {
                    connectionWebRTC = peer.state.connections.webRtc.state.type;
                    connectionWebRTCError = String(peer.state.connections.webRtc.error || '');
                }
            }
            if (connectionWebSocket !== '') {
                connections++;
            }
            if (connectionWebRTC !== '') {
                connections++;
            }
            return {
                state: peer.state.type,
                address: peer.address,
                port: peer.port,
                identity: peer.state.identity,
                name: peer.name,
                version: peer.version,
                agent: peer.agent,
                head: peer.head?.toString('hex') || null,
                work: String(peer.work),
                sequence: peer.sequence !== null ? Number(peer.sequence) : null,
                connections: connections,
                error: peer.error !== null ? String(peer.error) : null,
                connectionWebSocket: connectionWebSocket,
                connectionWebSocketError: connectionWebSocketError,
                connectionWebRTC: connectionWebRTC,
                connectionWebRTCError: connectionWebRTCError,
                networkId: peer.networkId,
                genesisBlockHash: peer.genesisBlockHash?.toString('hex') || null,
                features: peer.features,
            };
        }
    }
    return null;
}
//# sourceMappingURL=getPeer.js.map