"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPeerMessagesResponseSchema = exports.GetPeerMessagesRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const types_1 = require("../../../network/types");
const node_1 = require("../../../node");
const serde_1 = require("../../../serde");
const router_1 = require("../router");
exports.GetPeerMessagesRequestSchema = yup
    .object({
    identity: yup.string().defined(),
    stream: yup.boolean().optional(),
})
    .defined();
exports.GetPeerMessagesResponseSchema = yup
    .object({
    messages: yup
        .array(yup
        .object({
        brokeringPeerDisplayName: yup.string().optional(),
        direction: yup.string().defined(),
        message: yup
            .object({
            payload: yup.string().defined(),
            type: yup.string().defined(),
        })
            .defined(),
        timestamp: yup.number().defined(),
        type: yup.string().defined(),
    })
        .defined())
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.peer}/getPeerMessages`, exports.GetPeerMessagesRequestSchema, (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const peerNetwork = node.peerNetwork;
    if (!peerNetwork) {
        request.end({ messages: [] });
        return;
    }
    const messages = getPeerMessages(peerNetwork, request.data.identity);
    if (!request.data.stream) {
        request.end({ messages });
        return;
    }
    request.stream({ messages });
    const interval = setInterval(() => {
        const messages = getPeerMessages(peerNetwork, request.data.identity);
        request.stream({ messages });
    }, 1000);
    request.onClose.on(() => {
        clearInterval(interval);
    });
});
function getPeerMessages(network, identity) {
    for (const peer of network.peerManager.peers) {
        if (peer.state.identity !== null && peer.state.identity.includes(identity)) {
            return peer.loggedMessages.map((msg) => ({
                ...msg,
                message: {
                    type: types_1.NetworkMessageType[msg.message.type],
                    payload: serde_1.IJSON.stringify(msg.message),
                },
            }));
        }
    }
    return [];
}
//# sourceMappingURL=getPeerMessages.js.map