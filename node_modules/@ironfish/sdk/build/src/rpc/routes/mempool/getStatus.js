"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMempoolStatusResponseSchema = exports.GetMempoolStatusRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const utils_1 = require("../../../utils");
const router_1 = require("../router");
exports.GetMempoolStatusRequestSchema = yup
    .object({
    stream: yup.boolean().optional(),
})
    .optional()
    .default({});
exports.GetMempoolStatusResponseSchema = yup
    .object({
    size: yup.number().defined(),
    sizeBytes: yup.number().defined(),
    maxSizeBytes: yup.number().defined(),
    evictions: yup.number().defined(),
    headSequence: yup.number().defined(),
    recentlyEvictedCache: yup
        .object({
        size: yup.number().defined(),
        maxSize: yup.number().defined(),
    })
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.mempool}/getStatus`, exports.GetMempoolStatusRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const status = getStatus(node);
    if (!request.data?.stream) {
        request.end(status);
        return;
    }
    request.stream(status);
    let stream = true;
    while (stream) {
        const status = getStatus(node);
        request.stream(status);
        await utils_1.PromiseUtils.sleep(500);
    }
    request.onClose.on(() => {
        stream = false;
    });
});
function getStatus(node) {
    const { memPool, metrics } = node;
    return {
        size: memPool.count(),
        sizeBytes: memPool.sizeBytes(),
        maxSizeBytes: memPool.maxSizeBytes,
        headSequence: memPool.head?.sequence || 0,
        evictions: metrics.memPoolEvictions.value,
        recentlyEvictedCache: memPool.recentlyEvictedCacheStats(),
    };
}
//# sourceMappingURL=getStatus.js.map