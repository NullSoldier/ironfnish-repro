"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetWorkersStatusResponseSchema = exports.GetWorkersStatusRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const utils_1 = require("../../../utils");
const workerMessage_1 = require("../../../workerPool/tasks/workerMessage");
const router_1 = require("../router");
exports.GetWorkersStatusRequestSchema = yup
    .object({
    stream: yup.boolean().optional(),
})
    .optional()
    .default({});
exports.GetWorkersStatusResponseSchema = yup
    .object({
    started: yup.boolean().defined(),
    workers: yup.number().defined(),
    queued: yup.number().defined(),
    capacity: yup.number().defined(),
    executing: yup.number().defined(),
    change: yup.number().defined(),
    speed: yup.number().defined(),
    jobs: yup
        .array(yup
        .object({
        name: yup.string().defined(),
        complete: yup.number().defined(),
        execute: yup.number().defined(),
        queue: yup.number().defined(),
        error: yup.number().defined(),
    })
        .defined())
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.worker}/getStatus`, exports.GetWorkersStatusRequestSchema, (request, node) => {
    const jobs = getWorkersStatus(node.workerPool);
    if (!request.data?.stream) {
        request.end(jobs);
        return;
    }
    request.stream(jobs);
    const interval = setInterval(() => {
        const jobs = getWorkersStatus(node.workerPool);
        request.stream(jobs);
    }, 1000);
    request.onClose.on(() => {
        clearInterval(interval);
    });
});
function getWorkersStatus(workerPool) {
    const result = [];
    for (const type of workerPool.stats.keys()) {
        if (type === workerMessage_1.WorkerMessageType.JobAborted || type === workerMessage_1.WorkerMessageType.Sleep) {
            continue;
        }
        const job = workerPool.stats.get(type);
        if (job) {
            result.push({ name: workerMessage_1.WorkerMessageType[type], ...job });
        }
    }
    return {
        started: workerPool.started,
        workers: workerPool.workers.length,
        executing: workerPool.executing,
        queued: workerPool.queued,
        capacity: workerPool.capacity,
        change: utils_1.MathUtils.round(workerPool.change?.rate5s ?? 0, 2),
        speed: utils_1.MathUtils.round(workerPool.speed?.rate5s ?? 0, 2),
        jobs: result,
    };
}
//# sourceMappingURL=getStatus.js.map