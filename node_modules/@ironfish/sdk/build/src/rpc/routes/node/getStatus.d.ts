import * as yup from 'yup';
export declare type GetNodeStatusRequest = undefined | {
    stream?: boolean;
};
export declare type GetNodeStatusResponse = {
    node: {
        status: 'started' | 'stopped' | 'error';
        version: string;
        git: string;
        nodeName: string;
        networkId: number;
    };
    cpu: {
        cores: number;
        percentRollingAvg: number;
        percentCurrent: number;
    };
    memory: {
        heapMax: number;
        heapTotal: number;
        heapUsed: number;
        rss: number;
        memFree: number;
        memTotal: number;
    };
    miningDirector: {
        status: 'started';
        miners: number;
        blocks: number;
        blockGraffiti: string;
        newEmptyBlockTemplateSpeed: number;
        newBlockTemplateSpeed: number;
        newBlockTransactionsSpeed: number;
    };
    memPool: {
        size: number;
        sizeBytes: number;
        maxSizeBytes: number;
        evictions: number;
        recentlyEvictedCache: {
            size: number;
            maxSize: number;
        };
    };
    blockchain: {
        synced: boolean;
        head: {
            hash: string;
            sequence: number;
        };
        headTimestamp: number;
        newBlockSpeed: number;
        dbSizeBytes: number;
    };
    blockSyncer: {
        status: 'stopped' | 'idle' | 'stopping' | 'syncing';
        syncing?: {
            blockSpeed: number;
            speed: number;
            downloadSpeed: number;
            progress: number;
        };
    };
    peerNetwork: {
        peers: number;
        isReady: boolean;
        inboundTraffic: number;
        outboundTraffic: number;
        publicIdentity: string;
    };
    telemetry: {
        status: 'started' | 'stopped';
        pending: number;
        submitted: number;
    };
    workers: {
        started: boolean;
        workers: number;
        queued: number;
        capacity: number;
        executing: number;
        change: number;
        speed: number;
    };
    accounts: {
        enabled: boolean;
        scanning?: {
            sequence: number;
            endSequence: number;
            startedAt: number;
        };
        head: {
            hash: string;
            sequence: number;
        };
    };
};
export declare const GetStatusRequestSchema: yup.ObjectSchema<GetNodeStatusRequest>;
export declare const GetStatusResponseSchema: yup.ObjectSchema<GetNodeStatusResponse>;
//# sourceMappingURL=getStatus.d.ts.map