"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStatusResponseSchema = exports.GetStatusRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const utils_1 = require("../../../utils");
const router_1 = require("../router");
exports.GetStatusRequestSchema = yup
    .object({
    stream: yup.boolean().optional(),
})
    .optional()
    .default({});
exports.GetStatusResponseSchema = yup
    .object({
    node: yup
        .object({
        status: yup.string().oneOf(['started', 'stopped', 'error']).defined(),
        version: yup.string().defined(),
        git: yup.string().defined(),
        nodeName: yup.string().defined(),
        networkId: yup.number().defined(),
    })
        .defined(),
    cpu: yup
        .object({
        cores: yup.number().defined(),
        percentRollingAvg: yup.number().defined(),
        percentCurrent: yup.number().defined(),
    })
        .defined(),
    memory: yup
        .object({
        heapMax: yup.number().defined(),
        heapTotal: yup.number().defined(),
        heapUsed: yup.number().defined(),
        rss: yup.number().defined(),
        memFree: yup.number().defined(),
        memTotal: yup.number().defined(),
    })
        .defined(),
    miningDirector: yup
        .object({
        status: yup.string().oneOf(['started']).defined(),
        miners: yup.number().defined(),
        blocks: yup.number().defined(),
        blockGraffiti: yup.string().defined(),
        newEmptyBlockTemplateSpeed: yup.number().defined(),
        newBlockTemplateSpeed: yup.number().defined(),
        newBlockTransactionsSpeed: yup.number().defined(),
    })
        .defined(),
    memPool: yup
        .object({
        size: yup.number().defined(),
        sizeBytes: yup.number().defined(),
        maxSizeBytes: yup.number().defined(),
        evictions: yup.number().defined(),
        recentlyEvictedCache: yup
            .object({
            size: yup.number().defined(),
            maxSize: yup.number().defined(),
        })
            .defined(),
    })
        .defined(),
    blockchain: yup
        .object({
        synced: yup.boolean().defined(),
        head: yup
            .object({
            hash: yup.string().defined(),
            sequence: yup.number().defined(),
        })
            .defined(),
        headTimestamp: yup.number().defined(),
        newBlockSpeed: yup.number().defined(),
        dbSizeBytes: yup.number().defined(),
    })
        .defined(),
    peerNetwork: yup
        .object({
        peers: yup.number().defined(),
        isReady: yup.boolean().defined(),
        inboundTraffic: yup.number().defined(),
        outboundTraffic: yup.number().defined(),
        publicIdentity: yup.string().defined(),
    })
        .defined(),
    blockSyncer: yup
        .object({
        status: yup.string().oneOf(['stopped', 'idle', 'stopping', 'syncing']).defined(),
        error: yup.string().optional(),
        syncing: yup
            .object({
            blockSpeed: yup.number().defined(),
            speed: yup.number().defined(),
            downloadSpeed: yup.number().defined(),
            progress: yup.number().defined(),
        })
            .optional(),
    })
        .defined(),
    telemetry: yup
        .object({
        status: yup.string().oneOf(['started', 'stopped']).defined(),
        pending: yup.number().defined(),
        submitted: yup.number().defined(),
    })
        .defined(),
    workers: yup
        .object({
        started: yup.boolean().defined(),
        workers: yup.number().defined(),
        capacity: yup.number().defined(),
        queued: yup.number().defined(),
        executing: yup.number().defined(),
        change: yup.number().defined(),
        speed: yup.number().defined(),
    })
        .defined(),
    accounts: yup
        .object({
        head: yup
            .object({
            hash: yup.string().defined(),
            sequence: yup.number().defined(),
        })
            .defined(),
        enabled: yup.boolean().defined(),
        scanning: yup
            .object({
            sequence: yup.number().defined(),
            endSequence: yup.number().defined(),
            startedAt: yup.number().defined(),
        })
            .optional(),
    })
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.node}/getStatus`, exports.GetStatusRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const status = getStatus(node);
    if (!request.data?.stream) {
        request.end(await status);
        return;
    }
    request.stream(await status);
    let stream = true;
    while (stream) {
        const status = getStatus(node);
        request.stream(await status);
        await utils_1.PromiseUtils.sleep(500);
    }
    request.onClose.on(() => {
        stream = false;
    });
});
async function getStatus(node) {
    let accountsScanning;
    if (node.wallet.scan !== null) {
        accountsScanning = {
            sequence: node.wallet.scan.sequence,
            endSequence: node.wallet.scan.endSequence,
            startedAt: node.wallet.scan.startedAt,
        };
    }
    const chainDBSizeBytes = await node.chain.blockchainDb.size();
    const status = {
        peerNetwork: {
            peers: node.metrics.p2p_PeersCount.value,
            isReady: node.peerNetwork.isReady,
            inboundTraffic: Math.max(node.metrics.p2p_InboundTraffic.rate1s, 0),
            outboundTraffic: Math.max(node.metrics.p2p_OutboundTraffic.rate1s, 0),
            publicIdentity: node.peerNetwork.localPeer.publicIdentity,
        },
        blockchain: {
            synced: node.chain.synced,
            head: {
                hash: node.chain.head.hash.toString('hex'),
                sequence: node.chain.head.sequence,
            },
            headTimestamp: node.chain.head.timestamp.getTime(),
            newBlockSpeed: node.metrics.chain_newBlock.avg,
            dbSizeBytes: chainDBSizeBytes,
        },
        node: {
            status: node.started ? 'started' : 'stopped',
            version: node.pkg.version,
            git: node.pkg.git,
            nodeName: node.config.get('nodeName'),
            networkId: node.internal.get('networkId'),
        },
        cpu: {
            cores: node.metrics.cpuCores,
            percentRollingAvg: node.metrics.cpuMeter.rollingAverage,
            percentCurrent: node.metrics.cpuMeter.current,
        },
        memory: {
            heapMax: node.metrics.heapMax,
            heapTotal: node.metrics.heapTotal.value,
            heapUsed: node.metrics.heapUsed.value,
            rss: node.metrics.rss.value,
            memFree: node.metrics.memFree.value,
            memTotal: node.metrics.memTotal,
        },
        miningDirector: {
            status: 'started',
            miners: node.miningManager.minersConnected,
            blocks: node.miningManager.blocksMined,
            blockGraffiti: node.config.get('blockGraffiti'),
            newEmptyBlockTemplateSpeed: node.metrics.mining_newEmptyBlockTemplate.avg,
            newBlockTemplateSpeed: node.metrics.mining_newBlockTemplate.avg,
            newBlockTransactionsSpeed: node.metrics.mining_newBlockTransactions.avg,
        },
        memPool: {
            size: node.metrics.memPoolSize.value,
            sizeBytes: node.memPool.sizeBytes(),
            maxSizeBytes: node.memPool.maxSizeBytes,
            evictions: Math.max(node.metrics.memPoolEvictions.value, 0),
            recentlyEvictedCache: {
                size: node.memPool.recentlyEvictedCacheStats().size,
                maxSize: node.memPool.recentlyEvictedCacheStats().maxSize,
            },
        },
        blockSyncer: {
            status: node.syncer.state,
            syncing: {
                blockSpeed: utils_1.MathUtils.round(node.chain.addSpeed.average, 2),
                speed: utils_1.MathUtils.round(node.syncer.speed.rollingRate1m, 2),
                downloadSpeed: utils_1.MathUtils.round(node.syncer.downloadSpeed.average, 2),
                progress: node.chain.getProgress(),
            },
        },
        telemetry: {
            status: node.telemetry.isStarted() ? 'started' : 'stopped',
            pending: node.telemetry.pending,
            submitted: node.telemetry.submitted,
        },
        workers: {
            started: node.workerPool.started,
            workers: node.workerPool.workers.length,
            executing: node.workerPool.executing,
            queued: node.workerPool.queued,
            capacity: node.workerPool.capacity,
            change: utils_1.MathUtils.round(node.workerPool.change?.rate5s ?? 0, 2),
            speed: utils_1.MathUtils.round(node.workerPool.speed?.rate5s ?? 0, 2),
        },
        accounts: {
            scanning: accountsScanning,
            enabled: node.config.get('enableWallet'),
            head: {
                hash: node.wallet.chainProcessor.hash?.toString('hex') ?? '',
                sequence: node.wallet.chainProcessor.sequence ?? -1,
            },
        },
    };
    return status;
}
//# sourceMappingURL=getStatus.js.map