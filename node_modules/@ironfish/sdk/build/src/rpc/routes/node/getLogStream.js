"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetLogStreamResponseSchema = exports.GetLogStreamRequestSchema = void 0;
const yup = __importStar(require("yup"));
const logger_1 = require("../../../logger");
const serde_1 = require("../../../serde");
const router_1 = require("../router");
exports.GetLogStreamRequestSchema = yup
    .object({})
    .notRequired()
    .default({});
exports.GetLogStreamResponseSchema = yup
    .object({
    level: yup.string().defined(),
    type: yup.string().defined(),
    tag: yup.string().defined(),
    args: yup.string().defined(),
    date: yup.string().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.node}/getLogStream`, exports.GetLogStreamRequestSchema, (request, node) => {
    const reporter = new logger_1.InterceptReporter((logObj) => {
        request.stream({
            level: String(logObj.level),
            type: logObj.type,
            tag: logObj.tag,
            args: serde_1.IJSON.stringify(logObj.args),
            date: logObj.date.toISOString(),
        });
    });
    node.logger.addReporter(reporter);
    request.onClose.on(() => {
        node.logger.removeReporter(reporter);
    });
});
//# sourceMappingURL=getLogStream.js.map