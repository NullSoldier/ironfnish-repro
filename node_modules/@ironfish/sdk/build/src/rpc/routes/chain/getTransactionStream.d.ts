import * as yup from 'yup';
interface Note {
    assetId: string;
    assetName: string;
    hash: string;
    value: string;
    memo: string;
}
interface Mint {
    assetId: string;
    assetName: string;
    value: string;
}
interface Burn {
    assetId: string;
    assetName: string;
    value: string;
}
interface Transaction {
    hash: string;
    isMinersFee: boolean;
    notes: Note[];
    mints: Mint[];
    burns: Burn[];
}
export declare type GetTransactionStreamRequest = {
    incomingViewKey: string;
    head?: string | null;
};
export declare type GetTransactionStreamResponse = {
    type: 'connected' | 'disconnected' | 'fork';
    head: {
        sequence: number;
    };
    block: {
        hash: string;
        previousBlockHash: string;
        sequence: number;
        timestamp: number;
    };
    transactions: Transaction[];
};
export declare const GetTransactionStreamRequestSchema: yup.ObjectSchema<GetTransactionStreamRequest>;
export declare const GetTransactionStreamResponseSchema: yup.ObjectSchema<GetTransactionStreamResponse>;
export {};
//# sourceMappingURL=getTransactionStream.d.ts.map