"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTransactionStreamResponseSchema = exports.GetTransactionStreamRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const chainProcessor_1 = require("../../../chainProcessor");
const node_1 = require("../../../node");
const utils_1 = require("../../../utils");
const promise_1 = require("../../../utils/promise");
const validator_1 = require("../../../wallet/validator");
const errors_1 = require("../../adapters/errors");
const router_1 = require("../router");
const NoteSchema = yup
    .object()
    .shape({
    assetId: yup.string().required(),
    assetName: yup.string().required(),
    hash: yup.string().required(),
    value: yup.string().required(),
    memo: yup.string().required(),
})
    .required();
const MintSchema = yup
    .object()
    .shape({
    assetId: yup.string().required(),
    assetName: yup.string().required(),
    value: yup.string().required(),
})
    .required();
const BurnSchema = yup
    .object()
    .shape({
    assetId: yup.string().required(),
    assetName: yup.string().required(),
    value: yup.string().required(),
})
    .required();
const TransactionSchema = yup
    .object()
    .shape({
    hash: yup.string().required(),
    isMinersFee: yup.boolean().required(),
    notes: yup.array().of(NoteSchema).required(),
    mints: yup.array().of(MintSchema).required(),
    burns: yup.array().of(BurnSchema).required(),
})
    .required();
exports.GetTransactionStreamRequestSchema = yup
    .object({
    incomingViewKey: yup.string().required(),
    head: yup.string().nullable().optional(),
})
    .required();
exports.GetTransactionStreamResponseSchema = yup
    .object({
    transactions: yup.array().of(TransactionSchema).required(),
    type: yup.string().oneOf(['connected', 'disconnected', 'fork']).required(),
    block: yup
        .object({
        hash: yup.string().required(),
        sequence: yup.number().required(),
        timestamp: yup.number().required(),
        previousBlockHash: yup.string().required(),
    })
        .defined(),
    head: yup
        .object({
        sequence: yup.number().required(),
    })
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/getTransactionStream`, exports.GetTransactionStreamRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    if (!validator_1.isValidIncomingViewKey(request.data.incomingViewKey)) {
        throw new errors_1.ValidationError(`incomingViewKey is not valid`);
    }
    const head = request.data.head ? Buffer.from(request.data.head, 'hex') : null;
    if (head && !(await node.chain.hasBlock(head))) {
        throw new errors_1.ValidationError(`Block with hash ${String(request.data.head)} was not found in the chain`);
    }
    const processor = new chainProcessor_1.ChainProcessor({
        chain: node.chain,
        logger: node.logger,
        head: head,
    });
    const processBlock = async (block, type) => {
        const transactions = [];
        for (const tx of block.transactions) {
            const notes = new Array();
            const mints = new Array();
            const burns = new Array();
            for (const note of tx.notes) {
                const decryptedNote = note.decryptNoteForOwner(request.data.incomingViewKey);
                if (decryptedNote) {
                    const assetValue = await node.chain.getAssetById(decryptedNote.assetId());
                    notes.push({
                        value: utils_1.CurrencyUtils.encode(decryptedNote.value()),
                        memo: decryptedNote.memo(),
                        assetId: decryptedNote.assetId().toString('hex'),
                        assetName: assetValue?.name.toString('hex') || '',
                        hash: decryptedNote.hash().toString('hex'),
                    });
                }
            }
            for (const burn of tx.burns) {
                const assetValue = await node.chain.getAssetById(burn.assetId);
                burns.push({
                    value: utils_1.CurrencyUtils.encode(burn.value),
                    assetId: burn.assetId.toString('hex'),
                    assetName: assetValue?.name.toString('hex') || '',
                });
            }
            for (const mint of tx.mints) {
                mints.push({
                    value: utils_1.CurrencyUtils.encode(mint.value),
                    assetId: mint.asset.id().toString('hex'),
                    assetName: mint.asset.name().toString('hex'),
                });
            }
            if (notes.length || burns.length || mints.length) {
                transactions.push({
                    hash: tx.hash().toString('hex'),
                    isMinersFee: tx.isMinersFee(),
                    notes: notes,
                    burns: burns,
                    mints: mints,
                });
            }
        }
        request.stream({
            type,
            transactions,
            block: {
                hash: block.header.hash.toString('hex'),
                sequence: block.header.sequence,
                timestamp: block.header.timestamp.valueOf(),
                previousBlockHash: block.header.previousBlockHash.toString('hex'),
            },
            head: {
                sequence: node.chain.head.sequence,
            },
        });
    };
    const onAdd = async (header) => {
        const block = await node.chain.getBlock(header);
        assert_1.Assert.isNotNull(block);
        await processBlock(block, 'connected');
    };
    const onRemove = async (header) => {
        const block = await node.chain.getBlock(header);
        assert_1.Assert.isNotNull(block);
        await processBlock(block, 'disconnected');
    };
    const onFork = async (block) => {
        await processBlock(block, 'fork');
    };
    const abortController = new AbortController();
    processor.onAdd.on(onAdd);
    processor.onRemove.on(onRemove);
    node.chain.onForkBlock.on(onFork);
    request.onClose.on(() => {
        abortController.abort();
        processor.onAdd.off(onAdd);
        processor.onRemove.off(onRemove);
        node.chain.onForkBlock.off(onFork);
    });
    while (!request.closed) {
        await processor.update({ signal: abortController.signal });
        await promise_1.PromiseUtils.sleep(1000);
    }
    request.end();
});
//# sourceMappingURL=getTransactionStream.js.map