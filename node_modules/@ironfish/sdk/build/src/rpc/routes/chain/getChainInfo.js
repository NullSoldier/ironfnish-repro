"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetChainInfoResponseSchema = exports.GetChainInfoRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const block_1 = require("../../../primitives/block");
const serde_1 = require("../../../serde");
const router_1 = require("../router");
exports.GetChainInfoRequestSchema = yup
    .mixed()
    .oneOf([undefined]);
exports.GetChainInfoResponseSchema = yup
    .object({
    currentBlockIdentifier: yup
        .object({ index: yup.string().defined(), hash: yup.string().defined() })
        .defined(),
    genesisBlockIdentifier: yup
        .object({ index: yup.string().defined(), hash: yup.string().defined() })
        .defined(),
    oldestBlockIdentifier: yup
        .object({ index: yup.string().defined(), hash: yup.string().defined() })
        .defined(),
    currentBlockTimestamp: yup.number().defined(),
})
    .defined();
/**
 * Get current, heaviest and genesis block identifiers
 */
router_1.routes.register(`${router_1.ApiNamespace.chain}/getChainInfo`, exports.GetChainInfoRequestSchema, (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    assert_1.Assert.isNotNull(node.chain.genesis, 'no genesis');
    const latestHeader = node.chain.latest;
    const heaviestHeader = node.chain.head;
    const oldestBlockIdentifier = {};
    if (heaviestHeader) {
        oldestBlockIdentifier.index = heaviestHeader.sequence.toString();
        oldestBlockIdentifier.hash = serde_1.BlockHashSerdeInstance.serialize(heaviestHeader.hash);
    }
    let currentBlockTimestamp = Number();
    const currentBlockIdentifier = {};
    if (latestHeader) {
        currentBlockTimestamp = Number(latestHeader.timestamp);
        currentBlockIdentifier.index = latestHeader.sequence.toString();
        currentBlockIdentifier.hash = serde_1.BlockHashSerdeInstance.serialize(latestHeader.hash);
    }
    const genesisBlockIdentifier = {};
    genesisBlockIdentifier.index = block_1.GENESIS_BLOCK_SEQUENCE.toString();
    genesisBlockIdentifier.hash = serde_1.BlockHashSerdeInstance.serialize(node.chain.genesis.hash);
    request.end({
        currentBlockIdentifier,
        oldestBlockIdentifier,
        genesisBlockIdentifier,
        currentBlockTimestamp,
    });
});
//# sourceMappingURL=getChainInfo.js.map