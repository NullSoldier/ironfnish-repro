"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetBlockResponseSchema = exports.GetBlockRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const block_1 = require("../../../primitives/block");
const utils_1 = require("../../../utils");
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
exports.GetBlockRequestSchema = yup
    .object()
    .shape({
    search: yup.string(),
    hash: yup.string(),
    sequence: yup.number(),
    confirmations: yup.number().min(0).optional(),
    serialized: yup.boolean().optional(),
})
    .defined();
exports.GetBlockResponseSchema = yup
    .object({
    block: yup
        .object({
        graffiti: yup.string().defined(),
        difficulty: yup.string().defined(),
        hash: yup.string().defined(),
        previousBlockHash: yup.string().defined(),
        sequence: yup.number().defined(),
        timestamp: yup.number().defined(),
        noteSize: yup.number().defined(),
        noteCommitment: yup.string().defined(),
        transactions: yup
            .array(yup
            .object({
            fee: yup.string().defined(),
            hash: yup.string().defined(),
            signature: yup.string().defined(),
            notes: yup.number().defined(),
            spends: yup.number().defined(),
            serialized: yup.string().optional(),
        })
            .defined())
            .defined(),
    })
        .defined(),
    metadata: yup
        .object({
        main: yup.boolean().defined(),
        confirmed: yup.boolean().defined(),
    })
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/getBlock`, exports.GetBlockRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    let header = null;
    let error = '';
    const confirmations = request.data.confirmations ?? node.config.get('confirmations');
    if (request.data.search) {
        const search = request.data.search.trim();
        const num = Number(search);
        if (Number.isInteger(num)) {
            request.data.sequence = num;
        }
        else {
            request.data.hash = search;
        }
    }
    // Use negative numbers to start from the head of the chain
    if (request.data.sequence && request.data.sequence < 0) {
        request.data.sequence = Math.max(node.chain.head.sequence + request.data.sequence + 1, block_1.GENESIS_BLOCK_SEQUENCE);
    }
    if (request.data.hash) {
        const hash = Buffer.from(request.data.hash, 'hex');
        header = await node.chain.getHeader(hash);
        error = `No block found with hash ${request.data.hash}`;
    }
    if (request.data.sequence && !header) {
        header = await node.chain.getHeaderAtSequence(request.data.sequence);
        error = `No block found with sequence ${request.data.sequence}`;
    }
    if (!header) {
        throw new adapters_1.NotFoundError(error);
    }
    if (header.noteSize === null) {
        throw new adapters_1.ValidationError('Block header was saved to database without a note size');
    }
    const block = await node.chain.getBlock(header);
    if (!block) {
        throw new adapters_1.NotFoundError(`No block with header ${header.hash.toString('hex')}`);
    }
    const transactions = [];
    for (const tx of block.transactions) {
        const fee = tx.fee();
        transactions.push({
            signature: tx.transactionSignature().toString('hex'),
            hash: tx.hash().toString('hex'),
            fee: fee.toString(),
            spends: tx.spends.length,
            notes: tx.notes.length,
            ...(request.data?.serialized ? { serialized: tx.serialize().toString('hex') } : {}),
        });
    }
    const main = await node.chain.isHeadChain(header);
    const confirmed = node.chain.head.sequence - header.sequence >= confirmations;
    request.end({
        block: {
            graffiti: utils_1.BufferUtils.toHuman(header.graffiti),
            difficulty: header.target.toDifficulty().toString(),
            hash: header.hash.toString('hex'),
            previousBlockHash: header.previousBlockHash.toString('hex'),
            sequence: Number(header.sequence),
            timestamp: header.timestamp.valueOf(),
            noteSize: header.noteSize,
            noteCommitment: header.noteCommitment.toString('hex'),
            transactions: transactions,
        },
        metadata: {
            main: main,
            confirmed: confirmed,
        },
    });
});
//# sourceMappingURL=getBlock.js.map