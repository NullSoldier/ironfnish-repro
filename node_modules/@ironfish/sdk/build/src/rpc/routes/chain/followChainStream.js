"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FollowChainStreamResponseSchema = exports.FollowChainStreamRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const chainProcessor_1 = require("../../../chainProcessor");
const serializers_1 = require("../../../network/utils/serializers");
const node_1 = require("../../../node");
const serde_1 = require("../../../serde");
const utils_1 = require("../../../utils");
const router_1 = require("../router");
const types_1 = require("./types");
exports.FollowChainStreamRequestSchema = yup
    .object({
    head: yup.string().nullable().optional(),
    serialized: yup.boolean().optional(),
    wait: yup.boolean().optional().default(true),
    limit: yup.number().optional(),
})
    .optional();
exports.FollowChainStreamResponseSchema = yup
    .object({
    type: yup.string().oneOf(['connected', 'disconnected', 'fork']).defined(),
    head: yup
        .object({
        sequence: yup.number().defined(),
    })
        .defined(),
    block: yup
        .object({
        hash: yup.string().defined(),
        sequence: yup.number().defined(),
        previous: yup.string().defined(),
        timestamp: yup.number().defined(),
        graffiti: yup.string().defined(),
        size: yup.number().defined(),
        work: yup.string().defined(),
        main: yup.boolean().defined(),
        difficulty: yup.string().defined(),
        noteSize: yup.number().nullable().defined(),
        transactions: yup.array(types_1.RpcTransactionSchema).defined(),
    })
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/followChainStream`, exports.FollowChainStreamRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const head = request.data?.head ? Buffer.from(request.data.head, 'hex') : null;
    const processor = new chainProcessor_1.ChainProcessor({
        chain: node.chain,
        logger: node.logger,
        head: head,
    });
    let streamed = 0;
    const send = (block, type) => {
        const transactions = block.transactions.map((transaction) => ({
            ...(request.data?.serialized
                ? { serialized: transaction.serialize().toString('hex') }
                : {}),
            hash: serde_1.BlockHashSerdeInstance.serialize(transaction.hash()),
            size: serializers_1.getTransactionSize(transaction),
            fee: Number(transaction.fee()),
            expiration: transaction.expiration(),
            notes: transaction.notes.map((note) => ({
                commitment: note.hash().toString('hex'),
            })),
            spends: transaction.spends.map((spend) => ({
                nullifier: spend.nullifier.toString('hex'),
                commitment: spend.commitment.toString('hex'),
                size: spend.size,
            })),
            mints: transaction.mints.map((mint) => ({
                id: mint.asset.id().toString('hex'),
                metadata: utils_1.BufferUtils.toHuman(mint.asset.metadata()),
                name: utils_1.BufferUtils.toHuman(mint.asset.name()),
                creator: mint.asset.creator().toString('hex'),
                value: mint.value.toString(),
                transferOwnershipTo: mint.transferOwnershipTo?.toString('hex'),
            })),
            burns: transaction.burns.map((burn) => ({
                id: burn.assetId.toString('hex'),
                value: burn.value.toString(),
            })),
        }));
        request.stream({
            type: type,
            head: {
                sequence: node.chain.head.sequence,
            },
            block: {
                hash: block.header.hash.toString('hex'),
                sequence: block.header.sequence,
                previous: block.header.previousBlockHash.toString('hex'),
                graffiti: utils_1.BufferUtils.toHuman(block.header.graffiti),
                size: serializers_1.getBlockSize(block),
                work: block.header.work.toString(),
                main: type === 'connected',
                timestamp: block.header.timestamp.valueOf(),
                difficulty: block.header.target.toDifficulty().toString(),
                noteSize: block.header.noteSize,
                transactions,
            },
        });
        if (request.data?.limit && ++streamed >= request.data.limit) {
            onClose();
            request.end();
        }
    };
    const onClose = () => {
        abortController.abort();
        processor.onAdd.clear();
        processor.onRemove.clear();
        node.chain.onForkBlock.clear();
    };
    const onAdd = async (header) => {
        const block = await node.chain.getBlock(header);
        assert_1.Assert.isNotNull(block);
        send(block, 'connected');
    };
    const onRemove = async (header) => {
        const block = await node.chain.getBlock(header);
        assert_1.Assert.isNotNull(block);
        send(block, 'disconnected');
    };
    const onFork = (block) => {
        send(block, 'fork');
    };
    processor.onAdd.on(onAdd);
    processor.onRemove.on(onRemove);
    node.chain.onForkBlock.on(onFork);
    const abortController = new AbortController();
    request.onClose.on(onClose);
    while (!request.closed) {
        await processor.update({ signal: abortController.signal });
        if (!request.data?.wait) {
            onClose();
            request.end();
        }
        await utils_1.PromiseUtils.sleep(1000);
    }
    request.end();
});
//# sourceMappingURL=followChainStream.js.map