"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTransactionResponseSchema = exports.GetTransactionRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const serde_1 = require("../../../serde");
const utils_1 = require("../../../utils");
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
const types_1 = require("./types");
exports.GetTransactionRequestSchema = yup
    .object({
    transactionHash: yup.string().defined(),
    blockHash: yup.string(),
})
    .defined();
exports.GetTransactionResponseSchema = yup
    .object({
    fee: yup.string().defined(),
    expiration: yup.number().defined(),
    noteSize: yup.number().defined(),
    notesCount: yup.number().defined(),
    spendsCount: yup.number().defined(),
    signature: yup.string().defined(),
    notesEncrypted: yup.array(yup.string().defined()).defined(),
    spends: yup.array(types_1.RpcSpendSchema).defined(),
    notes: yup.array(types_1.RpcNoteSchema).defined(),
    mints: yup
        .array(yup
        .object({
        assetId: yup.string().defined(),
        value: yup.string().defined(),
        name: yup.string().defined(),
        metadata: yup.string().defined(),
    })
        .defined())
        .defined(),
    burns: yup
        .array(yup
        .object({
        assetId: yup.string().defined(),
        value: yup.string().defined(),
    })
        .defined())
        .defined(),
    blockHash: yup.string().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/getTransaction`, exports.GetTransactionRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    if (!request.data.transactionHash) {
        throw new adapters_1.ValidationError(`Missing transaction hash`);
    }
    const transactionHashBuffer = Buffer.from(request.data.transactionHash, 'hex');
    const blockHashBuffer = request.data.blockHash
        ? serde_1.BlockHashSerdeInstance.deserialize(request.data.blockHash)
        : await node.chain.getBlockHashByTransactionHash(transactionHashBuffer);
    if (!blockHashBuffer) {
        throw new adapters_1.NotFoundError(`No block hash found for transaction hash ${request.data.transactionHash}`);
    }
    const blockHeader = await node.chain.getHeader(blockHashBuffer);
    if (!blockHeader) {
        throw new adapters_1.NotFoundError(`No block found for block hash ${blockHashBuffer.toString('hex')}`);
    }
    const transactions = await node.chain.getBlockTransactions(blockHeader);
    const foundTransaction = transactions.find(({ transaction }) => transaction.hash().equals(transactionHashBuffer));
    if (!foundTransaction) {
        throw new adapters_1.NotFoundError(`Transaction not found on block ${blockHashBuffer.toString('hex')}`);
    }
    const { transaction, initialNoteIndex } = foundTransaction;
    const rawTransaction = {
        fee: transaction.fee().toString(),
        expiration: transaction.expiration(),
        noteSize: initialNoteIndex + transaction.notes.length,
        notesCount: transaction.notes.length,
        spendsCount: transaction.spends.length,
        signature: transaction.transactionSignature().toString('hex'),
        notesEncrypted: transaction.notes.map((note) => note.serialize().toString('hex')),
        notes: transaction.notes.map((note) => ({
            hash: note.hash().toString('hex'),
            serialized: note.serialize().toString('hex'),
        })),
        mints: transaction.mints.map((mint) => ({
            assetId: mint.asset.id().toString('hex'),
            value: utils_1.CurrencyUtils.encode(mint.value),
            name: mint.asset.name().toString('hex'),
            metadata: mint.asset.metadata().toString('hex'),
        })),
        burns: transaction.burns.map((burn) => ({
            assetId: burn.assetId.toString('hex'),
            value: utils_1.CurrencyUtils.encode(burn.value),
        })),
        spends: transaction.spends.map((spend) => ({
            nullifier: spend.nullifier.toString('hex'),
            commitment: spend.commitment.toString('hex'),
            size: spend.size,
        })),
        blockHash: blockHashBuffer.toString('hex'),
    };
    request.end(rawTransaction);
});
//# sourceMappingURL=getTransaction.js.map