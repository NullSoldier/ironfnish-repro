"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAssetResponse = exports.GetAssetRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const utils_1 = require("../../../utils");
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
exports.GetAssetRequestSchema = yup
    .object()
    .shape({
    id: yup.string(),
})
    .defined();
exports.GetAssetResponse = yup
    .object({
    createdTransactionHash: yup.string().defined(),
    id: yup.string().defined(),
    metadata: yup.string().defined(),
    name: yup.string().defined(),
    nonce: yup.number().defined(),
    creator: yup.string().defined(),
    owner: yup.string().defined(),
    supply: yup.string().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/getAsset`, exports.GetAssetRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const id = Buffer.from(request.data.id, 'hex');
    if (id.byteLength !== rust_nodejs_1.ASSET_ID_LENGTH) {
        throw new adapters_1.ValidationError(`Asset identifier is invalid length, expected ${rust_nodejs_1.ASSET_ID_LENGTH} but got ${id.byteLength}`);
    }
    const asset = await node.chain.getAssetById(id);
    if (!asset) {
        throw new adapters_1.NotFoundError(`No asset found with identifier ${request.data.id}`);
    }
    request.end({
        createdTransactionHash: asset.createdTransactionHash.toString('hex'),
        id: asset.id.toString('hex'),
        metadata: asset.metadata.toString('hex'),
        name: asset.name.toString('hex'),
        nonce: asset.nonce,
        creator: asset.creator.toString('hex'),
        owner: asset.owner.toString('hex'),
        supply: utils_1.CurrencyUtils.encode(asset.supply),
    });
});
//# sourceMappingURL=getAsset.js.map