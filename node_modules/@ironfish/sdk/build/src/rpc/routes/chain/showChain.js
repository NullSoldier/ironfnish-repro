"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShowChainResponseSchema = exports.ShowChainRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const router_1 = require("../router");
const utils_1 = require("./utils");
exports.ShowChainRequestSchema = yup
    .object({
    start: yup.number().nullable().optional(),
    stop: yup.number().nullable().optional(),
})
    .optional();
exports.ShowChainResponseSchema = yup
    .object({
    content: yup.array(yup.string().defined()).defined(),
})
    .defined();
/**
 * Render the chain as ani ASCII graph of the block chain
 */
router_1.routes.register(`${router_1.ApiNamespace.chain}/showChain`, exports.ShowChainRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const content = await utils_1.renderChain(node.chain, request.data?.start, request.data?.stop, {
        indent: '  ',
        work: false,
    });
    request.end({ content });
});
//# sourceMappingURL=showChain.js.map