"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNoteWitnessResponseSchema = exports.GetNoteWitnessRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const primitives_1 = require("../../../primitives");
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
exports.GetNoteWitnessRequestSchema = yup
    .object({
    index: yup.number().min(0).defined(),
    confirmations: yup.number().min(0),
})
    .defined();
exports.GetNoteWitnessResponseSchema = yup
    .object({
    treeSize: yup.number().defined(),
    rootHash: yup.string().defined(),
    authPath: yup
        .array(yup
        .object({
        side: yup.string().oneOf(['Left', 'Right']).defined(),
        hashOfSibling: yup.string().defined(),
    })
        .defined())
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/getNoteWitness`, exports.GetNoteWitnessRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const { chain } = node;
    const confirmations = request.data.confirmations ?? node.config.get('confirmations');
    const maxConfirmedSequence = Math.max(chain.head.sequence - confirmations, primitives_1.GENESIS_BLOCK_SEQUENCE);
    const maxConfirmedHeader = await chain.getHeaderAtSequence(maxConfirmedSequence);
    assert_1.Assert.isNotNull(maxConfirmedHeader);
    assert_1.Assert.isNotNull(maxConfirmedHeader?.noteSize);
    const witness = await chain.notes.witness(request.data.index, maxConfirmedHeader.noteSize);
    if (witness === null) {
        throw new adapters_1.ValidationError(`No confirmed notes exist with index ${request.data.index} in tree of size ${maxConfirmedHeader.noteSize}`);
    }
    const authPath = witness.authenticationPath.map((step) => {
        return {
            side: step.side,
            hashOfSibling: step.hashOfSibling.toString('hex'),
        };
    });
    request.end({
        treeSize: witness.treeSize(),
        rootHash: witness.rootHash.toString('hex'),
        authPath,
    });
});
//# sourceMappingURL=getNoteWitness.js.map