"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportChainStreamResponseSchema = exports.ExportChainStreamRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const blockchain_1 = require("../../../utils/blockchain");
const router_1 = require("../router");
exports.ExportChainStreamRequestSchema = yup
    .object({
    start: yup.number().nullable().optional(),
    stop: yup.number().nullable().optional(),
})
    .optional();
exports.ExportChainStreamResponseSchema = yup
    .object({
    start: yup.number().defined(),
    stop: yup.number().defined(),
    block: yup
        .object({
        hash: yup.string().defined(),
        seq: yup.number().defined(),
        prev: yup.string().defined(),
        main: yup.boolean().defined(),
        graffiti: yup.string().defined(),
        timestamp: yup.number().defined(),
        work: yup.string().defined(),
        difficulty: yup.string().defined(),
        head: yup.boolean().defined(),
        latest: yup.boolean().defined(),
    })
        .optional(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/exportChainStream`, exports.ExportChainStreamRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    assert_1.Assert.isNotNull(node.chain.head, 'head');
    assert_1.Assert.isNotNull(node.chain.latest, 'latest');
    const { start, stop } = blockchain_1.BlockchainUtils.getBlockRange(node.chain, {
        start: request.data?.start,
        stop: request.data?.stop,
    });
    request.stream({ start, stop });
    for (let i = start; i <= stop; ++i) {
        const blocks = await node.chain.getHeadersAtSequence(i);
        for (const block of blocks) {
            const isMain = await node.chain.isHeadChain(block);
            const result = {
                main: isMain,
                hash: block.hash.toString('hex'),
                seq: block.sequence,
                prev: block.previousBlockHash.toString('hex'),
                graffiti: block.graffiti.toString('ascii'),
                timestamp: block.timestamp.getTime(),
                work: block.work.toString(),
                difficulty: block.target.toDifficulty().toString(),
                head: block.hash.equals(node.chain.head.hash),
                latest: block.hash.equals(node.chain.latest.hash),
            };
            request.stream({ start, stop, block: result });
        }
    }
    request.end();
});
//# sourceMappingURL=exportChainStream.js.map