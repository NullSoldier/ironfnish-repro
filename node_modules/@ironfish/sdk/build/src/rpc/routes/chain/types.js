"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcTransactionSchema = exports.RpcSpendSchema = exports.RpcBurnSchema = exports.RpcMintSchema = exports.RpcNoteSchema = void 0;
const yup = __importStar(require("yup"));
exports.RpcNoteSchema = yup
    .object({
    hash: yup.string().defined(),
    serialized: yup.string().defined(),
})
    .defined();
exports.RpcMintSchema = yup
    .object({
    id: yup.string().defined(),
    metadata: yup.string().defined(),
    name: yup.string().defined(),
    creator: yup.string().defined(),
    value: yup.string().defined(),
    transferOwnershipTo: yup.string().optional(),
})
    .defined();
exports.RpcBurnSchema = yup
    .object({
    id: yup.string().defined(),
    value: yup.string().defined(),
})
    .defined();
exports.RpcSpendSchema = yup
    .object({
    nullifier: yup.string().defined(),
    commitment: yup.string().defined(),
    size: yup.number().defined(),
})
    .defined();
exports.RpcTransactionSchema = yup
    .object({
    serialized: yup.string().optional(),
    hash: yup.string().defined(),
    size: yup.number().defined(),
    fee: yup.number().defined(),
    expiration: yup.number().defined(),
    notes: yup
        .array(yup
        .object({
        commitment: yup.string().defined(),
    })
        .defined())
        .defined(),
    spends: yup.array(exports.RpcSpendSchema).defined(),
    mints: yup.array(exports.RpcMintSchema).defined(),
    burns: yup.array(exports.RpcBurnSchema).defined(),
})
    .defined();
//# sourceMappingURL=types.js.map