"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNetworkHashPowerResponseSchema = exports.GetNetworkHashPowerRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const node_1 = require("../../../node");
const utils_1 = require("../../../utils");
const adapters_1 = require("../../adapters");
const router_1 = require("../router");
exports.GetNetworkHashPowerRequestSchema = yup
    .object({
    blocks: yup.number().nullable().optional(),
    sequence: yup.number().nullable().optional(),
})
    .defined();
exports.GetNetworkHashPowerResponseSchema = yup
    .object({
    hashesPerSecond: yup.number().defined(),
    blocks: yup.number().defined(),
    sequence: yup.number().defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.chain}/getNetworkHashPower`, exports.GetNetworkHashPowerRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    let blocks = request.data?.blocks ?? 120;
    let sequence = request.data?.sequence ?? -1;
    if (blocks < 0) {
        throw new adapters_1.ValidationError('[blocks] value must be greater than 0');
    }
    let endBlock = node.chain.head;
    // If sequence is negative, it's relative to the head
    if (sequence < 0 && Math.abs(sequence) < node.chain.head.sequence) {
        sequence = node.chain.head.sequence + sequence;
    }
    // estimate network hps at specified sequence
    // if the sequence is out of bounds, use the head as the last block
    if (sequence > 0 && sequence < node.chain.head.sequence) {
        const blockAtSequence = await node.chain.getHeaderAtSequence(sequence);
        if (!blockAtSequence) {
            throw new Error(`No end block found at sequence ${sequence}`);
        }
        endBlock = blockAtSequence;
    }
    // Genesis block has sequence 1 - clamp blocks to prevent going out-of-bounds
    if (blocks >= endBlock.sequence) {
        blocks = endBlock.sequence - 1;
    }
    const startBlock = await node.chain.getHeaderAtSequence(endBlock.sequence - blocks);
    if (!startBlock) {
        throw new Error(`Failure to find start block ${endBlock.sequence - blocks}`);
    }
    const startTime = startBlock.timestamp.getTime();
    const endTime = endBlock.timestamp.getTime();
    // Don't divide by 0
    if (startTime === endTime) {
        request.end({
            hashesPerSecond: 0,
            blocks: blocks,
            sequence: endBlock.sequence,
        });
        return;
    }
    const workDifference = endBlock.work - startBlock.work;
    const timeDifference = BigInt(endTime - startTime); // in milliseconds
    const hashesPerSecond = utils_1.BigIntUtils.divide(workDifference, timeDifference) * 1000;
    request.end({
        hashesPerSecond,
        blocks,
        sequence: endBlock.sequence,
    });
});
//# sourceMappingURL=getNetworkHashPower.js.map