"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetConfigResponseSchema = exports.SetConfigRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const config_1 = require("../../../fileStores/config");
const router_1 = require("../router");
const uploadConfig_1 = require("./uploadConfig");
exports.SetConfigRequestSchema = yup
    .object({
    name: yup.string().defined(),
    value: yup.mixed().defined(),
})
    .defined();
exports.SetConfigResponseSchema = config_1.ConfigOptionsSchema;
router_1.routes.register(`${router_1.ApiNamespace.config}/setConfig`, exports.SetConfigRequestSchema, async (request, node) => {
    uploadConfig_1.setUnknownConfigValue(node.config, request.data.name, request.data.value);
    await node.config.save();
    request.end();
});
//# sourceMappingURL=setConfig.js.map