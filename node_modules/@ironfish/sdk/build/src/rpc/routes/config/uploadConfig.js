"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setUnknownConfigValue = exports.UploadConfigResponseSchema = exports.UploadConfigRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const config_1 = require("../../../fileStores/config");
const errors_1 = require("../../adapters/errors");
const router_1 = require("../router");
exports.UploadConfigRequestSchema = yup
    .object({ config: yup.mixed().required() })
    .defined();
exports.UploadConfigResponseSchema = config_1.ConfigOptionsSchema;
router_1.routes.register(`${router_1.ApiNamespace.config}/uploadConfig`, exports.UploadConfigRequestSchema, async (request, node) => {
    clearConfig(node.config);
    for (const key of Object.keys(request.data.config)) {
        if (Object.prototype.hasOwnProperty.call(request.data.config, key)) {
            setUnknownConfigValue(node.config, key, request.data.config[key], true);
        }
    }
    await node.config.save();
    request.end();
});
function clearConfig(config) {
    for (const key of Object.keys(config.loaded)) {
        const configKey = key;
        delete config.loaded[configKey];
    }
}
function setUnknownConfigValue(config, unknownKey, unknownValue, ignoreUnknownKey = false) {
    if (unknownKey && !(unknownKey in config.defaults)) {
        if (!ignoreUnknownKey) {
            throw new errors_1.ValidationError(`No config option ${String(unknownKey)}`);
        }
    }
    const sourceKey = unknownKey;
    let sourceValue = unknownValue;
    let targetValue = config.defaults[sourceKey];
    // Support keys that are undefined inside of the config from old config values or third parties adding config values
    if (targetValue === undefined) {
        targetValue = sourceValue;
    }
    let value = sourceValue;
    // Trim string values
    if (typeof sourceValue === 'string') {
        sourceValue = sourceValue.trim();
    }
    if (value === undefined) {
        config.clear(sourceKey);
        return;
    }
    if (typeof sourceValue !== typeof targetValue) {
        value = convertValue(sourceKey, sourceValue, targetValue);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    config.set(sourceKey, value);
}
exports.setUnknownConfigValue = setUnknownConfigValue;
// Expects string in CSV format with no brackets
function stringToStringArray(value) {
    if (value === '') {
        return [];
    }
    // Strip the brackets and split on commas
    const parsedValue = value.split(',');
    // Trim whitespace, trim leading/trailing quotes if necessary
    return parsedValue.map((v) => v.trim());
}
function convertValue(sourceKey, sourceValue, targetValue) {
    if (typeof sourceValue !== 'string') {
        throw new errors_1.ValidationError(`${sourceKey} has an invalid value: Cannot convert ${JSON.stringify(sourceValue)} from ${typeof sourceValue} to ${String(typeof targetValue)}`);
    }
    let targetType = null;
    if (typeof targetValue === 'number') {
        const converted = Number(sourceValue);
        if (!Number.isNaN(converted)) {
            return converted;
        }
        targetType = 'number';
    }
    else if (typeof targetValue === 'boolean') {
        const value = sourceValue.toLowerCase().trim();
        if (value === '1') {
            return true;
        }
        if (value === '0') {
            return false;
        }
        if (value === 'true') {
            return true;
        }
        if (value === 'false') {
            return false;
        }
        targetType = 'boolean';
    }
    else if (typeof targetValue === 'string') {
        return sourceValue;
    }
    else if (Array.isArray(targetValue)) {
        const result = stringToStringArray(sourceValue.trim());
        if (result !== null) {
            return result;
        }
        targetType = 'array';
    }
    throw new errors_1.ValidationError(`${sourceKey} has an invalid value: Could not convert ${JSON.stringify(sourceValue)} from ${typeof sourceValue} to ${String(targetType)}`);
}
//# sourceMappingURL=uploadConfig.js.map