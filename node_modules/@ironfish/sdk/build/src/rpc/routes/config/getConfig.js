"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetConfigResponseSchema = exports.GetConfigRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const config_1 = require("../../../fileStores/config");
const errors_1 = require("../../adapters/errors");
const router_1 = require("../router");
exports.GetConfigRequestSchema = yup
    .object({
    user: yup.boolean().optional(),
    name: yup.string().optional(),
})
    .optional();
exports.GetConfigResponseSchema = config_1.ConfigOptionsSchema;
router_1.routes.register(`${router_1.ApiNamespace.config}/getConfig`, exports.GetConfigRequestSchema, (request, node) => {
    if (request.data?.name && !(request.data.name in node.config.defaults)) {
        throw new errors_1.ValidationError(`No config option ${String(request.data.name)}`);
    }
    let pickKeys = undefined;
    if (!request.data?.user) {
        pickKeys = Object.keys(node.config.defaults);
    }
    if (request.data?.name) {
        pickKeys = [request.data.name];
    }
    const data = (request.data?.user
        ? JSON.parse(JSON.stringify(node.config.loaded))
        : JSON.parse(JSON.stringify(node.config.config, pickKeys)));
    request.end(data);
});
//# sourceMappingURL=getConfig.js.map