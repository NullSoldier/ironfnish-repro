"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmitBlockResponseSchema = exports.SubmitBlockRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const assert_1 = require("../../../assert");
const manager_1 = require("../../../mining/manager");
const node_1 = require("../../../node");
const router_1 = require("../router");
const serializedBlockTemplateSchema = yup
    .object({
    header: yup
        .object({
        sequence: yup.number().required(),
        previousBlockHash: yup.string().required(),
        noteCommitment: yup.string().required(),
        transactionCommitment: yup.string().required(),
        target: yup.string().required(),
        randomness: yup.string().required(),
        timestamp: yup.number().required(),
        graffiti: yup.string().required(),
    })
        .required()
        .defined(),
    transactions: yup.array().of(yup.string().required()).required().defined(),
})
    .required()
    .defined();
exports.SubmitBlockRequestSchema = serializedBlockTemplateSchema;
exports.SubmitBlockResponseSchema = yup
    .object({
    added: yup.boolean().defined(),
    reason: yup
        .string()
        .oneOf([
        'UNKNOWN_REQUEST',
        'CHAIN_CHANGED',
        'INVALID_BLOCK',
        'ADD_FAILED',
        'FORK',
        'SUCCESS',
    ])
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.miner}/submitBlock`, exports.SubmitBlockRequestSchema, async (request, node) => {
    assert_1.Assert.isInstanceOf(node, node_1.FullNode);
    const result = await node.miningManager.submitBlockTemplate(request.data);
    request.end({
        added: result === manager_1.MINED_RESULT.SUCCESS,
        reason: result,
    });
});
//# sourceMappingURL=submitBlock.js.map