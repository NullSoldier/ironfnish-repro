"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRpcStatusResponseSchema = exports.GetRpcStatusRequestSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const utils_1 = require("../../../utils");
const adapters_1 = require("../../adapters");
const socketAdapter_1 = require("../../adapters/socketAdapter/socketAdapter");
const router_1 = require("../router");
exports.GetRpcStatusRequestSchema = yup
    .object({
    stream: yup.boolean().optional(),
})
    .optional()
    .default({});
exports.GetRpcStatusResponseSchema = yup
    .object({
    started: yup.boolean().defined(),
    adapters: yup
        .array(yup
        .object({
        name: yup.string().defined(),
        inbound: yup.number().defined(),
        outbound: yup.number().defined(),
        readableBytes: yup.number().defined(),
        writableBytes: yup.number().defined(),
        readBytes: yup.number().defined(),
        writtenBytes: yup.number().defined(),
        clients: yup.number().defined(),
        pending: yup.array(yup.string().defined()).defined(),
    })
        .defined())
        .defined(),
})
    .defined();
router_1.routes.register(`${router_1.ApiNamespace.rpc}/getStatus`, exports.GetRpcStatusRequestSchema, async (request, node) => {
    const jobs = await getRpcStatus(node.rpc);
    if (!request.data?.stream) {
        request.end(jobs);
        return;
    }
    request.stream(jobs);
    while (!request.closed) {
        const jobs = await getRpcStatus(node.rpc);
        request.stream(jobs);
        await utils_1.PromiseUtils.sleep(1000);
    }
});
async function getRpcStatus(rpc) {
    const result = {
        started: rpc.isRunning,
        adapters: [],
    };
    for (const adapter of rpc.adapters) {
        if (!(adapter instanceof adapters_1.RpcIpcAdapter) &&
            !(adapter instanceof socketAdapter_1.RpcSocketAdapter) &&
            !(adapter instanceof adapters_1.RpcHttpAdapter)) {
            continue;
        }
        const formatted = {
            name: adapter.constructor.name,
            inbound: 0,
            outbound: 0,
            readableBytes: 0,
            writableBytes: 0,
            readBytes: 0,
            writtenBytes: 0,
            clients: 0,
            pending: new Array(),
        };
        if (adapter instanceof socketAdapter_1.RpcSocketAdapter) {
            for (const client of adapter.clients.values()) {
                formatted.readableBytes += client.socket.readableLength;
                formatted.writableBytes += client.socket.writableLength;
                formatted.readBytes += client.socket.bytesRead;
                formatted.writtenBytes += client.socket.bytesWritten;
                client.requests.forEach((r) => formatted.pending.push(r.route));
            }
            formatted.inbound = Math.max(adapter.inboundTraffic.rate1s, 0);
            formatted.outbound = Math.max(adapter.outboundTraffic.rate1s, 0);
            formatted.clients = adapter.clients.size;
        }
        else if (adapter instanceof adapters_1.RpcHttpAdapter) {
            formatted.inbound = Math.max(adapter.inboundTraffic.rate1s, 0);
            formatted.outbound = Math.max(adapter.outboundTraffic.rate1s, 0);
            formatted.readBytes = adapter.inboundBytes.value;
            formatted.writtenBytes = adapter.outboundBytes.value;
            adapter.requests.forEach((r) => {
                const route = adapter.formatRoute(r.req);
                if (route) {
                    formatted.pending.push(route);
                }
            });
            if (adapter.server) {
                const [promise, resolve] = utils_1.PromiseUtils.split();
                adapter.server.getConnections((err, count) => {
                    if (err) {
                        resolve(0);
                        return;
                    }
                    resolve(count);
                });
                formatted.clients = await promise;
            }
            // TODO: there is no equivalent of readableLength or writableLength for HTTP.
            // For now, readableLength and writableLength will be set to 0
        }
        result.adapters.push(formatted);
    }
    return result;
}
//# sourceMappingURL=getStatus.js.map