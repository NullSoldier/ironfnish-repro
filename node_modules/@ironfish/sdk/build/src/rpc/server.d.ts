import { InternalStore } from '../fileStores';
import { Logger } from '../logger';
import { IRpcAdapter } from './adapters';
import { ApiNamespace, RequestContext, Router } from './routes';
export declare class RpcServer {
    readonly internal: InternalStore;
    readonly context: RequestContext;
    readonly adapters: IRpcAdapter[];
    private _isRunning;
    private _startPromise;
    logger: Logger;
    constructor(context: RequestContext, internal: InternalStore, logger?: Logger);
    get isRunning(): boolean;
    /** Creates a new router from this RpcServer with the attached routes filtered by namespaces */
    getRouter(namespaces: ApiNamespace[]): Router;
    /** Starts the RPC server and tells any attached adapters to starts serving requests to the routing layer */
    start(): Promise<void>;
    /** Stops the RPC server and tells any attached adapters to stop serving requests to the routing layer */
    stop(): Promise<void>;
    /** Adds an adapter to the RPC server and starts it if the server has already been started */
    mount(adapter: IRpcAdapter): Promise<void>;
    /** Authenticate the RPC request */
    authenticate(requestAuthToken: string | undefined | null): boolean;
}
//# sourceMappingURL=server.d.ts.map