/// <reference types="node" />
import { Witness } from '../merkletree';
import { BurnDescription } from './burnDescription';
import { Note } from './note';
import { NoteEncrypted, NoteEncryptedHash, SerializedNoteEncryptedHash } from './noteEncrypted';
import { Transaction, TransactionVersion } from './transaction';
export interface MintData {
    name: string;
    metadata: string;
    value: bigint;
    transferOwnershipTo?: string;
}
export declare class RawTransaction {
    version: TransactionVersion;
    expiration: number | null;
    fee: bigint;
    mints: MintData[];
    burns: BurnDescription[];
    outputs: {
        note: Note;
    }[];
    spends: {
        note: Note;
        witness: Witness<NoteEncrypted, NoteEncryptedHash, NoteEncryptedHash, SerializedNoteEncryptedHash>;
    }[];
    postedSize(publicAddress: string): number;
    post(spendingKey: string): Transaction;
}
export declare class RawTransactionSerde {
    static serialize(raw: RawTransaction): Buffer;
    static deserialize(buffer: Buffer): RawTransaction;
    static getSize(raw: RawTransaction): number;
}
//# sourceMappingURL=rawTransaction.d.ts.map