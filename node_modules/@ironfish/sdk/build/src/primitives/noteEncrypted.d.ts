/// <reference types="node" />
import { NoteEncrypted as NativeNoteEncrypted } from '@ironfish/rust-nodejs';
import { Serde } from '../serde';
import { Note } from './note';
export declare type NoteEncryptedHash = Buffer;
export declare type SerializedNoteEncryptedHash = Buffer;
export declare type SerializedNoteEncrypted = Buffer;
export declare class NoteEncrypted {
    private readonly noteEncryptedSerialized;
    private readonly _noteCommitment;
    private noteEncrypted;
    private referenceCount;
    constructor(noteEncryptedSerialized: Buffer);
    static size: number;
    serialize(): Buffer;
    takeReference(): NativeNoteEncrypted;
    returnReference(): void;
    decryptNoteForOwner(ownerHexKey: string): Note | undefined;
    decryptNoteForSpender(spenderHexKey: string): Note | undefined;
    hash(): NoteEncryptedHash;
    equals(other: NoteEncrypted): boolean;
}
/**
 * Serde implementation to convert an encrypted note to its serialized form and back.
 */
export declare class NoteEncryptedSerde implements Serde<NoteEncrypted, SerializedNoteEncrypted> {
    equals(note1: NoteEncrypted, note2: NoteEncrypted): boolean;
    serialize(note: NoteEncrypted): SerializedNoteEncrypted;
    deserialize(serializedNote: SerializedNoteEncrypted): NoteEncrypted;
}
/**
 * Serde implementation to convert an encrypted note's hash to its serialized form and back.
 */
export declare class NoteEncryptedHashSerde implements Serde<NoteEncryptedHash, SerializedNoteEncryptedHash> {
    equals(hash1: NoteEncryptedHash, hash2: NoteEncryptedHash): boolean;
    serialize(note: NoteEncryptedHash): SerializedNoteEncryptedHash;
    deserialize(serializedNote: SerializedNoteEncryptedHash): NoteEncryptedHash;
}
//# sourceMappingURL=noteEncrypted.d.ts.map