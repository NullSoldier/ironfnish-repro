"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const format_1 = require("@fast-csv/format");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
class TestReporter {
    constructor(globalConfig, reporterConfig) {
        this.reporterConfig = {
            outputDirectory: '',
        };
        this.globalConfig = globalConfig;
        const outputDirectory = Object.entries(reporterConfig).find((entry) => entry[0] === 'outputDirectory');
        if (outputDirectory) {
            this.reporterConfig.outputDirectory = String(outputDirectory[1]);
        }
    }
    onTestResult(_test, testResult, _aggregatedResults) {
        const testFileName = path_1.default.parse(testResult.testFilePath).name;
        if (!testFileName.includes('perf')) {
            return;
        }
        if (!fs_1.existsSync(`${this.globalConfig.rootDir}/${this.reporterConfig.outputDirectory}`)) {
            fs_1.mkdirSync(`${this.globalConfig.rootDir}/${this.reporterConfig.outputDirectory}`);
        }
        const writeStream = fs_1.createWriteStream(`${this.globalConfig.rootDir}/${this.reporterConfig.outputDirectory}/${testFileName}.csv`);
        // filter console log
        const consoleOutputs = testResult.console?.filter((output) => output.type === 'log');
        // annotation headers for influx data
        let datatypeHeader = '#datatype,measurement,tag,tag,dateTime:RFC3339';
        let groupHeader = '#group,true,true,true,false';
        let defaultHeader = '#default,,,,';
        if (consoleOutputs && consoleOutputs[0]) {
            const entries = consoleOutputs[0].message.split(',');
            entries.forEach((input) => {
                const entry = input.split(':');
                const value = entry[1];
                if (value) {
                    if (value.includes('.')) {
                        datatypeHeader = datatypeHeader.concat(',double');
                    }
                    else {
                        datatypeHeader = datatypeHeader.concat(',long');
                    }
                    groupHeader = groupHeader.concat(',false');
                    defaultHeader = defaultHeader.concat(',');
                }
            });
        }
        writeStream.write(groupHeader + '\n');
        writeStream.write(datatypeHeader + '\n');
        writeStream.write(defaultHeader + '\n');
        const stream = format_1.format({ headers: true });
        stream.pipe(writeStream);
        testResult.testResults.forEach((result, i) => {
            const row = {
                '': '',
                _measurement: 'perf_test',
                testsuite: testFileName.split('.')[0],
                testname: result.title,
                _time: new Date(Date.now()).toISOString(),
            };
            if (consoleOutputs && consoleOutputs[i]) {
                const entries = consoleOutputs[i].message.split(',');
                entries.forEach((input) => {
                    const entry = input.split(':');
                    const key = entry[0];
                    const value = entry[1];
                    row[key.trim().replace(/\s/g, '').toLowerCase()] = value;
                });
            }
            stream.write(row);
        });
        writeStream.end();
    }
}
exports.default = TestReporter;
//# sourceMappingURL=testReporter.js.map