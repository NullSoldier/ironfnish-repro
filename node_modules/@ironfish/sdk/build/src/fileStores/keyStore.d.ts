import * as yup from 'yup';
import { Event } from '../event';
import { FileSystem } from '../fileSystems';
import { FileStore } from './fileStore';
export declare class KeyStore<TSchema extends Record<string, unknown>> {
    dataDir: string;
    files: FileSystem;
    storage: FileStore<TSchema>;
    config: Readonly<TSchema>;
    defaults: TSchema;
    loaded: Partial<TSchema>;
    overrides: Partial<TSchema>;
    keysLoaded: Set<keyof TSchema>;
    schema: yup.ObjectSchema<Partial<TSchema>> | undefined;
    readonly onConfigChange: Event<[key: keyof TSchema, value: TSchema[keyof TSchema]]>;
    constructor(files: FileSystem, configName: string, defaults: TSchema, dataDir: string, schema?: yup.ObjectSchema<TSchema | Partial<TSchema>>);
    load(): Promise<void>;
    save(): Promise<void>;
    clear<T extends keyof TSchema>(key: T): void;
    set<T extends keyof TSchema>(key: T, value: TSchema[T]): void;
    setMany(params: Partial<TSchema>): void;
    setOverride<T extends keyof TSchema>(key: T, value: TSchema[T]): void;
    get<T extends keyof TSchema>(key: T): TSchema[T];
    getArray<T extends keyof TSchema>(key: T): TSchema[T];
    /**
     * Returns true if the key is set, or false if its value is from the defaults
     */
    isSet<T extends keyof TSchema>(key: T): boolean;
}
//# sourceMappingURL=keyStore.d.ts.map