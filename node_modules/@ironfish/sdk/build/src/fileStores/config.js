"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = exports.ConfigOptionsSchema = exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_FAST = exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_AVERAGE = exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_SLOW = exports.DEFAULT_FEE_ESTIMATOR_MAX_BLOCK_HISTORY = exports.DEFAULT_NETWORK_ID = exports.DEFAULT_POOL_PORT = exports.DEFAULT_POOL_HOST = exports.DEFAULT_USE_RPC_HTTP = exports.DEFAULT_USE_RPC_TLS = exports.DEFAULT_USE_RPC_TCP = exports.DEFAULT_USE_RPC_IPC = exports.DEFAULT_DISCORD_INVITE = exports.DEFAULT_WEBSOCKET_PORT = exports.DEFAULT_DATA_DIR = exports.DEFAULT_CONFIG_NAME = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const utils_1 = require("../utils");
const keyStore_1 = require("./keyStore");
exports.DEFAULT_CONFIG_NAME = 'config.json';
exports.DEFAULT_DATA_DIR = '~/.ironfish';
exports.DEFAULT_WEBSOCKET_PORT = 9033;
exports.DEFAULT_DISCORD_INVITE = 'https://discord.ironfish.network';
exports.DEFAULT_USE_RPC_IPC = true;
exports.DEFAULT_USE_RPC_TCP = false;
exports.DEFAULT_USE_RPC_TLS = true;
// TODO(daniel): Setting this to false until we can get HTTPS + basic auth
exports.DEFAULT_USE_RPC_HTTP = false;
exports.DEFAULT_POOL_HOST = '::';
exports.DEFAULT_POOL_PORT = 9034;
exports.DEFAULT_NETWORK_ID = 1;
exports.DEFAULT_FEE_ESTIMATOR_MAX_BLOCK_HISTORY = 10;
exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_SLOW = 10;
exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_AVERAGE = 20;
exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_FAST = 30;
const MEGABYTES = 1000 * 1000;
exports.ConfigOptionsSchema = yup
    .object({
    bootstrapNodes: yup.array().of(yup.string().defined()),
    p2pStunServers: yup.array().of(yup.string().defined()),
    databaseMigrate: yup.boolean(),
    enableWallet: yup.boolean(),
    editor: yup.string().trim(),
    enableListenP2P: yup.boolean(),
    enableLogFile: yup.boolean(),
    enableRpc: yup.boolean(),
    enableRpcIpc: yup.boolean(),
    enableRpcTcp: yup.boolean(),
    enableRpcTls: yup.boolean(),
    enableRpcHttp: yup.boolean(),
    enableSyncing: yup.boolean(),
    enableTelemetry: yup.boolean(),
    enableMetrics: yup.boolean(),
    enableAssetVerification: yup.boolean(),
    getFundsApi: yup.string(),
    ipcPath: yup.string().trim(),
    miningForce: yup.boolean(),
    logPeerMessages: yup.boolean(),
    // validated separately by logLevelParser
    logLevel: yup.string(),
    // not applying a regex pattern to avoid getting out of sync with logic
    // to parse logPrefix
    logPrefix: yup.string(),
    blockGraffiti: yup.string(),
    nodeName: yup.string(),
    nodeWorkers: yup.number().integer().min(-1),
    nodeWorkersMax: yup.number().integer().min(-1),
    p2pSimulateLatency: utils_1.YupUtils.isPositiveInteger,
    peerPort: utils_1.YupUtils.isPort,
    rpcTcpHost: yup.string().trim(),
    rpcTcpPort: utils_1.YupUtils.isPort,
    tlsKeyPath: yup.string().trim(),
    tlsCertPath: yup.string().trim(),
    rpcHttpHost: yup.string().trim(),
    rpcHttpPort: utils_1.YupUtils.isPort,
    maxPeers: utils_1.YupUtils.isPositiveInteger,
    minPeers: utils_1.YupUtils.isPositiveInteger,
    targetPeers: yup.number().integer().min(1),
    telemetryApi: yup.string(),
    assetVerificationApi: yup.string(),
    generateNewIdentity: yup.boolean(),
    transactionExpirationDelta: utils_1.YupUtils.isPositiveInteger,
    blocksPerMessage: utils_1.YupUtils.isPositiveInteger,
    minerBatchSize: utils_1.YupUtils.isPositiveInteger,
    confirmations: utils_1.YupUtils.isPositiveInteger,
    poolName: yup.string(),
    poolAccountName: yup.string().optional(),
    poolBanning: yup.boolean(),
    poolHost: yup.string().trim(),
    poolPort: utils_1.YupUtils.isPort,
    poolDifficulty: yup.string(),
    poolStatusNotificationInterval: utils_1.YupUtils.isPositiveInteger,
    poolRecentShareCutoff: utils_1.YupUtils.isPositiveInteger,
    poolPayoutPeriodDuration: utils_1.YupUtils.isPositiveInteger,
    poolDiscordWebhook: yup.string(),
    poolMaxConnectionsPerIp: utils_1.YupUtils.isPositiveInteger,
    poolLarkWebhook: yup.string(),
    jsonLogs: yup.boolean(),
    explorerBlocksUrl: utils_1.YupUtils.isUrl,
    explorerTransactionsUrl: utils_1.YupUtils.isUrl,
    feeEstimatorMaxBlockHistory: utils_1.YupUtils.isPositiveInteger,
    feeEstimatorPercentileSlow: utils_1.YupUtils.isPositiveInteger,
    feeEstimatorPercentileAverage: utils_1.YupUtils.isPositiveInteger,
    feeEstimatorPercentileFast: utils_1.YupUtils.isPositiveInteger,
    networkId: yup.number().integer().min(0),
    customNetwork: yup.string().trim(),
    maxSyncedAgeBlocks: yup.number().integer().min(0),
    mempoolMaxSizeBytes: yup
        .number()
        .integer()
        .min(20 * MEGABYTES),
    memPoolRecentlyEvictedCacheSize: yup.number().integer(),
    networkDefinitionPath: yup.string().trim(),
    incomingWebSocketWhitelist: yup.array(yup.string().trim().defined()),
    walletGossipTransactionsMaxQueueSize: yup.number(),
    walletNodeIpcEnabled: yup.boolean(),
    walletNodeIpcPath: yup.string(),
    walletNodeTcpEnabled: yup.boolean(),
    walletNodeTcpHost: yup.string(),
    walletNodeTcpPort: yup.number(),
    walletNodeTlsEnabled: yup.boolean(),
    walletNodeRpcAuthToken: yup.string(),
    walletSyncingMaxQueueSize: yup.number(),
})
    .defined();
class Config extends keyStore_1.KeyStore {
    constructor(files, dataDir, configName) {
        super(files, configName || exports.DEFAULT_CONFIG_NAME, Config.GetDefaults(files, dataDir), dataDir, exports.ConfigOptionsSchema);
        this.chainDatabasePath = this.files.join(this.storage.dataDir, 'databases', 'chain');
        this.walletDatabasePath = this.files.join(this.storage.dataDir, 'databases', 'wallet');
        this.tempDir = this.files.join(this.storage.dataDir, 'temp');
    }
    static GetDefaults(files, dataDir) {
        return {
            bootstrapNodes: [],
            p2pStunServers: ['stun:stun.l.google.com:19302', 'stun:global.stun.twilio.com:3478'],
            databaseMigrate: false,
            enableWallet: true,
            transactionExpirationDelta: 15,
            editor: '',
            enableListenP2P: true,
            enableLogFile: false,
            enableRpc: true,
            enableRpcIpc: exports.DEFAULT_USE_RPC_IPC,
            enableRpcTcp: exports.DEFAULT_USE_RPC_TCP,
            enableRpcTls: exports.DEFAULT_USE_RPC_TLS,
            enableRpcHttp: exports.DEFAULT_USE_RPC_HTTP,
            enableSyncing: true,
            enableTelemetry: false,
            enableMetrics: true,
            enableAssetVerification: true,
            getFundsApi: 'https://testnet.api.ironfish.network/faucet_transactions',
            ipcPath: files.resolve(files.join(dataDir, 'ironfish.ipc')),
            logLevel: '*:info',
            logPeerMessages: false,
            logPrefix: '',
            miningForce: false,
            blockGraffiti: '',
            nodeName: '',
            nodeWorkers: -1,
            nodeWorkersMax: 6,
            p2pSimulateLatency: 0,
            peerPort: exports.DEFAULT_WEBSOCKET_PORT,
            rpcTcpHost: 'localhost',
            rpcTcpPort: 8020,
            tlsKeyPath: files.resolve(files.join(dataDir, 'certs', 'node-key.pem')),
            tlsCertPath: files.resolve(files.join(dataDir, 'certs', 'node-cert.pem')),
            rpcHttpHost: 'localhost',
            rpcHttpPort: 8021,
            maxPeers: 50,
            confirmations: 2,
            minPeers: 1,
            targetPeers: 50,
            telemetryApi: '',
            assetVerificationApi: '',
            generateNewIdentity: false,
            blocksPerMessage: 25,
            minerBatchSize: 25000,
            poolName: 'Iron Fish Pool',
            poolAccountName: undefined,
            poolBanning: true,
            poolHost: exports.DEFAULT_POOL_HOST,
            poolPort: exports.DEFAULT_POOL_PORT,
            poolDifficulty: '15000000000',
            poolStatusNotificationInterval: 30 * 60,
            poolRecentShareCutoff: 2 * 60 * 60,
            poolPayoutPeriodDuration: 2 * 60 * 60,
            poolDiscordWebhook: '',
            poolMaxConnectionsPerIp: 0,
            poolLarkWebhook: '',
            jsonLogs: false,
            explorerBlocksUrl: 'https://explorer.ironfish.network/blocks/',
            explorerTransactionsUrl: 'https://explorer.ironfish.network/transaction/',
            feeEstimatorMaxBlockHistory: exports.DEFAULT_FEE_ESTIMATOR_MAX_BLOCK_HISTORY,
            feeEstimatorPercentileSlow: exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_SLOW,
            feeEstimatorPercentileAverage: exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_AVERAGE,
            feeEstimatorPercentileFast: exports.DEFAULT_FEE_ESTIMATOR_PERCENTILE_FAST,
            networkId: exports.DEFAULT_NETWORK_ID,
            customNetwork: '',
            maxSyncedAgeBlocks: 60,
            memPoolMaxSizeBytes: 60 * MEGABYTES,
            memPoolRecentlyEvictedCacheSize: 60000,
            networkDefinitionPath: files.resolve(files.join(dataDir, 'network.json')),
            incomingWebSocketWhitelist: [],
            walletNodeIpcEnabled: false,
            walletNodeIpcPath: '',
            walletGossipTransactionsMaxQueueSize: 1000,
            walletNodeTcpEnabled: false,
            walletNodeTcpHost: '',
            walletNodeTcpPort: 8020,
            walletNodeTlsEnabled: true,
            walletNodeRpcAuthToken: '',
            walletSyncingMaxQueueSize: 100,
        };
    }
}
exports.Config = Config;
//# sourceMappingURL=config.js.map