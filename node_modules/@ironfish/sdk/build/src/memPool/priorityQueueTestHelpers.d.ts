export interface Queue<T> {
    hash: (v: T) => string;
    add(item: T): boolean;
    remove(hash: string): T | undefined;
    poll(): T | undefined;
    has(hash: string): boolean;
    size(): number;
}
export declare class SimpleQueue<T> implements Queue<T> {
    private _map;
    private _sorted;
    hash: (v: T) => string;
    private _compare;
    constructor(compare: (v1: T, v2: T) => boolean, hash: (v: T) => string);
    add(item: T): boolean;
    remove(hash: string): T | undefined;
    _reSort(): void;
    poll(): T | undefined;
    has(hash: string): boolean;
    size(): number;
}
export declare function heapSort<T>(queue: Queue<T>, items: T[]): T[];
export declare type Return<T> = {
    a: 'POLL';
    r: T | undefined;
} | {
    a: 'ADD';
    r: boolean;
} | {
    a: 'REMOVE';
    r: T | undefined;
};
export declare type Action<T> = (queue: Queue<T>) => Return<T>[];
//# sourceMappingURL=priorityQueueTestHelpers.d.ts.map