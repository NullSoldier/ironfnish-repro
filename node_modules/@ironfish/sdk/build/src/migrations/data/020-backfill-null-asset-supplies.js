"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migration020 = void 0;
const utils_1 = require("../../utils");
const migration_1 = require("../migration");
const schemaOld_1 = require("./021-add-version-to-accounts/schemaOld");
class Migration020 extends migration_1.Migration {
    constructor() {
        super(...arguments);
        this.path = __filename;
        this.database = migration_1.Database.WALLET;
    }
    prepare(node) {
        return node.wallet.walletDb.db;
    }
    async forward(node, _db, tx, logger) {
        const accounts = await schemaOld_1.GetOldAccounts(node, _db, tx);
        logger.info(`Backfilling assets for ${accounts.length} accounts`);
        for (const account of accounts) {
            logger.info('');
            let assetCount = 0;
            logger.info(`  Clearing assets for account ${account.name}`);
            for await (const asset of account.getAssets(tx)) {
                if (asset.creator.toString('hex') !== account.publicAddress) {
                    continue;
                }
                logger.info(`  Re-syncing asset ${utils_1.BufferUtils.toHuman(asset.name)}`);
                await node.wallet.walletDb.deleteAsset(account, asset.id, tx);
                assetCount++;
            }
            for await (const transactionValue of account.getTransactionsOrderedBySequence(tx)) {
                await account.saveMintsToAssetsStore(transactionValue, tx);
                await account.saveConnectedBurnsToAssetsStore(transactionValue.transaction, tx);
            }
            const assetsString = assetCount === 1 ? `${assetCount} asset` : `${assetCount} assets`;
            logger.info(`  Completed backfilling ${assetsString} for account ${account.name}`);
        }
        logger.info('');
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async backward() { }
}
exports.Migration020 = Migration020;
//# sourceMappingURL=020-backfill-null-asset-supplies.js.map