"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migration018 = void 0;
const migration_1 = require("../migration");
const schemaOld_1 = require("./021-add-version-to-accounts/schemaOld");
class Migration018 extends migration_1.Migration {
    constructor() {
        super(...arguments);
        this.path = __filename;
        this.database = migration_1.Database.WALLET;
    }
    prepare(node) {
        return node.wallet.walletDb.db;
    }
    async forward(node, _db, tx, logger) {
        // Ensure there are no corrupted records for users who might have failed
        // running this migration
        await node.wallet.walletDb.assets.clear();
        const accounts = await schemaOld_1.GetOldAccounts(node, _db, tx);
        logger.info(`Backfilling assets for ${accounts.length} accounts`);
        for (const account of accounts) {
            logger.info('');
            logger.info(`  Backfilling assets for account ${account.name}`);
            for await (const transactionValue of account.getTransactionsOrderedBySequence(tx)) {
                await account.saveMintsToAssetsStore(transactionValue, tx);
                await account.saveConnectedBurnsToAssetsStore(transactionValue.transaction, tx);
            }
            let assetCount = 0;
            for await (const _ of account.getAssets(tx)) {
                assetCount++;
            }
            const assetsString = assetCount === 1 ? `${assetCount} asset` : `${assetCount} : assets`;
            logger.info(`  Completed backfilling ${assetsString} for account ${account.name}`);
        }
        logger.info('');
    }
    async backward(node) {
        await node.wallet.walletDb.assets.clear();
    }
}
exports.Migration018 = Migration018;
//# sourceMappingURL=018-backfill-wallet-assets.js.map