"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetValueEncoding = void 0;
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const utils_1 = require("../../../../utils");
class AssetValueEncoding {
    serialize(value) {
        const bw = bufio_1.default.write(this.getSize(value));
        let flags = 0;
        flags |= Number(!!value.blockHash) << 0;
        flags |= Number(!!value.sequence) << 1;
        flags |= Number(value.supply !== null) << 2;
        bw.writeU8(flags);
        if (value.blockHash) {
            bw.writeHash(value.blockHash);
        }
        if (value.sequence) {
            bw.writeU32(value.sequence);
        }
        if (value.supply !== null) {
            bw.writeVarBytes(utils_1.BigIntUtils.toBytesLE(value.supply));
        }
        bw.writeHash(value.createdTransactionHash);
        bw.writeHash(value.id);
        bw.writeBytes(value.metadata);
        bw.writeBytes(value.name);
        bw.writeU8(value.nonce);
        bw.writeBytes(value.creator);
        bw.writeBytes(value.owner);
        return bw.render();
    }
    deserialize(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const flags = reader.readU8();
        const hasBlockHash = flags & (1 << 0);
        const hasSequence = flags & (1 << 1);
        const hasSupply = flags & (1 << 2);
        let blockHash = null;
        if (hasBlockHash) {
            blockHash = reader.readHash();
        }
        let sequence = null;
        if (hasSequence) {
            sequence = reader.readU32();
        }
        let supply = null;
        if (hasSupply) {
            supply = utils_1.BigIntUtils.fromBytesLE(reader.readVarBytes());
        }
        const createdTransactionHash = reader.readHash();
        const id = reader.readBytes(rust_nodejs_1.ASSET_ID_LENGTH);
        const metadata = reader.readBytes(rust_nodejs_1.ASSET_METADATA_LENGTH);
        const name = reader.readBytes(rust_nodejs_1.ASSET_NAME_LENGTH);
        const nonce = reader.readU8();
        const creator = reader.readBytes(rust_nodejs_1.PUBLIC_ADDRESS_LENGTH);
        const owner = reader.readBytes(rust_nodejs_1.PUBLIC_ADDRESS_LENGTH);
        return {
            blockHash,
            createdTransactionHash,
            id,
            metadata,
            name,
            nonce,
            creator,
            owner,
            sequence,
            supply,
        };
    }
    getSize(value) {
        let size = 0;
        size += 1; // flags
        if (value.blockHash) {
            size += 32;
        }
        if (value.sequence) {
            size += 4;
        }
        if (value.supply !== null) {
            size += bufio_1.default.sizeVarBytes(utils_1.BigIntUtils.toBytesLE(value.supply));
        }
        size += 32; // createdTransactionHash
        size += rust_nodejs_1.ASSET_ID_LENGTH; // id
        size += rust_nodejs_1.ASSET_METADATA_LENGTH; // metadata
        size += rust_nodejs_1.ASSET_NAME_LENGTH; // name
        size += 1; // nonce
        size += rust_nodejs_1.PUBLIC_ADDRESS_LENGTH; // creator
        size += rust_nodejs_1.PUBLIC_ADDRESS_LENGTH; // owner
        return size;
    }
}
exports.AssetValueEncoding = AssetValueEncoding;
//# sourceMappingURL=assetValue.js.map