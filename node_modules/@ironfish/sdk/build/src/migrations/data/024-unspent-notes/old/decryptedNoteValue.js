"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecryptedNoteValueEncoding = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const note_1 = require("../../../../primitives/note");
class DecryptedNoteValueEncoding {
    serialize(value) {
        const { accountId, nullifier, index, note, spent, transactionHash, blockHash, sequence } = value;
        const bw = bufio_1.default.write(this.getSize(value));
        let flags = 0;
        flags |= Number(!!index) << 0;
        flags |= Number(!!nullifier) << 1;
        flags |= Number(spent) << 2;
        flags |= Number(!!blockHash) << 3;
        flags |= Number(!!sequence) << 4;
        bw.writeU8(flags);
        bw.writeVarString(accountId, 'utf8');
        bw.writeBytes(note.serialize());
        bw.writeHash(transactionHash);
        if (index) {
            bw.writeU32(index);
        }
        if (nullifier) {
            bw.writeHash(nullifier);
        }
        if (blockHash) {
            bw.writeHash(blockHash);
        }
        if (sequence) {
            bw.writeU32(sequence);
        }
        return bw.render();
    }
    deserialize(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const flags = reader.readU8();
        const hasIndex = flags & (1 << 0);
        const hasNullifier = flags & (1 << 1);
        const spent = Boolean(flags & (1 << 2));
        const hasBlockHash = flags & (1 << 3);
        const hasSequence = flags & (1 << 4);
        const accountId = reader.readVarString('utf8');
        const serializedNote = reader.readBytes(rust_nodejs_1.DECRYPTED_NOTE_LENGTH);
        const transactionHash = reader.readHash();
        let index = null;
        if (hasIndex) {
            index = reader.readU32();
        }
        let nullifier = null;
        if (hasNullifier) {
            nullifier = reader.readHash();
        }
        let blockHash = null;
        if (hasBlockHash) {
            blockHash = reader.readHash();
        }
        let sequence = null;
        if (hasSequence) {
            sequence = reader.readU32();
        }
        const note = new note_1.Note(serializedNote);
        return {
            accountId,
            index,
            nullifier,
            note,
            spent,
            transactionHash,
            blockHash,
            sequence,
        };
    }
    getSize(value) {
        let size = 1;
        size += bufio_1.default.sizeVarString(value.accountId, 'utf8');
        size += rust_nodejs_1.DECRYPTED_NOTE_LENGTH;
        // transaction hash
        size += 32;
        if (value.index) {
            size += 4;
        }
        if (value.nullifier) {
            size += 32;
        }
        if (value.blockHash) {
            size += 32;
        }
        if (value.sequence) {
            size += 4;
        }
        return size;
    }
}
exports.DecryptedNoteValueEncoding = DecryptedNoteValueEncoding;
//# sourceMappingURL=decryptedNoteValue.js.map