/// <reference types="node" />
import { IDatabase, IDatabaseEncoding, IDatabaseStore, IDatabaseTransaction } from '../../../storage';
import { IronfishNode } from '../../../utils';
import { Account } from '../../../wallet';
export interface AccountValue {
    id: string;
    name: string;
    spendingKey: string;
    incomingViewKey: string;
    outgoingViewKey: string;
    publicAddress: string;
}
export declare class AccountValueEncoding implements IDatabaseEncoding<AccountValue> {
    serialize(value: AccountValue): Buffer;
    deserialize(buffer: Buffer): AccountValue;
    getSize(value: AccountValue): number;
}
export declare function GetOldStores(db: IDatabase): {
    accounts: IDatabaseStore<{
        key: string;
        value: AccountValue;
    }>;
};
export declare function GetOldAccounts(node: IronfishNode, db: IDatabase, tx?: IDatabaseTransaction): Promise<Account[]>;
//# sourceMappingURL=schemaOld.d.ts.map