"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetOldAccounts = exports.GetOldStores = exports.AccountValueEncoding = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const storage_1 = require("../../../storage");
const wallet_1 = require("../../../wallet");
const KEY_LENGTH = 32;
class AccountValueEncoding {
    serialize(value) {
        const bw = bufio_1.default.write(this.getSize(value));
        bw.writeVarString(value.id, 'utf8');
        bw.writeVarString(value.name, 'utf8');
        bw.writeBytes(Buffer.from(value.spendingKey, 'hex'));
        bw.writeBytes(Buffer.from(value.incomingViewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.outgoingViewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.publicAddress, 'hex'));
        return bw.render();
    }
    deserialize(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const id = reader.readVarString('utf8');
        const name = reader.readVarString('utf8');
        const spendingKey = reader.readBytes(KEY_LENGTH).toString('hex');
        const incomingViewKey = reader.readBytes(KEY_LENGTH).toString('hex');
        const outgoingViewKey = reader.readBytes(KEY_LENGTH).toString('hex');
        const publicAddress = reader.readBytes(rust_nodejs_1.PUBLIC_ADDRESS_LENGTH).toString('hex');
        return {
            id,
            name,
            spendingKey,
            incomingViewKey,
            outgoingViewKey,
            publicAddress,
        };
    }
    getSize(value) {
        let size = 0;
        size += bufio_1.default.sizeVarString(value.id, 'utf8');
        size += bufio_1.default.sizeVarString(value.name, 'utf8');
        size += KEY_LENGTH;
        size += KEY_LENGTH;
        size += KEY_LENGTH;
        size += rust_nodejs_1.PUBLIC_ADDRESS_LENGTH;
        return size;
    }
}
exports.AccountValueEncoding = AccountValueEncoding;
function GetOldStores(db) {
    const accounts = db.addStore({
        name: 'a',
        keyEncoding: new storage_1.StringEncoding(),
        valueEncoding: new AccountValueEncoding(),
    }, false);
    return { accounts };
}
exports.GetOldStores = GetOldStores;
async function GetOldAccounts(node, db, tx) {
    const accounts = [];
    const oldStores = GetOldStores(db);
    for await (const account of oldStores.accounts.getAllValuesIter(tx)) {
        const key = rust_nodejs_1.generateKeyFromPrivateKey(account.spendingKey);
        accounts.push(new wallet_1.Account({
            ...account,
            version: 1,
            viewKey: key.viewKey,
            createdAt: null,
            walletDb: node.wallet.walletDb,
        }));
    }
    return accounts;
}
exports.GetOldAccounts = GetOldAccounts;
//# sourceMappingURL=schemaOld.js.map