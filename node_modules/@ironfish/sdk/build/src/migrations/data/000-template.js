"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migration000 = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const utils_1 = require("../../storage/utils");
const migration_1 = require("../migration");
const stores_1 = require("./000-template/stores");
class Migration000 extends migration_1.Migration {
    constructor() {
        super(...arguments);
        this.path = __filename;
        this.database = migration_1.Database.WALLET;
    }
    prepare(node) {
        /* replace line below with node.chain.location if applying migration to the blockchain
         * database
         */
        return utils_1.createDB({ location: node.config.walletDatabasePath });
    }
    async forward(node, db, tx, logger) {
        // use GetStores to attach datastores with the old and new schemas to the
        // database
        const stores = stores_1.GetStores(db);
        // forward migration inserts from old stores into new stores
        for await (const account of stores.old.accounts.getAllValuesIter(tx)) {
            logger.info(`  Migrating account ${account.name}`);
            const key = rust_nodejs_1.generateKeyFromPrivateKey(account.spendingKey);
            // template example is taken from Migration022 which added viewKey to the accounts store
            const migrated = {
                ...account,
                viewKey: key.viewKey,
            };
            await stores.new.accounts.put(account.id, migrated, tx);
        }
        // Because we changed the table name, we should clear the old table
        // but you don't need this if you use the same table
        await stores.old.accounts.clear(tx);
    }
    /**
     * Writing a backwards migration is optional but suggested
     */
    async backward(node, db, tx, logger) {
        // use GetStores to attach datastores with the old and new schemas to the
        // database
        const stores = stores_1.GetStores(db);
        // backward migration re-inserts data from new stores into old stores
        for await (const account of stores.new.accounts.getAllValuesIter(tx)) {
            logger.info(`  Migrating account ${account.name}`);
            await stores.old.accounts.put(account.id, account, tx);
        }
        // Because we changed the table name, we should clear the old table
        // but you don't need this if you use the same table
        await stores.new.accounts.clear(tx);
    }
}
exports.Migration000 = Migration000;
//# sourceMappingURL=000-template.js.map