"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetValueEncoding = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const utils_1 = require("../../../../utils");
class AssetValueEncoding {
    serialize(value) {
        const bw = bufio_1.default.write(this.getSize(value));
        bw.writeHash(value.createdTransactionHash);
        bw.writeHash(value.id);
        bw.writeBytes(value.metadata);
        bw.writeBytes(value.name);
        bw.writeU8(value.nonce);
        bw.writeBytes(value.creator);
        bw.writeBytes(value.owner);
        bw.writeVarBytes(utils_1.BigIntUtils.toBytesLE(value.supply));
        return bw.render();
    }
    deserialize(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const createdTransactionHash = reader.readHash();
        const id = reader.readBytes(rust_nodejs_1.ASSET_ID_LENGTH);
        const metadata = reader.readBytes(rust_nodejs_1.ASSET_METADATA_LENGTH);
        const name = reader.readBytes(rust_nodejs_1.ASSET_NAME_LENGTH);
        const nonce = reader.readU8();
        const creator = reader.readBytes(rust_nodejs_1.PUBLIC_ADDRESS_LENGTH);
        const owner = reader.readBytes(rust_nodejs_1.PUBLIC_ADDRESS_LENGTH);
        const supply = utils_1.BigIntUtils.fromBytesLE(reader.readVarBytes());
        return { createdTransactionHash, id, metadata, name, nonce, creator, owner, supply };
    }
    getSize(value) {
        let size = 0;
        size += 32; // createdTransactionHash
        size += rust_nodejs_1.ASSET_ID_LENGTH; // id
        size += rust_nodejs_1.ASSET_METADATA_LENGTH; // metadata
        size += rust_nodejs_1.ASSET_NAME_LENGTH; // name
        size += 1; // nonce
        size += rust_nodejs_1.PUBLIC_ADDRESS_LENGTH; // creator
        size += rust_nodejs_1.PUBLIC_ADDRESS_LENGTH; // owner
        size += bufio_1.default.sizeVarBytes(utils_1.BigIntUtils.toBytesLE(value.supply)); // supply
        return size;
    }
}
exports.AssetValueEncoding = AssetValueEncoding;
//# sourceMappingURL=assetValue.js.map