"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migration022 = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const migration_1 = require("../migration");
const schemaNew_1 = require("./022-add-view-key-account/schemaNew");
const schemaOld_1 = require("./022-add-view-key-account/schemaOld");
class Migration022 extends migration_1.Migration {
    constructor() {
        super(...arguments);
        this.path = __filename;
        this.database = migration_1.Database.WALLET;
    }
    prepare(node) {
        return node.wallet.walletDb.db;
    }
    async forward(node, db, tx, logger) {
        const stores = {
            old: schemaOld_1.GetOldStores(db),
            new: schemaNew_1.GetNewStores(db),
        };
        for await (const account of stores.old.accounts.getAllValuesIter(tx)) {
            logger.info(`  Migrating account ${account.name}`);
            const key = rust_nodejs_1.generateKeyFromPrivateKey(account.spendingKey);
            const migrated = {
                ...account,
                viewKey: key.viewKey,
            };
            await stores.new.accounts.put(account.id, migrated, tx);
        }
        await stores.old.accounts.clear(tx);
    }
    async backward(node, db, tx, logger) {
        const stores = {
            old: schemaOld_1.GetOldStores(db),
            new: schemaNew_1.GetNewStores(db),
        };
        for await (const account of stores.new.accounts.getAllValuesIter(tx)) {
            logger.info(`  Migrating account ${account.name}`);
            await stores.old.accounts.put(account.id, account, tx);
        }
        await stores.new.accounts.clear(tx);
    }
}
exports.Migration022 = Migration022;
//# sourceMappingURL=022-add-view-key-account.js.map