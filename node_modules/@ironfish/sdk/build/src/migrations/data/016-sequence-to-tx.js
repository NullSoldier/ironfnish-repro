"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migration016 = void 0;
const migration_1 = require("../migration");
const schemaOld_1 = require("./021-add-version-to-accounts/schemaOld");
class Migration016 extends migration_1.Migration {
    constructor() {
        super(...arguments);
        this.path = __filename;
        this.database = migration_1.Database.WALLET;
    }
    prepare(node) {
        return node.wallet.walletDb.db;
    }
    async forward(node, db, tx, logger) {
        const accounts = await schemaOld_1.GetOldAccounts(node, db, tx);
        logger.info(`Indexing on-chain transactions for ${accounts.length} accounts`);
        for (const account of accounts) {
            let onChainCount = 0;
            let offChainCount = 0;
            logger.info(`Indexing on-chain transactions for account ${account.name}`);
            for await (const transaction of account.getTransactions()) {
                if (transaction.sequence === null) {
                    offChainCount++;
                    continue;
                }
                await node.wallet.walletDb.saveSequenceToTransactionHash(account, transaction.sequence, transaction.transaction.hash());
                onChainCount++;
            }
            logger.info(` Indexed ${onChainCount} on-chain transactions`);
            logger.info(` Skipped ${offChainCount} transactions that haven't been added to the chain`);
        }
    }
    async backward(node) {
        await node.wallet.walletDb.sequenceToTransactionHash.clear();
    }
}
exports.Migration016 = Migration016;
//# sourceMappingURL=016-sequence-to-tx.js.map