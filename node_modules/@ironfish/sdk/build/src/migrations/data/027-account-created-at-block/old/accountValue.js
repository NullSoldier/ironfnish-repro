"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountValueEncoding = exports.VIEW_KEY_LENGTH = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const KEY_LENGTH = 32;
exports.VIEW_KEY_LENGTH = 64;
const VERSION_LENGTH = 2;
class AccountValueEncoding {
    serialize(value) {
        const bw = bufio_1.default.write(this.getSize(value));
        let flags = 0;
        flags |= Number(!!value.spendingKey) << 0;
        flags |= Number(!!value.createdAt) << 1;
        bw.writeU8(flags);
        bw.writeU16(value.version);
        bw.writeVarString(value.id, 'utf8');
        bw.writeVarString(value.name, 'utf8');
        if (value.spendingKey) {
            bw.writeBytes(Buffer.from(value.spendingKey, 'hex'));
        }
        bw.writeBytes(Buffer.from(value.viewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.incomingViewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.outgoingViewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.publicAddress, 'hex'));
        if (value.createdAt) {
            bw.writeU64(value.createdAt.getTime());
        }
        return bw.render();
    }
    deserialize(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const flags = reader.readU8();
        const version = reader.readU16();
        const hasSpendingKey = flags & (1 << 0);
        const hasCreatedAt = flags & (1 << 1);
        const id = reader.readVarString('utf8');
        const name = reader.readVarString('utf8');
        const spendingKey = hasSpendingKey ? reader.readBytes(KEY_LENGTH).toString('hex') : null;
        const viewKey = reader.readBytes(exports.VIEW_KEY_LENGTH).toString('hex');
        const incomingViewKey = reader.readBytes(KEY_LENGTH).toString('hex');
        const outgoingViewKey = reader.readBytes(KEY_LENGTH).toString('hex');
        const publicAddress = reader.readBytes(rust_nodejs_1.PUBLIC_ADDRESS_LENGTH).toString('hex');
        const createdAt = hasCreatedAt ? new Date(reader.readU64()) : null;
        return {
            version,
            id,
            name,
            viewKey,
            incomingViewKey,
            outgoingViewKey,
            spendingKey,
            publicAddress,
            createdAt,
        };
    }
    getSize(value) {
        let size = 0;
        size += 1;
        size += VERSION_LENGTH;
        size += bufio_1.default.sizeVarString(value.id, 'utf8');
        size += bufio_1.default.sizeVarString(value.name, 'utf8');
        if (value.spendingKey) {
            size += KEY_LENGTH;
        }
        size += exports.VIEW_KEY_LENGTH;
        size += KEY_LENGTH;
        size += KEY_LENGTH;
        size += rust_nodejs_1.PUBLIC_ADDRESS_LENGTH;
        if (value.createdAt) {
            size += 8;
        }
        return size;
    }
}
exports.AccountValueEncoding = AccountValueEncoding;
//# sourceMappingURL=accountValue.js.map