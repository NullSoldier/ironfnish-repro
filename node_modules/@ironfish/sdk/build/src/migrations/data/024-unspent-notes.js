"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migration024 = void 0;
const utils_1 = require("../../storage/utils");
const wallet_1 = require("../../wallet");
const migration_1 = require("../migration");
const stores_1 = require("./024-unspent-notes/stores");
class Migration024 extends migration_1.Migration {
    constructor() {
        super(...arguments);
        this.path = __filename;
        this.database = migration_1.Database.WALLET;
    }
    prepare(node) {
        return utils_1.createDB({ location: node.config.walletDatabasePath });
    }
    async forward(node, db, tx, logger) {
        const stores = stores_1.GetStores(db);
        const accounts = [];
        for await (const accountValue of stores.old.accounts.getAllValuesIter()) {
            accounts.push(new wallet_1.Account({
                ...accountValue,
                createdAt: null,
                walletDb: node.wallet.walletDb,
            }));
        }
        logger.info(`Indexing unspent notes for ${accounts.length} accounts`);
        for (const account of accounts) {
            let unspentNotes = 0;
            logger.info(` Indexing unspent notes for account ${account.name}`);
            for await (const [[, noteHash], note] of stores.old.decryptedNotes.getAllIter(undefined, account.prefixRange)) {
                if (note.sequence === null || note.spent) {
                    continue;
                }
                await stores.new.unspentNoteHashes.put([
                    account.prefix,
                    [note.note.assetId(), [note.sequence, [note.note.value(), noteHash]]],
                ], null);
                unspentNotes++;
            }
            logger.info(` Indexed ${unspentNotes} unspent notes for account ${account.name}`);
        }
    }
    async backward(node, db) {
        const stores = stores_1.GetStores(db);
        await stores.new.unspentNoteHashes.clear();
    }
}
exports.Migration024 = Migration024;
//# sourceMappingURL=024-unspent-notes.js.map