import { FileSystem } from '../fileSystems';
import { Logger } from '../logger';
import { IDatabase, IDatabaseTransaction } from '../storage';
import { IronfishNode } from '../utils';
export declare enum Database {
    WALLET = "wallet",
    BLOCKCHAIN = "blockchain"
}
export declare abstract class Migration {
    id: number;
    name: string;
    abstract database: Database;
    abstract path: string;
    init(files: FileSystem): Migration;
    abstract prepare(node: IronfishNode): Promise<IDatabase> | IDatabase;
    abstract forward(node: IronfishNode, db: IDatabase, tx: IDatabaseTransaction | undefined, logger: Logger, dryRun: boolean): Promise<void>;
    abstract backward(node: IronfishNode, db: IDatabase, tx: IDatabaseTransaction | undefined, logger: Logger, dryRun: boolean): Promise<void>;
}
//# sourceMappingURL=migration.d.ts.map