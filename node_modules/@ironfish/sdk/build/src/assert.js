"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assert = void 0;
class Assert {
    static isUnreachable(x, message) {
        throw new Error(message || `Expected ${String(x)} to be unreachable`);
    }
    static isUndefined(x, message) {
        if (x !== undefined) {
            throw new Error(message || `Expected ${String(x)} to be undefined`);
        }
    }
    static isNotUndefined(x, message) {
        if (x === undefined) {
            throw new Error(message || `Expected value not to be undefined`);
        }
    }
    static isNotNull(x, message) {
        if (x === null) {
            throw new Error(message || `Expected value not to be null`);
        }
    }
    static isNull(x, message) {
        if (x !== null) {
            throw new Error(message || `Expected value to be null`);
        }
    }
    static isEqual(a, b, message) {
        if (a !== b) {
            throw new Error(message || `Expected values to be equal: ${String(a)} vs ${String(b)}`);
        }
    }
    static isGreaterThan(a, b, message) {
        if (a <= b) {
            throw new Error(message || `Expected ${String(a)} to be greater than ${String(b)}`);
        }
    }
    static isNever(x, message) {
        throw new Error(message || `Expected value to be never: ${String(x)}`);
    }
    static isTrue(x, message) {
        if (x === false) {
            throw new Error(message || `Expected value to be true`);
        }
    }
    static isFalse(x, message) {
        if (x === true) {
            throw new Error(message || `Expected value to be false`);
        }
    }
    static isInstanceOf(x, constructor, message) {
        if (!(x instanceof constructor)) {
            throw new Error(message || `Expected value to be ${constructor.name} but was ${typeof x}`);
        }
    }
    static isString(x, message) {
        if (typeof x !== 'string') {
            throw new Error(message || `Expected value to be string`);
        }
    }
    static isTruthy(x, message) {
        const isFalsey = x == null || x === 0 || x === '' || x === false;
        if (isFalsey) {
            throw new Error(message || `Expected value to be truthy`);
        }
        if (!isFalsey && !x) {
            throw new Error(`We must have forgotten a falsey value: ${String(x)}`);
        }
    }
}
exports.Assert = Assert;
//# sourceMappingURL=assert.js.map