/// <reference types="node" />
import { FileSystem } from '../../fileSystems';
import { BlockHeader } from '../../primitives';
import { BlockHash } from '../../primitives/blockheader';
import { TransactionHash } from '../../primitives/transaction';
import { IDatabase, IDatabaseStore, IDatabaseTransaction } from '../../storage';
import { AssetSchema, HashToNextSchema, HeadersSchema, MetaSchema, SequenceToHashesSchema, SequenceToHashSchema, TransactionHashToBlockHashSchema, TransactionsSchema } from '../schema';
import { AssetValue } from './assetValue';
import { HeaderValue } from './headers';
import { TransactionsValue } from './transactions';
export declare const VERSION_DATABASE_CHAIN = 28;
export declare class BlockchainDB {
    db: IDatabase;
    location: string;
    files: FileSystem;
    headers: IDatabaseStore<HeadersSchema>;
    meta: IDatabaseStore<MetaSchema>;
    transactions: IDatabaseStore<TransactionsSchema>;
    sequenceToHashes: IDatabaseStore<SequenceToHashesSchema>;
    sequenceToHash: IDatabaseStore<SequenceToHashSchema>;
    hashToNextHash: IDatabaseStore<HashToNextSchema>;
    assets: IDatabaseStore<AssetSchema>;
    transactionHashToBlockHash: IDatabaseStore<TransactionHashToBlockHashSchema>;
    constructor(options: {
        location: string;
        files: FileSystem;
    });
    open(): Promise<void>;
    close(): Promise<void>;
    getBlockHeader(blockHash: Buffer, tx?: IDatabaseTransaction): Promise<BlockHeader | undefined>;
    deleteHeader(hash: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    putBlockHeader(hash: Buffer, header: HeaderValue, tx?: IDatabaseTransaction): Promise<void>;
    getMetaHash(key: 'head' | 'latest', tx?: IDatabaseTransaction): Promise<Buffer | undefined>;
    putMetaHash(key: 'head' | 'latest', value: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    getTransactions(blockHash: Buffer, tx?: IDatabaseTransaction): Promise<TransactionsValue | undefined>;
    addTransaction(hash: Buffer, value: TransactionsValue, tx?: IDatabaseTransaction): Promise<void>;
    putTransaction(hash: Buffer, value: TransactionsValue, tx?: IDatabaseTransaction): Promise<void>;
    deleteTransaction(hash: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    getBlockHashesAtSequence(sequence: number, tx?: IDatabaseTransaction): Promise<BlockHash[]>;
    getBlockHeadersAtSequence(sequence: number, tx?: IDatabaseTransaction): Promise<BlockHeader[]>;
    deleteSequenceToHashes(sequence: number, tx?: IDatabaseTransaction): Promise<void>;
    putSequenceToHashes(sequence: number, hashes: Buffer[], tx?: IDatabaseTransaction): Promise<void>;
    getBlockHashAtSequence(sequence: number, tx?: IDatabaseTransaction): Promise<BlockHash | undefined>;
    getBlockHeaderAtSequence(sequence: number): Promise<BlockHeader | undefined>;
    putSequenceToHash(sequence: number, hash: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    deleteSequenceToHash(sequence: number, tx?: IDatabaseTransaction): Promise<void>;
    clearSequenceToHash(tx?: IDatabaseTransaction): Promise<void>;
    getNextHash(hash: BlockHash, tx?: IDatabaseTransaction): Promise<BlockHash | undefined>;
    putNextHash(hash: Buffer, nextHash: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    deleteNextHash(hash: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    clearHashToNextHash(tx?: IDatabaseTransaction): Promise<void>;
    getAsset(assetId: Buffer, tx?: IDatabaseTransaction): Promise<AssetValue | undefined>;
    putAsset(assetId: Buffer, assetValue: AssetValue, tx?: IDatabaseTransaction): Promise<void>;
    deleteAsset(assetId: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    getBlockHashByTransactionHash(transactionHash: TransactionHash, tx?: IDatabaseTransaction): Promise<BlockHash | undefined>;
    transactionHashHasBlock(transactionHash: TransactionHash, tx?: IDatabaseTransaction): Promise<boolean>;
    putTransactionHashToBlockHash(transactionHash: Buffer, blockHash: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    deleteTransactionHashToBlockHash(transactionHash: Buffer, tx?: IDatabaseTransaction): Promise<void>;
    compact(): Promise<void>;
    getVersion(): Promise<number>;
    transaction(): IDatabaseTransaction;
    size(): Promise<number>;
}
//# sourceMappingURL=blockchaindb.d.ts.map