import { Config, ConfigOptions, InternalOptions, InternalStore } from './fileStores';
import { FileSystem } from './fileSystems';
import { Logger } from './logger';
import { MetricsMonitor } from './metrics';
import { PrivateIdentity } from './network/identity';
import { FullNode } from './node';
import { Package } from './package';
import { RpcSocketClient } from './rpc';
import { RpcClient } from './rpc/clients/client';
import { Strategy } from './strategy';
import { WalletNode } from './walletNode';
export declare class IronfishSdk {
    pkg: Package;
    client: RpcSocketClient;
    config: Config;
    fileSystem: FileSystem;
    logger: Logger;
    metrics: MetricsMonitor;
    internal: InternalStore;
    strategyClass: typeof Strategy | null;
    dataDir: string;
    private constructor();
    static init({ pkg, configName, configOverrides, internalOverrides, fileSystem, dataDir, logger, metrics, strategyClass, }?: {
        pkg?: Package;
        configName?: string;
        configOverrides?: Partial<ConfigOptions>;
        internalOverrides?: Partial<InternalOptions>;
        fileSystem?: FileSystem;
        dataDir?: string;
        logger?: Logger;
        metrics?: MetricsMonitor;
        strategyClass?: typeof Strategy;
    }): Promise<IronfishSdk>;
    node({ autoSeed, privateIdentity, }?: {
        autoSeed?: boolean;
        privateIdentity?: PrivateIdentity;
    }): Promise<FullNode>;
    connectRpc(forceLocal?: boolean, forceRemote?: boolean): Promise<RpcClient>;
    walletNode(options?: {
        connectNodeClient: boolean;
    }): Promise<WalletNode>;
}
//# sourceMappingURL=sdk.d.ts.map