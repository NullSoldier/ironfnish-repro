import { AxiosError, AxiosRequestConfig } from 'axios';
import { Transaction } from './primitives';
import { FollowChainStreamResponse } from './rpc/routes/chain/followChainStream';
import { Metric } from './telemetry';
declare type FaucetTransaction = {
    object: 'faucet_transaction';
    id: number;
    public_key: string;
    started_at: string | null;
    completed_at: string | null;
};
/**
 *  The API should be compatible with the Ironfish API here
 *  used to host our Facuet, BlockExplorer, and other things.
 *  https://github.com/iron-fish/ironfish-api
 */
export declare class WebApi {
    host: string;
    token: string;
    getFundsEndpoint: string | null;
    constructor(options?: {
        host?: string;
        token?: string;
        getFundsEndpoint?: string;
    });
    headBlocks(): Promise<string | null>;
    blocks(blocks: FollowChainStreamResponse[]): Promise<void>;
    transactions(transactions: Transaction[]): Promise<void>;
    getFunds(data: {
        email?: string;
        public_key: string;
    }): Promise<{
        id: number;
        object: 'faucet_transaction';
        public_key: string;
        completed_at: number | null;
        started_at: number | null;
    }>;
    getNextFaucetTransactions(count: number): Promise<FaucetTransaction[]>;
    startFaucetTransaction(id: number): Promise<FaucetTransaction>;
    completeFaucetTransaction(id: number, hash: string): Promise<FaucetTransaction>;
    submitTelemetry(payload: {
        points: Metric[];
        graffiti?: string;
    }): Promise<void>;
    options(headers?: Record<string, string>): AxiosRequestConfig;
    requireToken(): void;
}
export declare function IsAxiosError(e: unknown): e is AxiosError;
export {};
//# sourceMappingURL=webApi.d.ts.map