"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkDefinition = exports.networkDefinitionSchema = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const yup = __importStar(require("yup"));
const defaultNetworkDefinitions_1 = require("./defaultNetworkDefinitions");
const serde_1 = require("./serde");
exports.networkDefinitionSchema = yup
    .object({
    id: yup.number().integer().min(0).defined(),
    bootstrapNodes: yup.array().of(yup.string().defined()).defined(),
    genesis: yup
        .object({
        header: yup
            .object({
            sequence: yup.number().integer().defined(),
            previousBlockHash: yup.string().defined(),
            noteCommitment: yup.mixed().defined(),
            transactionCommitment: yup.mixed().defined(),
            target: yup.string().defined(),
            randomness: yup.string().defined(),
            timestamp: yup.number().integer().defined(),
            noteSize: yup.number().integer().nullable().defined(),
            work: yup.string().optional(),
            graffiti: yup.string().defined(),
        })
            .defined(),
        transactions: yup.array().of(yup.mixed()).defined(),
    })
        .defined(),
    consensus: yup
        .object({
        allowedBlockFutureSeconds: yup.number().integer().defined(),
        genesisSupplyInIron: yup.number().integer().defined(),
        targetBlockTimeInSeconds: yup.number().integer().defined(),
        targetBucketTimeInSeconds: yup.number().integer().defined(),
        maxBlockSizeBytes: yup.number().integer().defined(),
        minFee: yup.number().integer().defined(),
    })
        .defined(),
})
    .defined();
async function getNetworkDefinition(config, internal, files) {
    let networkDefinitionJSON = '';
    // Try fetching custom network definition first, if it exists
    if (config.isSet('customNetwork')) {
        networkDefinitionJSON = await files.readFile(files.resolve(config.get('customNetwork')));
    }
    else {
        if (internal.isSet('networkId') &&
            config.isSet('networkId') &&
            internal.get('networkId') !== config.get('networkId')) {
            throw Error('Network ID flag does not match network ID stored in datadir');
        }
        const networkId = config.isSet('networkId')
            ? config.get('networkId')
            : internal.get('networkId');
        if (networkId === 0) {
            networkDefinitionJSON = defaultNetworkDefinitions_1.TESTNET;
        }
        else if (networkId === 1) {
            networkDefinitionJSON = defaultNetworkDefinitions_1.MAINNET;
        }
        else if (networkId === 2) {
            networkDefinitionJSON = defaultNetworkDefinitions_1.DEVNET;
        }
        else {
            networkDefinitionJSON = await files.readFile(config.get('networkDefinitionPath'));
        }
    }
    const networkDefinition = await exports.networkDefinitionSchema.validate(serde_1.IJSON.parse(networkDefinitionJSON));
    if (internal.isSet('networkId') && networkDefinition.id !== internal.get('networkId')) {
        throw Error('Network ID in network definition does not match network ID stored in datadir');
    }
    if (config.isSet('customNetwork')) {
        if (defaultNetworkDefinitions_1.isDefaultNetworkId(networkDefinition.id)) {
            throw Error('Cannot start custom network with a reserved network ID');
        }
        // Copy custom network definition to data directory for future use
        await files.writeFile(config.get('networkDefinitionPath'), networkDefinitionJSON);
    }
    internal.set('networkId', networkDefinition.id);
    return networkDefinition;
}
exports.getNetworkDefinition = getNetworkDefinition;
//# sourceMappingURL=networkDefinition.js.map