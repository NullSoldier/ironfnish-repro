"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateAccount = exports.isValidOutgoingViewKey = exports.isValidIncomingViewKey = exports.isValidSpendingKey = exports.isValidPublicAddress = void 0;
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const SPENDING_KEY_LENGTH = 64;
const INCOMING_VIEW_KEY_LENGTH = 64;
const OUTGOING_VIEW_KEY_LENGTH = 64;
function isValidPublicAddress(publicAddress) {
    return rust_nodejs_1.isValidPublicAddress(publicAddress);
}
exports.isValidPublicAddress = isValidPublicAddress;
function isValidSpendingKey(spendingKey) {
    return spendingKey.length === SPENDING_KEY_LENGTH && haveAllowedCharacters(spendingKey);
}
exports.isValidSpendingKey = isValidSpendingKey;
function isValidIncomingViewKey(incomingViewKey) {
    return (incomingViewKey.length === INCOMING_VIEW_KEY_LENGTH &&
        haveAllowedCharacters(incomingViewKey));
}
exports.isValidIncomingViewKey = isValidIncomingViewKey;
function isValidOutgoingViewKey(outgoingViewKey) {
    return (outgoingViewKey.length === OUTGOING_VIEW_KEY_LENGTH &&
        haveAllowedCharacters(outgoingViewKey));
}
exports.isValidOutgoingViewKey = isValidOutgoingViewKey;
function validateAccount(toImport) {
    if (!toImport.name) {
        throw new Error(`Imported account has no name`);
    }
    if (!toImport.publicAddress) {
        throw new Error(`Imported account has no public address`);
    }
    if (!isValidPublicAddress(toImport.publicAddress)) {
        throw new Error(`Provided public address ${toImport.publicAddress} is invalid`);
    }
    if (!toImport.outgoingViewKey) {
        throw new Error(`Imported account has no outgoing view key`);
    }
    if (!isValidOutgoingViewKey(toImport.outgoingViewKey)) {
        throw new Error(`Provided outgoing view key ${toImport.outgoingViewKey} is invalid`);
    }
    if (!toImport.incomingViewKey) {
        throw new Error(`Imported account has no incoming view key`);
    }
    if (!isValidIncomingViewKey(toImport.incomingViewKey)) {
        throw new Error(`Provided incoming view key ${toImport.incomingViewKey} is invalid`);
    }
    if (toImport.spendingKey && !isValidSpendingKey(toImport.spendingKey)) {
        throw new Error(`Provided spending key ${toImport.spendingKey} is invalid`);
    }
}
exports.validateAccount = validateAccount;
function haveAllowedCharacters(text) {
    const validInputRegex = /^[0-9a-f]+$/;
    return validInputRegex.exec(text.toLowerCase()) != null;
}
//# sourceMappingURL=validator.js.map