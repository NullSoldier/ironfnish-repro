/// <reference types="node" />
import { Event } from '../event';
import { Logger } from '../logger';
import { Transaction } from '../primitives';
import { FollowChainStreamResponse, RpcClient } from '../rpc';
export declare type WalletBlockHeader = {
    hash: Buffer;
    previousBlockHash: Buffer;
    sequence: number;
    timestamp: Date;
};
export declare type WalletBlockTransaction = {
    transaction: Transaction;
    initialNoteIndex: number;
};
export declare class RemoteChainProcessor {
    hash: Buffer | null;
    sequence: number | null;
    logger: Logger;
    nodeClient: RpcClient | null;
    maxQueueSize: number;
    onAdd: Event<[{
        header: WalletBlockHeader;
        transactions: WalletBlockTransaction[];
    }]>;
    onRemove: Event<[{
        header: WalletBlockHeader;
        transactions: WalletBlockTransaction[];
    }]>;
    constructor(options: {
        logger: Logger;
        nodeClient: RpcClient | null;
        head: Buffer | null;
        maxQueueSize: number;
    });
    update({ signal }?: {
        signal?: AbortSignal;
    }): Promise<{
        hashChanged: boolean;
    }>;
    getBlockTransactions(response: FollowChainStreamResponse): WalletBlockTransaction[];
}
//# sourceMappingURL=remoteChainProcessor.d.ts.map