"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MnemonicEncoder = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const utils_1 = require("../../../utils");
const account_1 = require("../account");
const encoder_1 = require("./encoder");
class MnemonicEncoder {
    encode(value, options) {
        if (!value.spendingKey) {
            throw new Error('Spending key is required for mnemonic key encoder');
        }
        return rust_nodejs_1.spendingKeyToWords(value.spendingKey, options?.language
            ? utils_1.LanguageUtils.LANGUAGES[options.language]
            : utils_1.LanguageUtils.inferLanguageCode() || 0 /* English */);
    }
    decode(value, options) {
        let spendingKey = '';
        let language = null;
        for (const code of Object.values(utils_1.LanguageUtils.LANGUAGES)) {
            try {
                spendingKey = rust_nodejs_1.wordsToSpendingKey(value, code);
            }
            catch (e) {
                continue;
            }
            language = utils_1.LanguageUtils.languageCodeToKey(code);
        }
        if (language === null) {
            throw new encoder_1.DecodeFailed('Invalid mnemonic', this.constructor.name);
        }
        if (!options.name) {
            throw new encoder_1.DecodeInvalid('Name option is required for mnemonic key encoder');
        }
        const key = rust_nodejs_1.generateKeyFromPrivateKey(spendingKey);
        return {
            name: options.name,
            spendingKey: spendingKey,
            viewKey: key.viewKey,
            incomingViewKey: key.incomingViewKey,
            outgoingViewKey: key.outgoingViewKey,
            publicAddress: key.publicAddress,
            createdAt: null,
            version: account_1.ACCOUNT_SCHEMA_VERSION,
        };
    }
}
exports.MnemonicEncoder = MnemonicEncoder;
//# sourceMappingURL=mnemonic.js.map