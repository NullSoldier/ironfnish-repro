"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeAccount = exports.encodeAccount = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const assert_1 = require("../../../assert");
const bech32_1 = require("./bech32");
const bech32json_1 = require("./bech32json");
const encoder_1 = require("./encoder");
const json_1 = require("./json");
const mnemonic_1 = require("./mnemonic");
const spendingKey_1 = require("./spendingKey");
const ENCODER_VERSIONS = [
    json_1.JsonEncoder,
    mnemonic_1.MnemonicEncoder,
    spendingKey_1.SpendingKeyEncoder,
    bech32json_1.Bech32JsonEncoder,
    bech32_1.Bech32Encoder,
];
function encodeAccount(value, format, options = {}) {
    switch (format) {
        case encoder_1.AccountFormat.JSON:
            return new json_1.JsonEncoder().encode(value);
        case encoder_1.AccountFormat.Bech32:
            return new bech32_1.Bech32Encoder().encode(value);
        case encoder_1.AccountFormat.SpendingKey:
            return new spendingKey_1.SpendingKeyEncoder().encode(value);
        case encoder_1.AccountFormat.Mnemonic:
            return new mnemonic_1.MnemonicEncoder().encode(value, options);
        default:
            return assert_1.Assert.isUnreachable(format);
    }
}
exports.encodeAccount = encodeAccount;
function decodeAccount(value, options = {}) {
    const errors = [];
    for (const encoder of ENCODER_VERSIONS) {
        try {
            const decoded = new encoder().decode(value, options);
            if (decoded) {
                return decoded;
            }
        }
        catch (e) {
            if (e instanceof encoder_1.DecodeFailed) {
                errors.push(e);
            }
            else {
                throw e;
            }
        }
    }
    const errorString = errors.map((error) => `${error.decoder}: ${error.message}`).join('\n');
    throw new Error(`Account could not be decoded, decoder errors:\n${errorString} `);
}
exports.decodeAccount = decodeAccount;
//# sourceMappingURL=account.js.map