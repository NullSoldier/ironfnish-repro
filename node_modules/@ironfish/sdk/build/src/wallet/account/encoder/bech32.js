"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bech32Encoder = exports.BECH32_ACCOUNT_PREFIX = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importStar(require("bufio"));
const utils_1 = require("../../../utils");
const accountValue_1 = require("../../walletdb/accountValue");
const account_1 = require("../account");
const encoder_1 = require("./encoder");
exports.BECH32_ACCOUNT_PREFIX = 'ifaccount';
class Bech32Encoder {
    constructor() {
        this.VERSION = 1;
    }
    encode(value) {
        const bw = bufio_1.default.write(this.getSize(value));
        bw.writeU16(this.VERSION);
        bw.writeVarString(value.name, 'utf8');
        bw.writeBytes(Buffer.from(value.viewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.incomingViewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.outgoingViewKey, 'hex'));
        bw.writeBytes(Buffer.from(value.publicAddress, 'hex'));
        bw.writeU8(Number(!!value.spendingKey));
        if (value.spendingKey) {
            bw.writeBytes(Buffer.from(value.spendingKey, 'hex'));
        }
        bw.writeU8(Number(!!value.createdAt));
        if (value.createdAt) {
            bw.writeBytes(value.createdAt.hash);
            bw.writeU32(value.createdAt.sequence);
        }
        return utils_1.Bech32m.encode(bw.render().toString('hex'), exports.BECH32_ACCOUNT_PREFIX);
    }
    decode(value, options) {
        const [hexEncoding, err] = utils_1.Bech32m.decode(value);
        if (!hexEncoding) {
            throw new encoder_1.DecodeFailed(`Could not decode account ${value} using bech32: ${err?.message || ''}`, this.constructor.name);
        }
        let name;
        let viewKey;
        let incomingViewKey;
        let outgoingViewKey;
        let publicAddress;
        let spendingKey;
        let createdAt = null;
        try {
            const buffer = Buffer.from(hexEncoding, 'hex');
            const reader = bufio_1.default.read(buffer, true);
            const version = reader.readU16();
            if (version !== this.VERSION) {
                throw new encoder_1.DecodeInvalid(`Encoded account version ${version} does not match encoder version ${this.VERSION}`);
            }
            name = reader.readVarString('utf8');
            viewKey = reader.readBytes(accountValue_1.VIEW_KEY_LENGTH).toString('hex');
            incomingViewKey = reader.readBytes(accountValue_1.KEY_LENGTH).toString('hex');
            outgoingViewKey = reader.readBytes(accountValue_1.KEY_LENGTH).toString('hex');
            publicAddress = reader.readBytes(rust_nodejs_1.PUBLIC_ADDRESS_LENGTH).toString('hex');
            const hasSpendingKey = reader.readU8() === 1;
            spendingKey = hasSpendingKey ? reader.readBytes(accountValue_1.KEY_LENGTH).toString('hex') : null;
            const hasCreatedAt = reader.readU8() === 1;
            if (hasCreatedAt) {
                const hash = reader.readBytes(32);
                const sequence = reader.readU32();
                createdAt = { hash, sequence };
            }
        }
        catch (e) {
            if (e instanceof bufio_1.EncodingError) {
                throw new encoder_1.DecodeFailed(`Bufio decoding failed while using bech32 encoder: ${e.message}`, this.constructor.name);
            }
            throw e;
        }
        return {
            version: account_1.ACCOUNT_SCHEMA_VERSION,
            name: options?.name ? options.name : name,
            viewKey,
            incomingViewKey,
            outgoingViewKey,
            spendingKey,
            publicAddress,
            createdAt,
        };
    }
    getSize(value) {
        let size = 0;
        size += 2; // encoder version
        size += bufio_1.default.sizeVarString(value.name, 'utf8');
        size += accountValue_1.VIEW_KEY_LENGTH;
        size += accountValue_1.KEY_LENGTH; // incomingViewKey
        size += accountValue_1.KEY_LENGTH; // outgoingViewKey
        size += rust_nodejs_1.PUBLIC_ADDRESS_LENGTH;
        size += 1; // spendingKey byte
        if (value.spendingKey) {
            size += accountValue_1.KEY_LENGTH;
        }
        size += 1; // createdAt byte
        if (value.createdAt) {
            size += 32; // block hash
            size += 4; // block sequence
        }
        return size;
    }
}
exports.Bech32Encoder = Bech32Encoder;
//# sourceMappingURL=bech32.js.map