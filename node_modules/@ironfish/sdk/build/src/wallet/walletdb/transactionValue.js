"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionValueEncoding = void 0;
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const buffer_map_1 = require("buffer-map");
const bufio_1 = __importDefault(require("bufio"));
const primitives_1 = require("../../primitives");
class TransactionValueEncoding {
    serialize(value) {
        const { transaction, blockHash, sequence, submittedSequence, timestamp } = value;
        const bw = bufio_1.default.write(this.getSize(value));
        bw.writeVarBytes(transaction.serialize());
        bw.writeU64(timestamp.getTime());
        let flags = 0;
        flags |= Number(!!blockHash) << 0;
        flags |= Number(!!sequence) << 1;
        bw.writeU8(flags);
        if (blockHash) {
            bw.writeHash(blockHash);
        }
        if (sequence) {
            bw.writeU32(sequence);
        }
        bw.writeU32(submittedSequence);
        const assetCount = value.assetBalanceDeltas.size;
        bw.writeU32(assetCount);
        for (const [assetId, balanceDelta] of value.assetBalanceDeltas) {
            bw.writeHash(assetId);
            bw.writeBigI64(balanceDelta);
        }
        return bw.render();
    }
    deserialize(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const transaction = new primitives_1.Transaction(reader.readVarBytes());
        const timestamp = new Date(reader.readU64());
        const flags = reader.readU8();
        const hasBlockHash = flags & (1 << 0);
        const hasSequence = flags & (1 << 1);
        let blockHash = null;
        if (hasBlockHash) {
            blockHash = reader.readHash();
        }
        let sequence = null;
        if (hasSequence) {
            sequence = reader.readU32();
        }
        const submittedSequence = reader.readU32();
        const assetBalanceDeltas = new buffer_map_1.BufferMap();
        const assetCount = reader.readU32();
        for (let i = 0; i < assetCount; i++) {
            const assetId = reader.readHash();
            const balanceDelta = reader.readBigI64();
            assetBalanceDeltas.set(assetId, balanceDelta);
        }
        return {
            transaction,
            blockHash,
            submittedSequence,
            sequence,
            timestamp,
            assetBalanceDeltas,
        };
    }
    getSize(value) {
        let size = bufio_1.default.sizeVarBytes(value.transaction.serialize());
        size += 8;
        size += 1;
        if (value.blockHash) {
            size += 32;
        }
        if (value.sequence) {
            size += 4;
        }
        size += 4;
        size += 4;
        size += value.assetBalanceDeltas.size * (rust_nodejs_1.ASSET_ID_LENGTH + 8);
        return size;
    }
}
exports.TransactionValueEncoding = TransactionValueEncoding;
//# sourceMappingURL=transactionValue.js.map