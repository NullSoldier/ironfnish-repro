import { Blockchain } from '../blockchain';
import { Config } from '../fileStores/config';
import { Logger } from '../logger';
import { MetricsMonitor } from '../metrics';
import { Identity } from '../network';
import { BlockHeader, Transaction } from '../primitives';
import { Block } from '../primitives/block';
import { WorkerPool } from '../workerPool';
import { Field } from './interfaces/field';
import { Metric } from './interfaces/metric';
import { Tag } from './interfaces/tag';
export declare class Telemetry {
    private readonly FLUSH_INTERVAL;
    private readonly MAX_POINTS_TO_SUBMIT;
    private readonly MAX_RETRIES;
    private readonly METRICS_INTERVAL;
    private readonly chain;
    private readonly config;
    private readonly defaultTags;
    private readonly defaultFields;
    private readonly logger;
    private readonly metrics;
    private readonly workerPool;
    private readonly localPeerIdentity;
    private readonly apiUrl;
    private started;
    private flushInterval;
    private metricsInterval;
    private points;
    private retries;
    private _submitted;
    constructor(options: {
        chain: Blockchain;
        workerPool: WorkerPool;
        config: Config;
        logger?: Logger;
        metrics?: MetricsMonitor;
        localPeerIdentity: Identity;
        defaultFields?: Field[];
        defaultTags?: Tag[];
        networkId: number;
    });
    get pending(): number;
    get submitted(): number;
    start(): void;
    stop(): Promise<void>;
    isStarted(): boolean;
    flushLoop(): Promise<void>;
    private metricsLoop;
    submit(metric: Metric): void;
    flush(): Promise<void>;
    submitNodeStarted(): void;
    submitNodeStopped(): void;
    submitBlockMined(block: Block): void;
    submitNewBlockSeen(block: Block, seenAt: Date): void;
    submitCompactBlockAssembled(header: BlockHeader, missingTransactionCount: number, foundTransactionCount: number): void;
    submitNewTransactionSeen(transaction: Transaction, seenAt: Date): void;
    private shouldSubmitTransaction;
}
//# sourceMappingURL=telemetry.d.ts.map