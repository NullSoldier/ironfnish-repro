"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bech32m = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bech32_1 = require("bech32");
const assert_1 = require("../assert");
// 1023 is maximum character count where the checksum will still catch errors
function decode(bech32String, limit = 1023) {
    const decoded = bech32_1.bech32m.decodeUnsafe(bech32String, limit);
    if (decoded === undefined) {
        return [null, new Error(`Failed to decode`)];
    }
    const bytes = bech32_1.bech32m.fromWordsUnsafe(decoded.words);
    if (bytes === undefined) {
        return [null, new Error(`Failed to get bytes from words`)];
    }
    const output = Buffer.from(bytes).toString('utf8');
    return [output, null];
}
function encode(input, prefix, limit = 1023) {
    assert_1.Assert.isTruthy(prefix, `Prefix is required by bech32`);
    const bytes = Buffer.from(input, 'utf8');
    const words = bech32_1.bech32m.toWords(bytes);
    const encoded = bech32_1.bech32m.encode(prefix, words, limit);
    return encoded;
}
exports.Bech32m = {
    encode,
    decode,
};
//# sourceMappingURL=bech32m.js.map