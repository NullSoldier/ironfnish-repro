"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorUtils = exports.renderError = void 0;
const errors_1 = require("../rpc/clients/errors");
/**
 * This is used to unwrap a message from an error
 *
 * Falls back to JSON.stringify the error if we cannot get the message
 */
function renderError(error, stack = false) {
    if (!error) {
        return '';
    }
    if (stack) {
        if (error instanceof errors_1.RpcRequestError && error.codeStack) {
            // stack also contains the error message
            return `${error.message}\n${error.codeStack}`;
        }
        if (error instanceof Error && error.stack) {
            // stack also contains the error message
            return error.stack;
        }
    }
    if (error instanceof Error) {
        return error.message;
    }
    if (typeof error === 'string') {
        return error;
    }
    return JSON.stringify(error);
}
exports.renderError = renderError;
function isConnectRefusedError(error) {
    return isNodeError(error) && error.code === 'ECONNREFUSED';
}
function isConnectResetError(error) {
    return isNodeError(error) && error.code === 'ECONNRESET';
}
function isConnectTimeOutError(error) {
    return isNodeError(error) && error.code === 'ETIMEDOUT';
}
function isNoEntityError(error) {
    return isNodeError(error) && error.code === 'ENOENT';
}
function isNodeError(error) {
    return error instanceof Error && 'code' in error && typeof error['code'] === 'string';
}
function isNotFoundError(error) {
    return isNodeError(error) && error.code === 'not-found';
}
exports.ErrorUtils = {
    renderError,
    isConnectRefusedError,
    isConnectResetError,
    isConnectTimeOutError,
    isNoEntityError,
    isNodeError,
    isNotFoundError,
};
//# sourceMappingURL=error.js.map