"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MathUtils = void 0;
function arrayAverage(values) {
    if (values.length === 0) {
        return 0;
    }
    let total = 0;
    for (const value of values) {
        total += value;
    }
    return total / values.length;
}
function arrayMedian(values, isSorted = false) {
    if (values.length === 0) {
        return 0;
    }
    // TODO(mat): We can use values.toSorted() when we set NodeJS min version to 20
    const sorted = isSorted ? values : [...values].sort();
    const half = Math.floor(sorted.length / 2);
    if (sorted.length % 2) {
        return sorted[half];
    }
    return sorted[half - 1] + values[half] / 2;
}
function arraySum(values) {
    if (values.length === 0) {
        return 0;
    }
    let total = 0;
    for (const value of values) {
        total += value;
    }
    return total;
}
function round(value, places) {
    const scalar = Math.pow(10, places);
    return Math.round(value * scalar) / scalar;
}
/**
 * Floor the decimal places to @places
 */
function floor(value, places) {
    const multiplier = Math.pow(10, places);
    const adjusted = value * multiplier;
    const truncated = adjusted < 0 ? Math.ceil(adjusted) : Math.floor(adjusted);
    return truncated / multiplier;
}
/**
 * Round a number to the nearest threshold increment
 */
function roundBy(num, threshold) {
    return threshold * Math.round(num / threshold);
}
function max(a, b) {
    return a > b ? a : b;
}
function min(a, b) {
    return a > b ? b : a;
}
exports.MathUtils = {
    arrayAverage,
    arrayMedian,
    arraySum,
    round,
    roundBy,
    min,
    max,
    floor,
};
//# sourceMappingURL=math.js.map