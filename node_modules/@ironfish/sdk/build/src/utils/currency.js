"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAXIMUM_IRON_AMOUNT = exports.MINIMUM_IRON_AMOUNT = exports.MAXIMUM_ORE_AMOUNT = exports.MINIMUM_ORE_AMOUNT = exports.ORE_TO_IRON = exports.isParseFixedError = exports.CurrencyUtils = void 0;
const bignumber_1 = require("@ethersproject/bignumber");
const asset_1 = require("./asset");
const bigint_1 = require("./bigint");
const error_1 = require("./error");
const fixedNumber_1 = require("./fixedNumber");
class CurrencyUtils {
    /**
     * Serializes ore as iron with up to 8 decimal places
     */
    static encodeIron(amount) {
        return bignumber_1.formatFixed(amount, 8);
    }
    /**
     * Parses iron into ore
     */
    static decodeIron(amount) {
        return bignumber_1.parseFixed(amount.toString(), 8).toBigInt();
    }
    /**
     * Parses iron into ore but returns the error if parsing fails
     */
    static decodeIronTry(amount) {
        try {
            const parsed = bignumber_1.parseFixed(amount.toString(), 8).toBigInt();
            return [parsed, null];
        }
        catch (e) {
            if (isParseFixedError(e)) {
                return [null, e];
            }
            throw e;
        }
    }
    /**
     * Deserialize ore back into bigint
     */
    static decode(amount) {
        return BigInt(amount);
    }
    static decodeTry(amount) {
        return bigint_1.BigIntUtils.tryParse(amount);
    }
    /**
     * Serialize ore into a string
     */
    static encode(amount) {
        return amount.toString();
    }
    /*
     * Renders ore as iron for human-readable purposes
     */
    static renderIron(amount, includeTicker = false, assetId) {
        if (typeof amount === 'string') {
            amount = this.decode(amount);
        }
        const iron = fixedNumber_1.FixedNumberUtils.render(amount, 8);
        if (includeTicker) {
            let ticker = '$IRON';
            if (assetId && !asset_1.isNativeIdentifier(assetId)) {
                ticker = assetId;
            }
            return `${ticker} ${iron}`;
        }
        return iron;
    }
    /*
     * Renders ore for human-readable purposes
     */
    static renderOre(amount, includeTicker = false, assetId) {
        if (typeof amount === 'string') {
            amount = this.decode(amount);
        }
        const ore = amount.toString();
        if (includeTicker) {
            let ticker = '$ORE';
            if (assetId && !asset_1.isNativeIdentifier(assetId)) {
                ticker = assetId;
            }
            return `${ticker} ${ore}`;
        }
        return ore;
    }
}
exports.CurrencyUtils = CurrencyUtils;
function isParseFixedError(error) {
    return (error_1.ErrorUtils.isNodeError(error) &&
        (error['code'] === 'INVALID_ARGUMENT' || error['code'] === 'NUMERIC_FAULT') &&
        'reason' in error &&
        typeof error['reason'] === 'string');
}
exports.isParseFixedError = isParseFixedError;
exports.ORE_TO_IRON = 100000000;
exports.MINIMUM_ORE_AMOUNT = 0n;
exports.MAXIMUM_ORE_AMOUNT = 2n ** 64n;
exports.MINIMUM_IRON_AMOUNT = CurrencyUtils.renderIron(exports.MINIMUM_ORE_AMOUNT);
exports.MAXIMUM_IRON_AMOUNT = CurrencyUtils.renderIron(exports.MAXIMUM_ORE_AMOUNT);
//# sourceMappingURL=currency.js.map