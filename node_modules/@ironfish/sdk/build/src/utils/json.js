"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONUtils = exports.ParseJsonError = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const parse_json_1 = __importStar(require("parse-json"));
const assert_1 = require("../assert");
class ParseJsonError extends Error {
    constructor(fileName, message, codeFrame) {
        super(`Parsing ${fileName} Failed\n${message}`);
        this.name = this.constructor.name;
        this.jsonFileName = fileName;
        this.jsonMessage = message;
        this.jsonCodeFrame = codeFrame;
    }
}
exports.ParseJsonError = ParseJsonError;
function parse(data, fileName) {
    const [result, error] = tryParse(data, fileName);
    if (error) {
        throw error;
    }
    assert_1.Assert.isNotNull(result);
    return result;
}
function tryParse(data, fileName) {
    try {
        const config = parse_json_1.default(data, fileName || '');
        return [config, null];
    }
    catch (e) {
        if (e instanceof parse_json_1.JSONError) {
            const error = new ParseJsonError(e.fileName, e.message, e.codeFrame);
            return [null, error];
        }
        throw e;
    }
}
exports.JSONUtils = { parse, tryParse };
//# sourceMappingURL=json.js.map