"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainUtils = exports.getBlockRange = void 0;
const block_1 = require("../primitives/block");
function getBlockRange(chain, range) {
    const min = Number(block_1.GENESIS_BLOCK_SEQUENCE);
    const max = Number(chain.latest.sequence);
    let start = range?.start ? range.start : min;
    let stop = range?.stop ? range.stop : max;
    // Negative numbers start from the end
    if (start < 0) {
        start = max + start;
    }
    if (stop < 0) {
        stop = max + stop;
    }
    // Truncate fractions from parameters
    stop = Math.floor(stop);
    start = Math.floor(start);
    // Ensure values are in valid range and start < stop
    start = Math.min(Math.max(start, min), max);
    stop = Math.max(Math.min(Math.max(stop, min), max), start);
    return { start, stop };
}
exports.getBlockRange = getBlockRange;
// Returns the block header at the given sequence or hash
async function blockHeaderBySequenceOrHash(chain, start) {
    if (Buffer.isBuffer(start)) {
        return await chain.getHeader(start);
    }
    return await chain.getHeaderAtSequence(start);
}
exports.BlockchainUtils = { getBlockRange, blockHeaderBySequenceOrHash };
//# sourceMappingURL=blockchain.js.map