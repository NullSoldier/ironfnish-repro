import * as yup from 'yup';
import { UnwrapPromise } from './types';
export declare type YupSchema<Result = unknown, Context = unknown> = yup.Schema<Result, Context>;
export declare type YupSchemaResult<S extends yup.Schema<unknown, unknown>> = UnwrapPromise<ReturnType<S['validate']>>;
export declare type YupSchemaResultSync<S extends yup.Schema<unknown, unknown>> = ReturnType<S['validate']>;
export declare class YupUtils {
    static isPositiveInteger: yup.NumberSchema<number | undefined, object>;
    static isPort: yup.NumberSchema<number | undefined, object>;
    static isPercent: yup.NumberSchema<number | undefined, object>;
    static isUrl: yup.StringSchema<string | undefined, object>;
    static currency: (options?: {
        min?: bigint | undefined;
    } | undefined) => yup.StringSchema;
    static tryValidate<S extends YupSchema>(schema: S, value: unknown, options?: yup.ValidateOptions<unknown>): Promise<{
        result: YupSchemaResult<S>;
        error: null;
    } | {
        result: null;
        error: yup.ValidationError;
    }>;
    static tryValidateSync<S extends YupSchema>(schema: S, value: unknown, options?: yup.ValidateOptions<unknown>): {
        result: YupSchemaResultSync<S>;
        error: null;
    } | {
        result: null;
        error: yup.ValidationError;
    };
}
//# sourceMappingURL=yup.d.ts.map