/**
 * This is used to unwrap a message from an error
 *
 * Falls back to JSON.stringify the error if we cannot get the message
 */
export declare function renderError(error: unknown, stack?: boolean): string;
declare function isConnectRefusedError(error: unknown): error is Error & {
    code: 'ECONNREFUSED';
};
declare function isConnectResetError(error: unknown): error is Error & {
    code: 'ECONNRESET';
};
declare function isConnectTimeOutError(error: unknown): error is Error & {
    code: 'ETIMEDOUT';
};
declare function isNoEntityError(error: unknown): error is Error & {
    code: 'ENOENT';
};
declare function isNodeError(error: unknown): error is Error & {
    code: string;
};
declare function isNotFoundError(error: unknown): error is Error & {
    code: 'not-found';
};
export declare const ErrorUtils: {
    renderError: typeof renderError;
    isConnectRefusedError: typeof isConnectRefusedError;
    isConnectResetError: typeof isConnectResetError;
    isConnectTimeOutError: typeof isConnectTimeOutError;
    isNoEntityError: typeof isNoEntityError;
    isNodeError: typeof isNodeError;
    isNotFoundError: typeof isNotFoundError;
};
export {};
//# sourceMappingURL=error.d.ts.map