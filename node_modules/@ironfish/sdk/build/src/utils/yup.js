"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YupUtils = void 0;
const yup = __importStar(require("yup"));
const currency_1 = require("./currency");
class YupUtils {
    static async tryValidate(schema, value, options) {
        if (!options) {
            options = { stripUnknown: true };
        }
        if (options.stripUnknown === undefined) {
            options.stripUnknown = true;
        }
        try {
            const result = await schema.validate(value, options);
            return { result: result, error: null };
        }
        catch (e) {
            if (e instanceof yup.ValidationError) {
                return { result: null, error: e };
            }
            throw e;
        }
    }
    static tryValidateSync(schema, value, options) {
        if (!options) {
            options = { stripUnknown: true };
        }
        if (options.stripUnknown === undefined) {
            options.stripUnknown = true;
        }
        try {
            const result = schema.validateSync(value, options);
            return { result: result, error: null };
        }
        catch (e) {
            if (e instanceof yup.ValidationError) {
                return { result: null, error: e };
            }
            throw e;
        }
    }
}
exports.YupUtils = YupUtils;
YupUtils.isPositiveInteger = yup.number().integer().min(0);
YupUtils.isPort = yup.number().integer().min(1).max(65535);
YupUtils.isPercent = yup.number().min(0).max(100);
YupUtils.isUrl = yup.string().url();
YupUtils.currency = (options) => {
    let schema = yup.string().test('currency', `Must be encoded currency`, (val) => {
        if (val == null) {
            return true;
        }
        const [value] = currency_1.CurrencyUtils.decodeTry(val);
        return value != null;
    });
    if (options?.min != null) {
        const min = options?.min;
        schema = schema.test('min', `value must be equal to or greater than ${min.toString()}`, (val) => {
            if (val == null) {
                return true;
            }
            const [value] = currency_1.CurrencyUtils.decodeTry(val);
            return value != null && value >= min;
        });
    }
    return schema;
};
//# sourceMappingURL=yup.js.map