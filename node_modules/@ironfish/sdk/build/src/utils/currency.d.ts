export declare class CurrencyUtils {
    static locale?: string;
    /**
     * Serializes ore as iron with up to 8 decimal places
     */
    static encodeIron(amount: bigint): string;
    /**
     * Parses iron into ore
     */
    static decodeIron(amount: string | number): bigint;
    /**
     * Parses iron into ore but returns the error if parsing fails
     */
    static decodeIronTry(amount: string | number): [bigint, null] | [null, ParseFixedError];
    /**
     * Deserialize ore back into bigint
     */
    static decode(amount: string): bigint;
    static decodeTry(amount: string): [bigint, null] | [null, Error];
    /**
     * Serialize ore into a string
     */
    static encode(amount: bigint): string;
    static renderIron(amount: bigint | string, includeTicker?: boolean, assetId?: string): string;
    static renderOre(amount: bigint | string, includeTicker?: boolean, assetId?: string): string;
}
export interface ParseFixedError extends Error {
    code: 'INVALID_ARGUMENT' | 'NUMERIC_FAULT';
    reason: string;
}
export declare function isParseFixedError(error: unknown): error is ParseFixedError;
export declare const ORE_TO_IRON = 100000000;
export declare const MINIMUM_ORE_AMOUNT = 0n;
export declare const MAXIMUM_ORE_AMOUNT: bigint;
export declare const MINIMUM_IRON_AMOUNT: string;
export declare const MAXIMUM_IRON_AMOUNT: string;
//# sourceMappingURL=currency.d.ts.map