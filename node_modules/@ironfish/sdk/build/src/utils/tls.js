"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TlsUtils = void 0;
const node_forge_1 = require("node-forge");
async function getTlsOptions(fileSystem, nodeKeyPath, nodeCertPath, logger) {
    const nodeKeyExists = await fileSystem.exists(nodeKeyPath);
    const nodeCertExists = await fileSystem.exists(nodeCertPath);
    if (!nodeKeyExists || !nodeCertExists) {
        logger.debug(`Missing TLS key and/or cert files at ${nodeKeyPath} and ${nodeCertPath}. Automatically generating key and self-signed cert`);
        return await generateTlsCerts(fileSystem, nodeKeyPath, nodeCertPath);
    }
    return {
        key: await fileSystem.readFile(nodeKeyPath),
        cert: await fileSystem.readFile(nodeCertPath),
    };
}
async function generateTlsCerts(fileSystem, nodeKeyPath, nodeCertPath) {
    const keyPair = node_forge_1.pki.rsa.generateKeyPair(2048);
    const cert = node_forge_1.pki.createCertificate();
    cert.publicKey = keyPair.publicKey;
    cert.sign(keyPair.privateKey);
    const nodeKeyPem = node_forge_1.pki.privateKeyToPem(keyPair.privateKey);
    const nodeCertPem = node_forge_1.pki.certificateToPem(cert);
    const nodeKeyDir = fileSystem.dirname(nodeKeyPath);
    const nodeCertDir = fileSystem.dirname(nodeCertPath);
    await fileSystem.mkdir(nodeKeyDir, { recursive: true });
    await fileSystem.mkdir(nodeCertDir, { recursive: true });
    await fileSystem.writeFile(nodeKeyPath, nodeKeyPem);
    await fileSystem.writeFile(nodeCertPath, nodeCertPem);
    return { key: nodeKeyPem, cert: nodeCertPem };
}
exports.TlsUtils = { generateTlsCerts, getTlsOptions };
//# sourceMappingURL=tls.js.map