"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUtils = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const math_1 = require("./math");
const fileSizeSuffix = { B: 'B', KB: 'KB', MB: 'MB', GB: 'GB', TB: 'TB', PB: 'PB' };
const hashRateSuffix = { B: 'H', KB: 'KH', MB: 'MH', GB: 'GH', TB: 'TH', PB: 'PH' };
const memorySizeSuffix = {
    B: 'B',
    KB: 'KiB',
    MB: 'MiB',
    GB: 'GiB',
    TB: 'TiB',
    PB: 'PiB',
};
const formatSize = (bytes, base, suffix) => {
    if (bytes < Math.pow(base, 1)) {
        return `${bytes.toFixed(0)} ${suffix.B}`;
    }
    if (bytes < Math.pow(base, 2)) {
        return math_1.MathUtils.floor(bytes / Math.pow(base, 1), 2).toFixed(2) + ` ${suffix.KB}`;
    }
    if (bytes < Math.pow(base, 3)) {
        return math_1.MathUtils.floor(bytes / Math.pow(base, 2), 2).toFixed(2) + ` ${suffix.MB}`;
    }
    if (bytes < Math.pow(base, 4)) {
        return math_1.MathUtils.floor(bytes / Math.pow(base, 3), 2).toFixed(2) + ` ${suffix.GB}`;
    }
    if (bytes < Math.pow(base, 5)) {
        return math_1.MathUtils.floor(bytes / Math.pow(base, 4), 2).toFixed(2) + ` ${suffix.TB}`;
    }
    return math_1.MathUtils.floor(bytes / Math.pow(base, 5), 2).toFixed(2) + ` ${suffix.PB}`;
};
const formatFileSize = (bytes) => {
    return formatSize(bytes, 1000, fileSizeSuffix);
};
const formatMemorySize = (bytes) => {
    return formatSize(bytes, 1024, memorySizeSuffix);
};
const formatHashRate = (bytes) => {
    return formatSize(bytes, 1000, hashRateSuffix);
};
exports.FileUtils = { formatFileSize, formatMemorySize, formatHashRate };
//# sourceMappingURL=file.js.map