"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateMinersFeeTask = exports.CreateMinersFeeResponse = exports.CreateMinersFeeRequest = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const utils_1 = require("../../utils");
const workerMessage_1 = require("./workerMessage");
const workerTask_1 = require("./workerTask");
class CreateMinersFeeRequest extends workerMessage_1.WorkerMessage {
    constructor(amount, memo, spendKey, jobId) {
        super(workerMessage_1.WorkerMessageType.CreateMinersFee, jobId);
        this.amount = amount;
        this.memo = memo;
        this.spendKey = spendKey;
    }
    serializePayload(bw) {
        bw.writeVarBytes(utils_1.BigIntUtils.toBytesBE(this.amount));
        bw.writeVarString(this.memo, 'utf8');
        bw.writeVarString(this.spendKey, 'utf8');
    }
    static deserializePayload(jobId, buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const amount = utils_1.BigIntUtils.fromBytesBE(reader.readVarBytes());
        const memo = reader.readVarString('utf8');
        const spendKey = reader.readVarString('utf8');
        return new CreateMinersFeeRequest(amount, memo, spendKey, jobId);
    }
    getSize() {
        return (bufio_1.default.sizeVarBytes(utils_1.BigIntUtils.toBytesBE(this.amount)) +
            bufio_1.default.sizeVarString(this.memo, 'utf8') +
            bufio_1.default.sizeVarString(this.spendKey, 'utf8'));
    }
}
exports.CreateMinersFeeRequest = CreateMinersFeeRequest;
class CreateMinersFeeResponse extends workerMessage_1.WorkerMessage {
    constructor(serializedTransactionPosted, jobId) {
        super(workerMessage_1.WorkerMessageType.CreateMinersFee, jobId);
        this.serializedTransactionPosted = serializedTransactionPosted;
    }
    serializePayload(bw) {
        bw.writeBytes(Buffer.from(this.serializedTransactionPosted));
    }
    static deserializePayload(jobId, buffer) {
        return new CreateMinersFeeResponse(Uint8Array.from(buffer), jobId);
    }
    getSize() {
        return this.serializedTransactionPosted.byteLength;
    }
}
exports.CreateMinersFeeResponse = CreateMinersFeeResponse;
class CreateMinersFeeTask extends workerTask_1.WorkerTask {
    static getInstance() {
        if (!CreateMinersFeeTask.instance) {
            CreateMinersFeeTask.instance = new CreateMinersFeeTask();
        }
        return CreateMinersFeeTask.instance;
    }
    execute({ amount, memo, spendKey, jobId }) {
        // Generate a public address from the miner's spending key
        const minerPublicAddress = rust_nodejs_1.generateKeyFromPrivateKey(spendKey).publicAddress;
        const minerNote = new rust_nodejs_1.Note(minerPublicAddress, amount, memo, rust_nodejs_1.Asset.nativeId(), minerPublicAddress);
        const transaction = new rust_nodejs_1.Transaction(spendKey);
        transaction.output(minerNote);
        const serializedTransactionPosted = transaction.post_miners_fee();
        return new CreateMinersFeeResponse(serializedTransactionPosted, jobId);
    }
}
exports.CreateMinersFeeTask = CreateMinersFeeTask;
//# sourceMappingURL=createMinersFee.js.map