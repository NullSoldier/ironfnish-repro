"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyTransactionsTask = exports.VerifyTransactionsResponse = exports.VerifyTransactionsRequest = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const rust_nodejs_1 = require("@ironfish/rust-nodejs");
const bufio_1 = __importDefault(require("bufio"));
const workerMessage_1 = require("./workerMessage");
const workerTask_1 = require("./workerTask");
class VerifyTransactionsRequest extends workerMessage_1.WorkerMessage {
    constructor(transactionsPosted, jobId) {
        super(workerMessage_1.WorkerMessageType.VerifyTransactions, jobId);
        this.transactionsPosted = transactionsPosted;
    }
    serializePayload(bw) {
        bw.writeU64(this.transactionsPosted.length);
        for (const tx of this.transactionsPosted) {
            bw.writeVarBytes(tx);
        }
    }
    static deserializePayload(jobId, buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const txLength = reader.readU64();
        const transactionsPosted = [];
        for (let i = 0; i < txLength; i++) {
            const tx = reader.readVarBytes();
            transactionsPosted.push(tx);
        }
        return new VerifyTransactionsRequest(transactionsPosted, jobId);
    }
    getSize() {
        let size = 8;
        for (const tx of this.transactionsPosted) {
            size += bufio_1.default.sizeVarBytes(tx);
        }
        return size;
    }
}
exports.VerifyTransactionsRequest = VerifyTransactionsRequest;
class VerifyTransactionsResponse extends workerMessage_1.WorkerMessage {
    constructor(verified, jobId) {
        super(workerMessage_1.WorkerMessageType.VerifyTransactions, jobId);
        this.verified = verified;
    }
    serializePayload(bw) {
        bw.writeU8(Number(this.verified));
    }
    static deserializePayload(jobId, buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const verified = Boolean(reader.readU8());
        return new VerifyTransactionsResponse(verified, jobId);
    }
    getSize() {
        return 1;
    }
}
exports.VerifyTransactionsResponse = VerifyTransactionsResponse;
class VerifyTransactionsTask extends workerTask_1.WorkerTask {
    static getInstance() {
        if (!VerifyTransactionsTask.instance) {
            VerifyTransactionsTask.instance = new VerifyTransactionsTask();
        }
        return VerifyTransactionsTask.instance;
    }
    execute({ jobId, transactionsPosted, }) {
        let verified = false;
        try {
            verified = rust_nodejs_1.verifyTransactions(transactionsPosted);
        }
        catch (e) {
            verified = false;
        }
        return new VerifyTransactionsResponse(verified, jobId);
    }
}
exports.VerifyTransactionsTask = VerifyTransactionsTask;
//# sourceMappingURL=verifyTransactions.js.map