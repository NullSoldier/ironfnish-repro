"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostTransactionTask = exports.PostTransactionResponse = exports.PostTransactionRequest = void 0;
const bufio_1 = __importDefault(require("bufio"));
const primitives_1 = require("../../primitives");
const rawTransaction_1 = require("../../primitives/rawTransaction");
const wallet_1 = require("../../wallet");
const workerMessage_1 = require("./workerMessage");
const workerTask_1 = require("./workerTask");
class PostTransactionRequest extends workerMessage_1.WorkerMessage {
    constructor(transaction, spendingKey, jobId) {
        super(workerMessage_1.WorkerMessageType.PostTransaction, jobId);
        this.transaction = transaction;
        this.spendingKey = spendingKey;
    }
    serializePayload(bw) {
        bw.writeBytes(Buffer.from(this.spendingKey, 'hex'));
        bw.writeBytes(rawTransaction_1.RawTransactionSerde.serialize(this.transaction));
    }
    static deserializePayload(jobId, buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const spendingKey = reader.readBytes(wallet_1.ACCOUNT_KEY_LENGTH).toString('hex');
        const raw = rawTransaction_1.RawTransactionSerde.deserialize(reader.readBytes(buffer.length - wallet_1.ACCOUNT_KEY_LENGTH));
        return new PostTransactionRequest(raw, spendingKey, jobId);
    }
    getSize() {
        return rawTransaction_1.RawTransactionSerde.getSize(this.transaction) + wallet_1.ACCOUNT_KEY_LENGTH;
    }
}
exports.PostTransactionRequest = PostTransactionRequest;
class PostTransactionResponse extends workerMessage_1.WorkerMessage {
    constructor(transaction, jobId) {
        super(workerMessage_1.WorkerMessageType.PostTransaction, jobId);
        this.transaction = transaction;
    }
    serializePayload(bw) {
        bw.writeVarBytes(this.transaction.serialize());
    }
    static deserializePayload(jobId, buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const transaction = new primitives_1.Transaction(reader.readVarBytes());
        return new PostTransactionResponse(transaction, jobId);
    }
    getSize() {
        return bufio_1.default.sizeVarBytes(this.transaction.serialize());
    }
}
exports.PostTransactionResponse = PostTransactionResponse;
class PostTransactionTask extends workerTask_1.WorkerTask {
    static getInstance() {
        if (!PostTransactionTask.instance) {
            PostTransactionTask.instance = new PostTransactionTask();
        }
        return PostTransactionTask.instance;
    }
    execute(request) {
        const posted = request.transaction.post(request.spendingKey);
        return new PostTransactionResponse(posted, request.jobId);
    }
}
exports.PostTransactionTask = PostTransactionTask;
//# sourceMappingURL=postTransaction.js.map