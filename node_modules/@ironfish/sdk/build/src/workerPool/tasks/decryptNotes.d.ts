/// <reference types="node" />
import bufio from 'bufio';
import { WorkerMessage } from './workerMessage';
import { WorkerTask } from './workerTask';
export interface DecryptNoteOptions {
    serializedNote: Buffer;
    incomingViewKey: string;
    outgoingViewKey: string;
    viewKey: string;
    currentNoteIndex: number | null;
    decryptForSpender: boolean;
}
export interface DecryptedNote {
    index: number | null;
    forSpender: boolean;
    hash: Buffer;
    nullifier: Buffer | null;
    serializedNote: Buffer;
}
export declare class DecryptNotesRequest extends WorkerMessage {
    readonly payloads: Array<DecryptNoteOptions>;
    constructor(payloads: Array<DecryptNoteOptions>, jobId?: number);
    serializePayload(bw: bufio.StaticWriter | bufio.BufferWriter): void;
    static deserializePayload(jobId: number, buffer: Buffer): DecryptNotesRequest;
    getSize(): number;
}
export declare class DecryptNotesResponse extends WorkerMessage {
    readonly notes: Array<DecryptedNote | null>;
    constructor(notes: Array<DecryptedNote | null>, jobId: number);
    serializePayload(bw: bufio.StaticWriter | bufio.BufferWriter): void;
    static deserializePayload(jobId: number, buffer: Buffer): DecryptNotesResponse;
    getSize(): number;
}
export declare class DecryptNotesTask extends WorkerTask {
    private static instance;
    static getInstance(): DecryptNotesTask;
    execute({ payloads, jobId }: DecryptNotesRequest): DecryptNotesResponse;
}
//# sourceMappingURL=decryptNotes.d.ts.map