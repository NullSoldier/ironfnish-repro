/// <reference types="node" />
import bufio from 'bufio';
import { Metric } from '../../telemetry/interfaces/metric';
import { WorkerMessage } from './workerMessage';
import { WorkerTask } from './workerTask';
export declare class SubmitTelemetryRequest extends WorkerMessage {
    readonly points: Metric[];
    readonly graffiti: Buffer;
    readonly apiHost: string;
    constructor(points: Metric[], graffiti: Buffer, apiHost: string, jobId?: number);
    serializePayload(bw: bufio.StaticWriter | bufio.BufferWriter): void;
    static deserializePayload(jobId: number, buffer: Buffer): SubmitTelemetryRequest;
    getSize(): number;
}
export declare class SubmitTelemetryResponse extends WorkerMessage {
    constructor(jobId: number);
    serializePayload(): void;
    static deserializePayload(jobId: number): SubmitTelemetryResponse;
    getSize(): number;
}
export declare class SubmitTelemetryTask extends WorkerTask {
    private static instance;
    static getInstance(): SubmitTelemetryTask;
    execute({ jobId, points, graffiti, apiHost, }: SubmitTelemetryRequest): Promise<SubmitTelemetryResponse>;
}
//# sourceMappingURL=submitTelemetry.d.ts.map