/// <reference types="node" />
import type { Job } from '../job';
import bufio from 'bufio';
import { WorkerMessage } from './workerMessage';
import { WorkerTask } from './workerTask';
export declare class SleepRequest extends WorkerMessage {
    readonly sleep: number;
    readonly error: string;
    constructor(sleep: number, error: string, jobId?: number);
    serializePayload(bw: bufio.StaticWriter | bufio.BufferWriter): void;
    static deserializePayload(jobId: number, buffer: Buffer): SleepRequest;
    getSize(): number;
}
export declare class SleepResponse extends WorkerMessage {
    readonly aborted: boolean;
    constructor(aborted: boolean, jobId: number);
    serializePayload(bw: bufio.StaticWriter | bufio.BufferWriter): void;
    static deserializePayload(jobId: number, buffer: Buffer): SleepResponse;
    getSize(): number;
}
export declare class SleepTask extends WorkerTask {
    private static instance;
    static getInstance(): SleepTask;
    execute({ jobId, sleep, error }: SleepRequest, job: Job): Promise<SleepResponse>;
}
//# sourceMappingURL=sleep.d.ts.map