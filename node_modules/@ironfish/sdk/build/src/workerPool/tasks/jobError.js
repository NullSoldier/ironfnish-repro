"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobError = exports.JobErrorMessage = void 0;
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
const bufio_1 = __importDefault(require("bufio"));
const utils_1 = require("../../utils");
const workerMessage_1 = require("./workerMessage");
class JobErrorMessage extends workerMessage_1.WorkerMessage {
    constructor(jobId, error) {
        super(workerMessage_1.WorkerMessageType.JobError, jobId);
        this.errorType = 'JobError';
        this.message = '';
        if (error) {
            this.errorType =
                typeof error === 'object' ? error?.constructor.name ?? typeof error : 'unknown';
            this.code = undefined;
            this.stack = undefined;
            this.message = utils_1.ErrorUtils.renderError(error);
            if (error instanceof Error) {
                this.code = error.name;
                this.stack = error.stack;
                if (utils_1.ErrorUtils.isNodeError(error)) {
                    this.code = error.code;
                }
            }
        }
    }
    serializePayload(bw) {
        bw.writeVarString(this.errorType, 'utf8');
        bw.writeVarString(this.message, 'utf8');
        if (this.code) {
            bw.writeVarString(this.code, 'utf8');
        }
        if (this.stack) {
            bw.writeVarString(this.stack, 'utf8');
        }
    }
    // We return JobError so the error can be propagated to a calling Promise's reject method
    static deserializePayload(jobId, buffer) {
        const br = bufio_1.default.read(buffer, true);
        const errorType = br.readVarString('utf8');
        const message = br.readVarString('utf8');
        let stack = undefined;
        let code = undefined;
        try {
            code = br.readVarString('utf8');
        }
        catch {
            code = undefined;
        }
        try {
            stack = br.readVarString('utf8');
        }
        catch {
            stack = undefined;
        }
        const err = new JobErrorMessage(jobId);
        err.errorType = errorType;
        err.message = message;
        err.code = code;
        err.stack = stack;
        return new JobError(err);
    }
    getSize() {
        const errorTypeSize = bufio_1.default.sizeVarString(this.errorType, 'utf8');
        const messageSize = bufio_1.default.sizeVarString(this.message, 'utf8');
        const codeSize = this.code ? bufio_1.default.sizeVarString(this.code, 'utf8') : 0;
        const stackSize = this.stack ? bufio_1.default.sizeVarString(this.stack, 'utf8') : 0;
        return errorTypeSize + messageSize + codeSize + stackSize;
    }
}
exports.JobErrorMessage = JobErrorMessage;
class JobError extends Error {
    constructor(jobErrorMessage) {
        super();
        this.name = this.constructor.name;
        this.type = 'JobError';
        this.code = undefined;
        if (jobErrorMessage) {
            this.code = jobErrorMessage.code;
            this.stack = jobErrorMessage.stack;
            this.message = jobErrorMessage.message;
            this.type = jobErrorMessage.errorType;
        }
    }
}
exports.JobError = JobError;
//# sourceMappingURL=jobError.js.map