import { Job } from './job';
import { WorkerMessageType } from './tasks/workerMessage';
export declare class RoundRobinQueue {
    private queueMap;
    private lastMapIndex;
    /**
     * Returns the total length of all queues.
     */
    get length(): number;
    /**
     * Simple queue that will iterate over each type of job sequentially so that each job type
     * will be guaranteed not to be backed up by one type queueing many jobs. This does not
     * solve the issue of long-running jobs, however. Luckily, this is not something we
     * have had to worry about yet.
     */
    constructor();
    /**
     * Add a job to that type's queue
     */
    enqueue(type: WorkerMessageType, job: Job): void;
    /**
     * Get the next job across all queues. Will iterate over each type
     * starting from the type after the last executed job's type.
     */
    nextJob(): Job | undefined;
    /**
     * Abort all existing jobs that have been queued, and empty the queues.
     */
    abortAll(): void;
}
//# sourceMappingURL=roundRobinQueue.d.ts.map