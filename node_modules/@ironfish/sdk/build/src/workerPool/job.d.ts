import { Event } from '../event';
import { PromiseReject, PromiseResolve } from '../utils';
import { WorkerMessage } from './tasks/workerMessage';
import { Worker } from './worker';
export declare class Job {
    id: number;
    request: WorkerMessage;
    worker: Worker | null;
    status: 'init' | 'queued' | 'executing' | 'success' | 'error' | 'aborted';
    promise: Promise<WorkerMessage>;
    resolve: PromiseResolve<WorkerMessage>;
    reject: PromiseReject;
    onEnded: Event<[Job]>;
    onChange: Event<[Job, "error" | "success" | "init" | "queued" | "executing" | "aborted"]>;
    enableJobAbortedError: boolean;
    constructor(request: WorkerMessage);
    abort(): void;
    execute(worker?: Worker | null): Job;
    result(): Promise<WorkerMessage>;
}
//# sourceMappingURL=job.d.ts.map