/// <reference types="node" />
import { MessagePort, Worker as WorkerThread } from 'worker_threads';
import { Logger } from '../logger';
import { Job } from './job';
import { WorkerMessage } from './tasks/workerMessage';
export declare class Worker {
    thread: WorkerThread | null;
    parent: MessagePort | null;
    path: string;
    jobs: Map<number, Job>;
    maxJobs: number;
    started: boolean;
    logger: Logger;
    get executing(): boolean;
    get canTakeJobs(): boolean;
    constructor(options: {
        parent?: MessagePort;
        path?: string;
        maxJobs?: number;
        logger?: Logger;
    });
    send(message: WorkerMessage): void;
    stop(): Promise<void>;
    /**
     * Called from the main process to spawn a worker thread
     */
    private spawn;
    /**
     * Called from the worker thread once the worker spawns in the thread
     */
    private spawned;
    private onMessageFromParent;
    private onMessageFromWorker;
    private parseRequest;
    private parseResponse;
}
export declare function getWorkerPath(): string;
//# sourceMappingURL=worker.d.ts.map