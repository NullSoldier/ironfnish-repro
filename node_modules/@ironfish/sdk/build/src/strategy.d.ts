import { Consensus } from './consensus';
import { Transaction } from './primitives/transaction';
import { WorkerPool } from './workerPool';
/**
 * Implementation of a Blockchain Strategy using zero-knowledge proofs.
 */
export declare class Strategy {
    readonly workerPool: WorkerPool;
    readonly consensus: Consensus;
    private miningRewardCachedByYear;
    constructor(options: {
        workerPool: WorkerPool;
        consensus: Consensus;
    });
    /**
     * Calculate the mining reward for a block based on its sequence
     *
     * See https://ironfish.network/docs/whitepaper/4_mining#include-the-miner-reward-based-on-coin-emission-schedule
     *
     * Annual coin issuance from mining goes down every year. Year is defined here by the
     * number of blocks
     *
     * Given the genesis block supply (genesisSupplyInIron) the formula to calculate
     * reward per block is:
     * (genesisSupply / 4) * e ^(-.05 * yearsAfterLaunch)
     * Where e is the natural number e (Euler's number), and -.05 is a decay function constant
     *
     * @param sequence Block sequence
     * @returns mining reward (in ORE) per block given the block sequence
     */
    miningReward(sequence: number): number;
    convertIronToOre(iron: number): number;
    /**
     * Create the miner's fee transaction for a given block.
     *
     * The miner's fee is a special transaction with one output and
     * zero spends. Its output value must be the total transaction fees
     * in the block plus the mining reward for the block.
     *
     * The mining reward may change over time, so we accept the block sequence
     * to calculate the mining reward from.
     *
     * @param totalTransactionFees is the sum of the transaction fees intended to go
     * in this block.
     * @param blockSequence the sequence of the block for which the miner's fee is being created
     * @param minerKey the spending key for the miner.
     */
    createMinersFee(totalTransactionFees: bigint, blockSequence: number, minerSpendKey: string): Promise<Transaction>;
}
//# sourceMappingURL=strategy.d.ts.map