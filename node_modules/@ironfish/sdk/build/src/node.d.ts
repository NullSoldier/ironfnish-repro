import { AssetsVerifier } from './assets';
import { Blockchain } from './blockchain';
import { Config, ConfigOptions, HostsStore, InternalStore } from './fileStores';
import { FileSystem } from './fileSystems';
import { Logger } from './logger';
import { MemPool } from './memPool';
import { MetricsMonitor } from './metrics';
import { Migrator } from './migrations';
import { MiningManager } from './mining';
import { PeerNetwork, PrivateIdentity } from './network';
import { IsomorphicWebSocketConstructor } from './network/types';
import { Package } from './package';
import { RpcServer } from './rpc/server';
import { Strategy } from './strategy';
import { Syncer } from './syncer';
import { Telemetry } from './telemetry/telemetry';
import { Wallet } from './wallet';
import { WorkerPool } from './workerPool';
export declare class FullNode {
    chain: Blockchain;
    strategy: Strategy;
    config: Config;
    internal: InternalStore;
    wallet: Wallet;
    logger: Logger;
    miningManager: MiningManager;
    metrics: MetricsMonitor;
    memPool: MemPool;
    migrator: Migrator;
    workerPool: WorkerPool;
    files: FileSystem;
    rpc: RpcServer;
    peerNetwork: PeerNetwork;
    syncer: Syncer;
    pkg: Package;
    telemetry: Telemetry;
    assetsVerifier: AssetsVerifier;
    started: boolean;
    shutdownPromise: Promise<void> | null;
    shutdownResolve: (() => void) | null;
    constructor({ pkg, chain, files, config, internal, wallet, strategy, metrics, memPool, workerPool, logger, webSocket, privateIdentity, hostsStore, networkId, assetsVerifier, }: {
        pkg: Package;
        files: FileSystem;
        config: Config;
        internal: InternalStore;
        wallet: Wallet;
        chain: Blockchain;
        strategy: Strategy;
        metrics: MetricsMonitor;
        memPool: MemPool;
        workerPool: WorkerPool;
        logger: Logger;
        webSocket: IsomorphicWebSocketConstructor;
        privateIdentity?: PrivateIdentity;
        hostsStore: HostsStore;
        networkId: number;
        assetsVerifier: AssetsVerifier;
    });
    static init({ pkg: pkg, dataDir, config, internal, autoSeed, logger, metrics, files, strategyClass, webSocket, privateIdentity, }: {
        pkg: Package;
        dataDir?: string;
        config?: Config;
        internal?: InternalStore;
        autoSeed?: boolean;
        logger?: Logger;
        metrics?: MetricsMonitor;
        files: FileSystem;
        strategyClass: typeof Strategy | null;
        webSocket: IsomorphicWebSocketConstructor;
        privateIdentity?: PrivateIdentity;
    }): Promise<FullNode>;
    openDB(): Promise<void>;
    closeDB(): Promise<void>;
    start(): Promise<void>;
    waitForShutdown(): Promise<void>;
    shutdown(): Promise<void>;
    onPeerNetworkReady(): void;
    onPeerNetworkNotReady(): void;
    onConfigChange<Key extends keyof ConfigOptions>(key: Key, newValue: ConfigOptions[Key]): Promise<void>;
}
//# sourceMappingURL=node.d.ts.map