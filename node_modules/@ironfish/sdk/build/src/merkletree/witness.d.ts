import { NoteEncrypted, NoteEncryptedHash, SerializedNoteEncrypted, SerializedNoteEncryptedHash } from '../primitives/noteEncrypted';
import { JsonSerializable } from '../serde';
import { MerkleHasher } from './hasher';
import { Side } from './merkletree';
export interface WitnessNode<H> {
    side: Side;
    hashOfSibling: H;
}
export declare class SerializedWitnessNode<SH> {
    readonly _side: Side;
    readonly _hashOfSibling: SH;
    constructor(_side: Side, _hashOfSibling: SH);
    side: () => Side;
    hashOfSibling: () => SH;
}
/**
 * Commitment that a leaf node exists in the tree with an authentication path
 * and the rootHash of the tree at the time the authentication path was calculated.
 */
export declare class Witness<E, H, SE extends JsonSerializable, SH extends JsonSerializable> {
    readonly _treeSize: number;
    readonly rootHash: H;
    readonly authenticationPath: WitnessNode<H>[];
    readonly merkleHasher: MerkleHasher<E, H, SE, SH>;
    constructor(_treeSize: number, rootHash: H, authenticationPath: WitnessNode<H>[], merkleHasher: MerkleHasher<E, H, SE, SH>);
    verify(myHash: H): boolean;
    authPath(): SerializedWitnessNode<SH>[];
    treeSize(): number;
    serializeRootHash(): SH;
}
export declare type NoteWitness = Witness<NoteEncrypted, NoteEncryptedHash, SerializedNoteEncrypted, SerializedNoteEncryptedHash>;
export declare function IsNoteWitnessEqual(a: NoteWitness, b: NoteWitness): boolean;
//# sourceMappingURL=witness.d.ts.map