/// <reference types="node" />
import type { IDatabaseEncoding } from '../../storage/database/types';
import { Side } from '../merkletree';
export declare type NodeValue<H> = LeftNodeValue<H> | RightNodeValue<H>;
declare type LeftNodeValue<H> = {
    side: Side.Left;
    hashOfSibling: H;
    parentIndex: number;
};
declare type RightNodeValue<H> = {
    side: Side.Right;
    hashOfSibling: H;
    leftIndex: number;
};
export declare class NodeEncoding implements IDatabaseEncoding<NodeValue<Buffer>> {
    serialize(value: NodeValue<Buffer>): Buffer;
    deserialize(buffer: Buffer): NodeValue<Buffer>;
    getSize(): number;
}
export {};
//# sourceMappingURL=nodes.d.ts.map