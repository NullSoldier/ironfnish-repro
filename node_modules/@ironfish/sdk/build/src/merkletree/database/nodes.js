"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEncoding = void 0;
const bufio_1 = __importDefault(require("bufio"));
const merkletree_1 = require("../merkletree");
class NodeEncoding {
    serialize(value) {
        const bw = bufio_1.default.write(this.getSize());
        bw.writeHash(value.hashOfSibling);
        if (value.side === merkletree_1.Side.Left) {
            bw.writeU8(0);
            bw.writeU32(value.parentIndex);
        }
        else {
            bw.writeU8(1);
            bw.writeU32(value.leftIndex);
        }
        return bw.render();
    }
    deserialize(buffer) {
        const reader = bufio_1.default.read(buffer, true);
        const hashOfSibling = reader.readHash();
        const sideNumber = reader.readU8();
        const side = sideNumber === 0 ? merkletree_1.Side.Left : merkletree_1.Side.Right;
        const otherIndex = reader.readU32();
        if (side === merkletree_1.Side.Left) {
            const leftNode = {
                side,
                hashOfSibling,
                parentIndex: otherIndex,
            };
            return leftNode;
        }
        const rightNode = {
            side,
            hashOfSibling,
            leftIndex: otherIndex,
        };
        return rightNode;
    }
    getSize() {
        let size = 0;
        size += 1; // side
        size += 32; // merkleHash
        size += 4; // parentIndex
        return size;
    }
}
exports.NodeEncoding = NodeEncoding;
//# sourceMappingURL=nodes.js.map