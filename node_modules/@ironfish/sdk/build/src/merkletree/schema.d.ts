import { DatabaseKey, DatabaseSchema } from '../storage';
import { LeafIndex, NodeIndex, Side } from './merkletree';
interface CounterEntry<T extends string> extends DatabaseSchema {
    key: T;
    value: number;
}
export declare type CounterSchema = CounterEntry<'Leaves'> | CounterEntry<'Nodes'>;
export interface LeavesSchema<H> extends DatabaseSchema {
    key: LeafIndex;
    value: {
        merkleHash: H;
        parentIndex: NodeIndex;
    };
}
export interface LeavesIndexSchema<H extends DatabaseKey> extends DatabaseSchema {
    key: H;
    value: LeafIndex;
}
export declare type NodeValue<H> = {
    side: Side;
    hashOfSibling: H;
    parentIndex?: NodeIndex;
    leftIndex?: NodeIndex;
};
export interface NodesSchema<H> extends DatabaseSchema {
    key: NodeIndex;
    value: NodeValue<H>;
}
export {};
//# sourceMappingURL=schema.d.ts.map