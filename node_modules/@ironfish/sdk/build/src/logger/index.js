"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRootLogger = exports.setLogColorEnabledFromConfig = exports.setLogPrefixFromConfig = exports.setJSONLoggingFromConfig = exports.setLogLevelFromConfig = exports.ConsoleReporterInstance = void 0;
const consola_1 = __importStar(require("consola"));
const logLevelParser_1 = require("./logLevelParser");
const console_1 = require("./reporters/console");
__exportStar(require("./reporters/intercept"), exports);
exports.ConsoleReporterInstance = new console_1.ConsoleReporter();
/**
 * Updates the reporter's log levels from a config string.
 *
 * Format is like so: `*:warn,sdk:info`
 * @param logLevelConfig A log level string formatted for use in config files or env vars
 */
const setLogLevelFromConfig = (logLevelConfig) => {
    const parsedConfig = logLevelParser_1.parseLogLevelConfig(logLevelConfig);
    for (const [tag, level] of parsedConfig) {
        exports.ConsoleReporterInstance.setLogLevel(tag, level);
    }
};
exports.setLogLevelFromConfig = setLogLevelFromConfig;
/**
 * @param logToJSON Whether console logs should be in JSON format
 */
const setJSONLoggingFromConfig = (logToJSON) => {
    exports.ConsoleReporterInstance.logToJSON = logToJSON;
};
exports.setJSONLoggingFromConfig = setJSONLoggingFromConfig;
/**
 * Updates the reporter's log prefix from a config string.
 *
 * Format is like so: `[%time%] [%level%] [%tag%]`
 * @param logPrefix A string formatted for use in config files or environment vars
 */
const setLogPrefixFromConfig = (logPrefix) => {
    exports.ConsoleReporterInstance.logPrefix = logPrefix;
};
exports.setLogPrefixFromConfig = setLogPrefixFromConfig;
/**
 * Enables color when logging
 */
const setLogColorEnabledFromConfig = (enabled) => {
    exports.ConsoleReporterInstance.colorEnabled = enabled;
};
exports.setLogColorEnabledFromConfig = setLogColorEnabledFromConfig;
/**
 * Creates a logger instance with the desired default settings.
 */
const createRootLogger = () => {
    return consola_1.default.create({
        reporters: [exports.ConsoleReporterInstance],
        // We're filtering at the reporter level right now so we allow all logs through,
        // but if Consola provides a way to set tag-specific log levels, we should use that.
        level: consola_1.LogLevel.Verbose,
    });
};
exports.createRootLogger = createRootLogger;
//# sourceMappingURL=index.js.map