"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleReporter = exports.logObjToJSON = exports.getConsoleLogger = exports.loggers = void 0;
const assert_1 = require("../../assert");
const serde_1 = require("../../serde");
const text_1 = require("./text");
const silentLogger = () => {
    /* noop */
};
exports.loggers = {
    fatal: console.error,
    error: console.error,
    warn: console.warn,
    log: console.log,
    info: console.info,
    success: console.info,
    debug: console.debug,
    trace: console.trace,
    verbose: console.debug,
    ready: console.info,
    start: console.info,
    silent: silentLogger,
};
const getConsoleLogger = (logType) => {
    const logger = exports.loggers[logType];
    assert_1.Assert.isNotUndefined(logger);
    return logger;
};
exports.getConsoleLogger = getConsoleLogger;
const logObjToJSON = (logObj) => {
    const objectArgs = logObj.args.filter((a) => typeof a === 'object');
    const otherArgs = logObj.args.filter((a) => typeof a != 'object');
    const toLog = {
        ...objectArgs[0],
        level: logObj.level,
        tag: logObj.tag,
        date: logObj.date,
        message: otherArgs.join(' '),
    };
    return serde_1.IJSON.stringify(toLog);
};
exports.logObjToJSON = logObjToJSON;
class ConsoleReporter extends text_1.TextReporter {
    constructor() {
        super(...arguments);
        this.logToJSON = false;
    }
    logText(logObj, args) {
        const logger = exports.getConsoleLogger(logObj.type);
        this.logToJSON ? logger(exports.logObjToJSON(logObj)) : logger(...args);
    }
}
exports.ConsoleReporter = ConsoleReporter;
//# sourceMappingURL=console.js.map